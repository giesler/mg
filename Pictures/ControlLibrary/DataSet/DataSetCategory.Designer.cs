//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace msn2.net.Pictures.Controls {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetCategory")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")]
    public partial class DataSetCategory : System.Data.DataSet {
        
        private CategoryDataTable tableCategory;
        
        private CategoryGroupDataTable tableCategoryGroup;
        
        private System.Data.DataRelation relationCategoryCategoryGroup;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public DataSetCategory() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        protected DataSetCategory(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Category"] != null)) {
                    base.Tables.Add(new CategoryDataTable(ds.Tables["Category"]));
                }
                if ((ds.Tables["CategoryGroup"] != null)) {
                    base.Tables.Add(new CategoryGroupDataTable(ds.Tables["CategoryGroup"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoryDataTable Category {
            get {
                return this.tableCategory;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoryGroupDataTable CategoryGroup {
            get {
                return this.tableCategoryGroup;
            }
        }
        
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        public override System.Data.DataSet Clone() {
            DataSetCategory cln = ((DataSetCategory)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Category"] != null)) {
                    base.Tables.Add(new CategoryDataTable(ds.Tables["Category"]));
                }
                if ((ds.Tables["CategoryGroup"] != null)) {
                    base.Tables.Add(new CategoryGroupDataTable(ds.Tables["CategoryGroup"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableCategory = ((CategoryDataTable)(base.Tables["Category"]));
            if ((initTable == true)) {
                if ((this.tableCategory != null)) {
                    this.tableCategory.InitVars();
                }
            }
            this.tableCategoryGroup = ((CategoryGroupDataTable)(base.Tables["CategoryGroup"]));
            if ((initTable == true)) {
                if ((this.tableCategoryGroup != null)) {
                    this.tableCategoryGroup.InitVars();
                }
            }
            this.relationCategoryCategoryGroup = this.Relations["CategoryCategoryGroup"];
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetCategory";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetCategory.xsd";
            this.EnforceConstraints = true;
            this.tableCategory = new CategoryDataTable();
            base.Tables.Add(this.tableCategory);
            this.tableCategoryGroup = new CategoryGroupDataTable();
            base.Tables.Add(this.tableCategoryGroup);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("CategoryCategoryGroup", new System.Data.DataColumn[] {
                        this.tableCategory.CategoryIDColumn}, new System.Data.DataColumn[] {
                        this.tableCategoryGroup.CategoryIDColumn});
            this.tableCategoryGroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationCategoryCategoryGroup = new System.Data.DataRelation("CategoryCategoryGroup", new System.Data.DataColumn[] {
                        this.tableCategory.CategoryIDColumn}, new System.Data.DataColumn[] {
                        this.tableCategoryGroup.CategoryIDColumn}, false);
            this.Relations.Add(this.relationCategoryCategoryGroup);
        }
        
        private bool ShouldSerializeCategory() {
            return false;
        }
        
        private bool ShouldSerializeCategoryGroup() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetCategory ds = new DataSetCategory();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void CategoryRowChangeEventHandler(object sender, CategoryRowChangeEvent e);
        
        public delegate void CategoryGroupRowChangeEventHandler(object sender, CategoryGroupRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategoryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCategoryID;
            
            private System.Data.DataColumn columnCategoryParentID;
            
            private System.Data.DataColumn columnCategoryName;
            
            private System.Data.DataColumn columnCategoryPath;
            
            private System.Data.DataColumn columnCategoryDescription;
            
            private System.Data.DataColumn columnPublish;
            
            private System.Data.DataColumn columnCategoryDate;
            
            public CategoryDataTable() {
                this.TableName = "Category";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CategoryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CategoryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            public System.Data.DataColumn CategoryParentIDColumn {
                get {
                    return this.columnCategoryParentID;
                }
            }
            
            public System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            public System.Data.DataColumn CategoryPathColumn {
                get {
                    return this.columnCategoryPath;
                }
            }
            
            public System.Data.DataColumn CategoryDescriptionColumn {
                get {
                    return this.columnCategoryDescription;
                }
            }
            
            public System.Data.DataColumn PublishColumn {
                get {
                    return this.columnPublish;
                }
            }
            
            public System.Data.DataColumn CategoryDateColumn {
                get {
                    return this.columnCategoryDate;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CategoryRow this[int index] {
                get {
                    return ((CategoryRow)(this.Rows[index]));
                }
            }
            
            public event CategoryRowChangeEventHandler CategoryRowChanged;
            
            public event CategoryRowChangeEventHandler CategoryRowChanging;
            
            public event CategoryRowChangeEventHandler CategoryRowDeleted;
            
            public event CategoryRowChangeEventHandler CategoryRowDeleting;
            
            public void AddCategoryRow(CategoryRow row) {
                this.Rows.Add(row);
            }
            
            public CategoryRow AddCategoryRow(int CategoryParentID, string CategoryName, string CategoryPath, string CategoryDescription, bool Publish, System.DateTime CategoryDate) {
                CategoryRow rowCategoryRow = ((CategoryRow)(this.NewRow()));
                rowCategoryRow.ItemArray = new object[] {
                        null,
                        CategoryParentID,
                        CategoryName,
                        CategoryPath,
                        CategoryDescription,
                        Publish,
                        CategoryDate};
                this.Rows.Add(rowCategoryRow);
                return rowCategoryRow;
            }
            
            public CategoryRow FindByCategoryID(int CategoryID) {
                return ((CategoryRow)(this.Rows.Find(new object[] {
                            CategoryID})));
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CategoryDataTable cln = ((CategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CategoryDataTable();
            }
            
            internal void InitVars() {
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnCategoryParentID = base.Columns["CategoryParentID"];
                this.columnCategoryName = base.Columns["CategoryName"];
                this.columnCategoryPath = base.Columns["CategoryPath"];
                this.columnCategoryDescription = base.Columns["CategoryDescription"];
                this.columnPublish = base.Columns["Publish"];
                this.columnCategoryDate = base.Columns["CategoryDate"];
            }
            
            private void InitClass() {
                this.columnCategoryID = new System.Data.DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnCategoryParentID = new System.Data.DataColumn("CategoryParentID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryParentID);
                this.columnCategoryName = new System.Data.DataColumn("CategoryName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
                this.columnCategoryPath = new System.Data.DataColumn("CategoryPath", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryPath);
                this.columnCategoryDescription = new System.Data.DataColumn("CategoryDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryDescription);
                this.columnPublish = new System.Data.DataColumn("Publish", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPublish);
                this.columnCategoryDate = new System.Data.DataColumn("CategoryDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryDate);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSetCategoryKey1", new System.Data.DataColumn[] {
                                this.columnCategoryID}, true));
                this.columnCategoryID.AutoIncrement = true;
                this.columnCategoryID.AutoIncrementStep = -1;
                this.columnCategoryID.AllowDBNull = false;
                this.columnCategoryID.ReadOnly = true;
                this.columnCategoryID.Unique = true;
                this.columnCategoryParentID.AllowDBNull = false;
                this.columnCategoryName.AllowDBNull = false;
                this.columnPublish.AllowDBNull = false;
                this.columnPublish.DefaultValue = ((bool)(true));
            }
            
            public CategoryRow NewCategoryRow() {
                return ((CategoryRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CategoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CategoryRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoryRowChanged != null)) {
                    this.CategoryRowChanged(this, new CategoryRowChangeEvent(((CategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoryRowChanging != null)) {
                    this.CategoryRowChanging(this, new CategoryRowChangeEvent(((CategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoryRowDeleted != null)) {
                    this.CategoryRowDeleted(this, new CategoryRowChangeEvent(((CategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoryRowDeleting != null)) {
                    this.CategoryRowDeleting(this, new CategoryRowChangeEvent(((CategoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCategoryRow(CategoryRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetCategory ds = new DataSetCategory();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategoryGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCategoryGroupID;
            
            private System.Data.DataColumn columnCategoryID;
            
            private System.Data.DataColumn columnGroupID;
            
            public CategoryGroupDataTable() {
                this.TableName = "CategoryGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CategoryGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CategoryGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn CategoryGroupIDColumn {
                get {
                    return this.columnCategoryGroupID;
                }
            }
            
            public System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            public System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CategoryGroupRow this[int index] {
                get {
                    return ((CategoryGroupRow)(this.Rows[index]));
                }
            }
            
            public event CategoryGroupRowChangeEventHandler CategoryGroupRowChanged;
            
            public event CategoryGroupRowChangeEventHandler CategoryGroupRowChanging;
            
            public event CategoryGroupRowChangeEventHandler CategoryGroupRowDeleted;
            
            public event CategoryGroupRowChangeEventHandler CategoryGroupRowDeleting;
            
            public void AddCategoryGroupRow(CategoryGroupRow row) {
                this.Rows.Add(row);
            }
            
            public CategoryGroupRow AddCategoryGroupRow(CategoryRow parentCategoryRowByCategoryCategoryGroup, int GroupID) {
                CategoryGroupRow rowCategoryGroupRow = ((CategoryGroupRow)(this.NewRow()));
                rowCategoryGroupRow.ItemArray = new object[] {
                        null,
                        parentCategoryRowByCategoryCategoryGroup[0],
                        GroupID};
                this.Rows.Add(rowCategoryGroupRow);
                return rowCategoryGroupRow;
            }
            
            public CategoryGroupRow FindByCategoryGroupID(int CategoryGroupID) {
                return ((CategoryGroupRow)(this.Rows.Find(new object[] {
                            CategoryGroupID})));
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CategoryGroupDataTable cln = ((CategoryGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CategoryGroupDataTable();
            }
            
            internal void InitVars() {
                this.columnCategoryGroupID = base.Columns["CategoryGroupID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnGroupID = base.Columns["GroupID"];
            }
            
            private void InitClass() {
                this.columnCategoryGroupID = new System.Data.DataColumn("CategoryGroupID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryGroupID);
                this.columnCategoryID = new System.Data.DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnGroupID = new System.Data.DataColumn("GroupID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupID);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSetCategoryKey2", new System.Data.DataColumn[] {
                                this.columnCategoryGroupID}, true));
                this.columnCategoryGroupID.AutoIncrement = true;
                this.columnCategoryGroupID.AutoIncrementStep = -1;
                this.columnCategoryGroupID.AllowDBNull = false;
                this.columnCategoryGroupID.ReadOnly = true;
                this.columnCategoryGroupID.Unique = true;
            }
            
            public CategoryGroupRow NewCategoryGroupRow() {
                return ((CategoryGroupRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CategoryGroupRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CategoryGroupRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoryGroupRowChanged != null)) {
                    this.CategoryGroupRowChanged(this, new CategoryGroupRowChangeEvent(((CategoryGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoryGroupRowChanging != null)) {
                    this.CategoryGroupRowChanging(this, new CategoryGroupRowChangeEvent(((CategoryGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoryGroupRowDeleted != null)) {
                    this.CategoryGroupRowDeleted(this, new CategoryGroupRowChangeEvent(((CategoryGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoryGroupRowDeleting != null)) {
                    this.CategoryGroupRowDeleting(this, new CategoryGroupRowChangeEvent(((CategoryGroupRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCategoryGroupRow(CategoryGroupRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetCategory ds = new DataSetCategory();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoryGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        public partial class CategoryRow : System.Data.DataRow {
            
            private CategoryDataTable tableCategory;
            
            internal CategoryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategory = ((CategoryDataTable)(this.Table));
            }
            
            public int CategoryID {
                get {
                    return ((int)(this[this.tableCategory.CategoryIDColumn]));
                }
                set {
                    this[this.tableCategory.CategoryIDColumn] = value;
                }
            }
            
            public int CategoryParentID {
                get {
                    return ((int)(this[this.tableCategory.CategoryParentIDColumn]));
                }
                set {
                    this[this.tableCategory.CategoryParentIDColumn] = value;
                }
            }
            
            public string CategoryName {
                get {
                    return ((string)(this[this.tableCategory.CategoryNameColumn]));
                }
                set {
                    this[this.tableCategory.CategoryNameColumn] = value;
                }
            }
            
            public string CategoryPath {
                get {
                    try {
                        return ((string)(this[this.tableCategory.CategoryPathColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CategoryPath\' in table \'Category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory.CategoryPathColumn] = value;
                }
            }
            
            public string CategoryDescription {
                get {
                    try {
                        return ((string)(this[this.tableCategory.CategoryDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CategoryDescription\' in table \'Category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory.CategoryDescriptionColumn] = value;
                }
            }
            
            public bool Publish {
                get {
                    return ((bool)(this[this.tableCategory.PublishColumn]));
                }
                set {
                    this[this.tableCategory.PublishColumn] = value;
                }
            }
            
            public System.DateTime CategoryDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCategory.CategoryDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CategoryDate\' in table \'Category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory.CategoryDateColumn] = value;
                }
            }
            
            public bool IsCategoryPathNull() {
                return this.IsNull(this.tableCategory.CategoryPathColumn);
            }
            
            public void SetCategoryPathNull() {
                this[this.tableCategory.CategoryPathColumn] = System.Convert.DBNull;
            }
            
            public bool IsCategoryDescriptionNull() {
                return this.IsNull(this.tableCategory.CategoryDescriptionColumn);
            }
            
            public void SetCategoryDescriptionNull() {
                this[this.tableCategory.CategoryDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCategoryDateNull() {
                return this.IsNull(this.tableCategory.CategoryDateColumn);
            }
            
            public void SetCategoryDateNull() {
                this[this.tableCategory.CategoryDateColumn] = System.Convert.DBNull;
            }
            
            public CategoryGroupRow[] GetCategoryGroupRows() {
                return ((CategoryGroupRow[])(base.GetChildRows(this.Table.ChildRelations["CategoryCategoryGroup"])));
            }
        }
        
        public partial class CategoryGroupRow : System.Data.DataRow {
            
            private CategoryGroupDataTable tableCategoryGroup;
            
            internal CategoryGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategoryGroup = ((CategoryGroupDataTable)(this.Table));
            }
            
            public int CategoryGroupID {
                get {
                    return ((int)(this[this.tableCategoryGroup.CategoryGroupIDColumn]));
                }
                set {
                    this[this.tableCategoryGroup.CategoryGroupIDColumn] = value;
                }
            }
            
            public int CategoryID {
                get {
                    try {
                        return ((int)(this[this.tableCategoryGroup.CategoryIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CategoryID\' in table \'CategoryGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategoryGroup.CategoryIDColumn] = value;
                }
            }
            
            public int GroupID {
                get {
                    try {
                        return ((int)(this[this.tableCategoryGroup.GroupIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GroupID\' in table \'CategoryGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategoryGroup.GroupIDColumn] = value;
                }
            }
            
            public CategoryRow CategoryRow {
                get {
                    return ((CategoryRow)(this.GetParentRow(this.Table.ParentRelations["CategoryCategoryGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CategoryCategoryGroup"]);
                }
            }
            
            public bool IsCategoryIDNull() {
                return this.IsNull(this.tableCategoryGroup.CategoryIDColumn);
            }
            
            public void SetCategoryIDNull() {
                this[this.tableCategoryGroup.CategoryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableCategoryGroup.GroupIDColumn);
            }
            
            public void SetGroupIDNull() {
                this[this.tableCategoryGroup.GroupIDColumn] = System.Convert.DBNull;
            }
        }
        
        public class CategoryRowChangeEvent : System.EventArgs {
            
            private CategoryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CategoryRowChangeEvent(CategoryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class CategoryGroupRowChangeEvent : System.EventArgs {
            
            private CategoryGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CategoryGroupRowChangeEvent(CategoryGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CategoryGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
