//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace msn2.net.Pictures.Controls {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetPerson")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")]
    public partial class DataSetPerson : System.Data.DataSet {
        
        private PersonDataTable tablePerson;
        
        private PersonGroupDataTable tablePersonGroup;
        
        private System.Data.DataRelation relationPersonPersonGroup;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public DataSetPerson() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        protected DataSetPerson(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Person"] != null)) {
                    base.Tables.Add(new PersonDataTable(ds.Tables["Person"]));
                }
                if ((ds.Tables["PersonGroup"] != null)) {
                    base.Tables.Add(new PersonGroupDataTable(ds.Tables["PersonGroup"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersonDataTable Person {
            get {
                return this.tablePerson;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersonGroupDataTable PersonGroup {
            get {
                return this.tablePersonGroup;
            }
        }
        
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        public override System.Data.DataSet Clone() {
            DataSetPerson cln = ((DataSetPerson)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Person"] != null)) {
                    base.Tables.Add(new PersonDataTable(ds.Tables["Person"]));
                }
                if ((ds.Tables["PersonGroup"] != null)) {
                    base.Tables.Add(new PersonGroupDataTable(ds.Tables["PersonGroup"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tablePerson = ((PersonDataTable)(base.Tables["Person"]));
            if ((initTable == true)) {
                if ((this.tablePerson != null)) {
                    this.tablePerson.InitVars();
                }
            }
            this.tablePersonGroup = ((PersonGroupDataTable)(base.Tables["PersonGroup"]));
            if ((initTable == true)) {
                if ((this.tablePersonGroup != null)) {
                    this.tablePersonGroup.InitVars();
                }
            }
            this.relationPersonPersonGroup = this.Relations["PersonPersonGroup"];
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetPerson";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetPerson.xsd";
            this.EnforceConstraints = true;
            this.tablePerson = new PersonDataTable();
            base.Tables.Add(this.tablePerson);
            this.tablePersonGroup = new PersonGroupDataTable();
            base.Tables.Add(this.tablePersonGroup);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("PersonPersonGroup", new System.Data.DataColumn[] {
                        this.tablePerson.PersonIDColumn}, new System.Data.DataColumn[] {
                        this.tablePersonGroup.PersonIDColumn});
            this.tablePersonGroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPersonPersonGroup = new System.Data.DataRelation("PersonPersonGroup", new System.Data.DataColumn[] {
                        this.tablePerson.PersonIDColumn}, new System.Data.DataColumn[] {
                        this.tablePersonGroup.PersonIDColumn}, false);
            this.Relations.Add(this.relationPersonPersonGroup);
        }
        
        private bool ShouldSerializePerson() {
            return false;
        }
        
        private bool ShouldSerializePersonGroup() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetPerson ds = new DataSetPerson();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void PersonRowChangeEventHandler(object sender, PersonRowChangeEvent e);
        
        public delegate void PersonGroupRowChangeEventHandler(object sender, PersonGroupRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PersonDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPersonID;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnEmail;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnResetPWGuid;
            
            private System.Data.DataColumn columnResetPWExpire;
            
            public PersonDataTable() {
                this.TableName = "Person";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal PersonDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected PersonDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn PersonIDColumn {
                get {
                    return this.columnPersonID;
                }
            }
            
            public System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            public System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            public System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            public System.Data.DataColumn ResetPWGuidColumn {
                get {
                    return this.columnResetPWGuid;
                }
            }
            
            public System.Data.DataColumn ResetPWExpireColumn {
                get {
                    return this.columnResetPWExpire;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public PersonRow this[int index] {
                get {
                    return ((PersonRow)(this.Rows[index]));
                }
            }
            
            public event PersonRowChangeEventHandler PersonRowChanged;
            
            public event PersonRowChangeEventHandler PersonRowChanging;
            
            public event PersonRowChangeEventHandler PersonRowDeleted;
            
            public event PersonRowChangeEventHandler PersonRowDeleting;
            
            public void AddPersonRow(PersonRow row) {
                this.Rows.Add(row);
            }
            
            public PersonRow AddPersonRow(string LastName, string FirstName, string FullName, string Email, string Password, byte[] ResetPWGuid, System.DateTime ResetPWExpire) {
                PersonRow rowPersonRow = ((PersonRow)(this.NewRow()));
                rowPersonRow.ItemArray = new object[] {
                        null,
                        LastName,
                        FirstName,
                        FullName,
                        Email,
                        Password,
                        ResetPWGuid,
                        ResetPWExpire};
                this.Rows.Add(rowPersonRow);
                return rowPersonRow;
            }
            
            public PersonRow FindByPersonID(int PersonID) {
                return ((PersonRow)(this.Rows.Find(new object[] {
                            PersonID})));
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                PersonDataTable cln = ((PersonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new PersonDataTable();
            }
            
            internal void InitVars() {
                this.columnPersonID = base.Columns["PersonID"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnFullName = base.Columns["FullName"];
                this.columnEmail = base.Columns["Email"];
                this.columnPassword = base.Columns["Password"];
                this.columnResetPWGuid = base.Columns["ResetPWGuid"];
                this.columnResetPWExpire = base.Columns["ResetPWExpire"];
            }
            
            private void InitClass() {
                this.columnPersonID = new System.Data.DataColumn("PersonID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonID);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnEmail = new System.Data.DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnResetPWGuid = new System.Data.DataColumn("ResetPWGuid", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResetPWGuid);
                this.columnResetPWExpire = new System.Data.DataColumn("ResetPWExpire", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResetPWExpire);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSetPersonKey1", new System.Data.DataColumn[] {
                                this.columnPersonID}, true));
                this.columnPersonID.AutoIncrement = true;
                this.columnPersonID.AutoIncrementStep = -1;
                this.columnPersonID.AllowDBNull = false;
                this.columnPersonID.ReadOnly = true;
                this.columnPersonID.Unique = true;
            }
            
            public PersonRow NewPersonRow() {
                return ((PersonRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PersonRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PersonRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PersonRowChanged != null)) {
                    this.PersonRowChanged(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PersonRowChanging != null)) {
                    this.PersonRowChanging(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PersonRowDeleted != null)) {
                    this.PersonRowDeleted(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PersonRowDeleting != null)) {
                    this.PersonRowDeleting(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePersonRow(PersonRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetPerson ds = new DataSetPerson();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PersonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PersonGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPersonGroupID;
            
            private System.Data.DataColumn columnPersonID;
            
            private System.Data.DataColumn columnGroupID;
            
            public PersonGroupDataTable() {
                this.TableName = "PersonGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal PersonGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected PersonGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn PersonGroupIDColumn {
                get {
                    return this.columnPersonGroupID;
                }
            }
            
            public System.Data.DataColumn PersonIDColumn {
                get {
                    return this.columnPersonID;
                }
            }
            
            public System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public PersonGroupRow this[int index] {
                get {
                    return ((PersonGroupRow)(this.Rows[index]));
                }
            }
            
            public event PersonGroupRowChangeEventHandler PersonGroupRowChanged;
            
            public event PersonGroupRowChangeEventHandler PersonGroupRowChanging;
            
            public event PersonGroupRowChangeEventHandler PersonGroupRowDeleted;
            
            public event PersonGroupRowChangeEventHandler PersonGroupRowDeleting;
            
            public void AddPersonGroupRow(PersonGroupRow row) {
                this.Rows.Add(row);
            }
            
            public PersonGroupRow AddPersonGroupRow(PersonRow parentPersonRowByPersonPersonGroup, int GroupID) {
                PersonGroupRow rowPersonGroupRow = ((PersonGroupRow)(this.NewRow()));
                rowPersonGroupRow.ItemArray = new object[] {
                        null,
                        parentPersonRowByPersonPersonGroup[0],
                        GroupID};
                this.Rows.Add(rowPersonGroupRow);
                return rowPersonGroupRow;
            }
            
            public PersonGroupRow FindByPersonIDGroupID(int PersonID, int GroupID) {
                return ((PersonGroupRow)(this.Rows.Find(new object[] {
                            PersonID,
                            GroupID})));
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                PersonGroupDataTable cln = ((PersonGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new PersonGroupDataTable();
            }
            
            internal void InitVars() {
                this.columnPersonGroupID = base.Columns["PersonGroupID"];
                this.columnPersonID = base.Columns["PersonID"];
                this.columnGroupID = base.Columns["GroupID"];
            }
            
            private void InitClass() {
                this.columnPersonGroupID = new System.Data.DataColumn("PersonGroupID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonGroupID);
                this.columnPersonID = new System.Data.DataColumn("PersonID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonID);
                this.columnGroupID = new System.Data.DataColumn("GroupID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupID);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSetPersonKey2", new System.Data.DataColumn[] {
                                this.columnPersonID,
                                this.columnGroupID}, true));
                this.columnPersonGroupID.AutoIncrement = true;
                this.columnPersonGroupID.AutoIncrementStep = -1;
                this.columnPersonGroupID.AllowDBNull = false;
                this.columnPersonGroupID.ReadOnly = true;
                this.columnPersonID.AllowDBNull = false;
                this.columnGroupID.AllowDBNull = false;
            }
            
            public PersonGroupRow NewPersonGroupRow() {
                return ((PersonGroupRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PersonGroupRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PersonGroupRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PersonGroupRowChanged != null)) {
                    this.PersonGroupRowChanged(this, new PersonGroupRowChangeEvent(((PersonGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PersonGroupRowChanging != null)) {
                    this.PersonGroupRowChanging(this, new PersonGroupRowChangeEvent(((PersonGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PersonGroupRowDeleted != null)) {
                    this.PersonGroupRowDeleted(this, new PersonGroupRowChangeEvent(((PersonGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PersonGroupRowDeleting != null)) {
                    this.PersonGroupRowDeleting(this, new PersonGroupRowChangeEvent(((PersonGroupRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePersonGroupRow(PersonGroupRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetPerson ds = new DataSetPerson();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PersonGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        public partial class PersonRow : System.Data.DataRow {
            
            private PersonDataTable tablePerson;
            
            internal PersonRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerson = ((PersonDataTable)(this.Table));
            }
            
            public int PersonID {
                get {
                    return ((int)(this[this.tablePerson.PersonIDColumn]));
                }
                set {
                    this[this.tablePerson.PersonIDColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.LastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LastName\' in table \'Person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.LastNameColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.FirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstName\' in table \'Person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.FirstNameColumn] = value;
                }
            }
            
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'Person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.FullNameColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tablePerson.EmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Email\' in table \'Person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.EmailColumn] = value;
                }
            }
            
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tablePerson.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Password\' in table \'Person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.PasswordColumn] = value;
                }
            }
            
            public byte[] ResetPWGuid {
                get {
                    try {
                        return ((byte[])(this[this.tablePerson.ResetPWGuidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ResetPWGuid\' in table \'Person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.ResetPWGuidColumn] = value;
                }
            }
            
            public System.DateTime ResetPWExpire {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePerson.ResetPWExpireColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ResetPWExpire\' in table \'Person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.ResetPWExpireColumn] = value;
                }
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tablePerson.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tablePerson.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tablePerson.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tablePerson.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullNameNull() {
                return this.IsNull(this.tablePerson.FullNameColumn);
            }
            
            public void SetFullNameNull() {
                this[this.tablePerson.FullNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tablePerson.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tablePerson.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsPasswordNull() {
                return this.IsNull(this.tablePerson.PasswordColumn);
            }
            
            public void SetPasswordNull() {
                this[this.tablePerson.PasswordColumn] = System.Convert.DBNull;
            }
            
            public bool IsResetPWGuidNull() {
                return this.IsNull(this.tablePerson.ResetPWGuidColumn);
            }
            
            public void SetResetPWGuidNull() {
                this[this.tablePerson.ResetPWGuidColumn] = System.Convert.DBNull;
            }
            
            public bool IsResetPWExpireNull() {
                return this.IsNull(this.tablePerson.ResetPWExpireColumn);
            }
            
            public void SetResetPWExpireNull() {
                this[this.tablePerson.ResetPWExpireColumn] = System.Convert.DBNull;
            }
            
            public PersonGroupRow[] GetPersonGroupRows() {
                return ((PersonGroupRow[])(base.GetChildRows(this.Table.ChildRelations["PersonPersonGroup"])));
            }
        }
        
        public partial class PersonGroupRow : System.Data.DataRow {
            
            private PersonGroupDataTable tablePersonGroup;
            
            internal PersonGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePersonGroup = ((PersonGroupDataTable)(this.Table));
            }
            
            public int PersonGroupID {
                get {
                    return ((int)(this[this.tablePersonGroup.PersonGroupIDColumn]));
                }
                set {
                    this[this.tablePersonGroup.PersonGroupIDColumn] = value;
                }
            }
            
            public int PersonID {
                get {
                    return ((int)(this[this.tablePersonGroup.PersonIDColumn]));
                }
                set {
                    this[this.tablePersonGroup.PersonIDColumn] = value;
                }
            }
            
            public int GroupID {
                get {
                    return ((int)(this[this.tablePersonGroup.GroupIDColumn]));
                }
                set {
                    this[this.tablePersonGroup.GroupIDColumn] = value;
                }
            }
            
            public PersonRow PersonRow {
                get {
                    return ((PersonRow)(this.GetParentRow(this.Table.ParentRelations["PersonPersonGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PersonPersonGroup"]);
                }
            }
        }
        
        public class PersonRowChangeEvent : System.EventArgs {
            
            private PersonRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public PersonRowChangeEvent(PersonRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PersonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class PersonGroupRowChangeEvent : System.EventArgs {
            
            private PersonGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public PersonGroupRowChangeEvent(PersonGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PersonGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
