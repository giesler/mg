//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace msn2.net.Pictures.Controls {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetPerson")]
    public partial class DataSetPerson : System.Data.DataSet {
        
        private PersonDataTable tablePerson;
        
        private PersonGroupDataTable tablePersonGroup;
        
        private System.Data.DataRelation relationPersonPersonGroup;
        
        public DataSetPerson() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected DataSetPerson(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Person"] != null)) {
                    base.Tables.Add(new PersonDataTable(ds.Tables["Person"]));
                }
                if ((ds.Tables["PersonGroup"] != null)) {
                    base.Tables.Add(new PersonGroupDataTable(ds.Tables["PersonGroup"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersonDataTable Person {
            get {
                return this.tablePerson;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersonGroupDataTable PersonGroup {
            get {
                return this.tablePersonGroup;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            DataSetPerson cln = ((DataSetPerson)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Person"] != null)) {
                base.Tables.Add(new PersonDataTable(ds.Tables["Person"]));
            }
            if ((ds.Tables["PersonGroup"] != null)) {
                base.Tables.Add(new PersonGroupDataTable(ds.Tables["PersonGroup"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tablePerson = ((PersonDataTable)(base.Tables["Person"]));
            if ((initTable == true)) {
                if ((this.tablePerson != null)) {
                    this.tablePerson.InitVars();
                }
            }
            this.tablePersonGroup = ((PersonGroupDataTable)(base.Tables["PersonGroup"]));
            if ((initTable == true)) {
                if ((this.tablePersonGroup != null)) {
                    this.tablePersonGroup.InitVars();
                }
            }
            this.relationPersonPersonGroup = this.Relations["PersonPersonGroup"];
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetPerson";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetPerson.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePerson = new PersonDataTable();
            base.Tables.Add(this.tablePerson);
            this.tablePersonGroup = new PersonGroupDataTable();
            base.Tables.Add(this.tablePersonGroup);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("PersonPersonGroup", new System.Data.DataColumn[] {
                        this.tablePerson.PersonIDColumn}, new System.Data.DataColumn[] {
                        this.tablePersonGroup.PersonIDColumn});
            this.tablePersonGroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPersonPersonGroup = new System.Data.DataRelation("PersonPersonGroup", new System.Data.DataColumn[] {
                        this.tablePerson.PersonIDColumn}, new System.Data.DataColumn[] {
                        this.tablePersonGroup.PersonIDColumn}, false);
            this.Relations.Add(this.relationPersonPersonGroup);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "DataSetPerson");
            this.ExtendedProperties.Add("User_DataSetName", "DataSetPerson");
        }
        
        private bool ShouldSerializePerson() {
            return false;
        }
        
        private bool ShouldSerializePersonGroup() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetPerson ds = new DataSetPerson();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void PersonRowChangeEventHandler(object sender, PersonRowChangeEvent e);
        
        public delegate void PersonGroupRowChangeEventHandler(object sender, PersonGroupRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PersonDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPersonID;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnEmail;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnResetPWGuid;
            
            private System.Data.DataColumn columnResetPWExpire;
            
            private bool m_suspendValidation = false;
            
            public PersonDataTable() {
                this.TableName = "Person";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal PersonDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected PersonDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn PersonIDColumn {
                get {
                    return this.columnPersonID;
                }
            }
            
            internal System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            internal System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            internal System.Data.DataColumn ResetPWGuidColumn {
                get {
                    return this.columnResetPWGuid;
                }
            }
            
            internal System.Data.DataColumn ResetPWExpireColumn {
                get {
                    return this.columnResetPWExpire;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public PersonRow this[int index] {
                get {
                    return ((PersonRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event PersonIDChangeEventHandler PersonIDChanging;
            
            public event PersonIDChangeEventHandler PersonIDChanged;
            
            public event LastNameChangeEventHandler LastNameChanging;
            
            public event LastNameChangeEventHandler LastNameChanged;
            
            public event FirstNameChangeEventHandler FirstNameChanging;
            
            public event FirstNameChangeEventHandler FirstNameChanged;
            
            public event FullNameChangeEventHandler FullNameChanging;
            
            public event FullNameChangeEventHandler FullNameChanged;
            
            public event EmailChangeEventHandler EmailChanging;
            
            public event EmailChangeEventHandler EmailChanged;
            
            public event PasswordChangeEventHandler PasswordChanging;
            
            public event PasswordChangeEventHandler PasswordChanged;
            
            public event ResetPWGuidChangeEventHandler ResetPWGuidChanging;
            
            public event ResetPWGuidChangeEventHandler ResetPWGuidChanged;
            
            public event ResetPWExpireChangeEventHandler ResetPWExpireChanging;
            
            public event ResetPWExpireChangeEventHandler ResetPWExpireChanged;
            
            public event PersonRowChangeEventHandler PersonRowChanged;
            
            public event PersonRowChangeEventHandler PersonRowChanging;
            
            public event PersonRowChangeEventHandler PersonRowDeleted;
            
            public event PersonRowChangeEventHandler PersonRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "PersonID")) {
                    if ((this.PersonIDChanging != null)) {
                        this.PersonIDChanging(this, new PersonIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "LastName")) {
                        if ((this.LastNameChanging != null)) {
                            this.LastNameChanging(this, new LastNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "FirstName")) {
                            if ((this.FirstNameChanging != null)) {
                                this.FirstNameChanging(this, new FirstNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "FullName")) {
                                if ((this.FullNameChanging != null)) {
                                    this.FullNameChanging(this, new FullNameChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Email")) {
                                    if ((this.EmailChanging != null)) {
                                        this.EmailChanging(this, new EmailChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "Password")) {
                                        if ((this.PasswordChanging != null)) {
                                            this.PasswordChanging(this, new PasswordChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "ResetPWGuid")) {
                                            if ((this.ResetPWGuidChanging != null)) {
                                                this.ResetPWGuidChanging(this, new ResetPWGuidChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "ResetPWExpire")) {
                                                if ((this.ResetPWExpireChanging != null)) {
                                                    this.ResetPWExpireChanging(this, new ResetPWExpireChangeEventArg(e));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "PersonID")) {
                    if ((this.PersonIDChanged != null)) {
                        this.PersonIDChanged(this, new PersonIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "LastName")) {
                        if ((this.LastNameChanged != null)) {
                            this.LastNameChanged(this, new LastNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "FirstName")) {
                            if ((this.FirstNameChanged != null)) {
                                this.FirstNameChanged(this, new FirstNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "FullName")) {
                                if ((this.FullNameChanged != null)) {
                                    this.FullNameChanged(this, new FullNameChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Email")) {
                                    if ((this.EmailChanged != null)) {
                                        this.EmailChanged(this, new EmailChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "Password")) {
                                        if ((this.PasswordChanged != null)) {
                                            this.PasswordChanged(this, new PasswordChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "ResetPWGuid")) {
                                            if ((this.ResetPWGuidChanged != null)) {
                                                this.ResetPWGuidChanged(this, new ResetPWGuidChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "ResetPWExpire")) {
                                                if ((this.ResetPWExpireChanged != null)) {
                                                    this.ResetPWExpireChanged(this, new ResetPWExpireChangeEventArg(e));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddPersonRow(PersonRow row) {
                this.Rows.Add(row);
            }
            
            public PersonRow AddPersonRow(string LastName, string FirstName, string FullName, string Email, string Password, byte[] ResetPWGuid, System.DateTime ResetPWExpire) {
                PersonRow rowPersonRow = ((PersonRow)(this.NewRow()));
                rowPersonRow.ItemArray = new object[] {
                        null,
                        LastName,
                        FirstName,
                        FullName,
                        Email,
                        Password,
                        ResetPWGuid,
                        ResetPWExpire};
                this.Rows.Add(rowPersonRow);
                return rowPersonRow;
            }
            
            public PersonRow FindByPersonID(int PersonID) {
                return ((PersonRow)(this.Rows.Find(new object[] {
                            PersonID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                PersonDataTable cln = ((PersonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new PersonDataTable();
            }
            
            internal void InitVars() {
                this.columnPersonID = base.Columns["PersonID"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnFullName = base.Columns["FullName"];
                this.columnEmail = base.Columns["Email"];
                this.columnPassword = base.Columns["Password"];
                this.columnResetPWGuid = base.Columns["ResetPWGuid"];
                this.columnResetPWExpire = base.Columns["ResetPWExpire"];
            }
            
            private void InitClass() {
                this.columnPersonID = new System.Data.DataColumn("PersonID", typeof(int), null, System.Data.MappingType.Element);
                this.columnPersonID.ExtendedProperties.Add("Generator_ChangedEventName", "PersonIDChanged");
                this.columnPersonID.ExtendedProperties.Add("Generator_ChangingEventName", "PersonIDChanging");
                this.columnPersonID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PersonID");
                this.columnPersonID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PersonIDColumn");
                this.columnPersonID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPersonID");
                this.columnPersonID.ExtendedProperties.Add("Generator_DelegateName", "PersonIDChangeEventHandler");
                this.columnPersonID.ExtendedProperties.Add("Generator_EventArgName", "PersonIDChangeEventArg");
                base.Columns.Add(this.columnPersonID);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.columnLastName.ExtendedProperties.Add("Generator_ChangedEventName", "LastNameChanged");
                this.columnLastName.ExtendedProperties.Add("Generator_ChangingEventName", "LastNameChanging");
                this.columnLastName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "LastName");
                this.columnLastName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "LastNameColumn");
                this.columnLastName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLastName");
                this.columnLastName.ExtendedProperties.Add("Generator_DelegateName", "LastNameChangeEventHandler");
                this.columnLastName.ExtendedProperties.Add("Generator_EventArgName", "LastNameChangeEventArg");
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.columnFirstName.ExtendedProperties.Add("Generator_ChangedEventName", "FirstNameChanged");
                this.columnFirstName.ExtendedProperties.Add("Generator_ChangingEventName", "FirstNameChanging");
                this.columnFirstName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "FirstName");
                this.columnFirstName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FirstNameColumn");
                this.columnFirstName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFirstName");
                this.columnFirstName.ExtendedProperties.Add("Generator_DelegateName", "FirstNameChangeEventHandler");
                this.columnFirstName.ExtendedProperties.Add("Generator_EventArgName", "FirstNameChangeEventArg");
                base.Columns.Add(this.columnFirstName);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                this.columnFullName.ExtendedProperties.Add("Generator_ChangedEventName", "FullNameChanged");
                this.columnFullName.ExtendedProperties.Add("Generator_ChangingEventName", "FullNameChanging");
                this.columnFullName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "FullName");
                this.columnFullName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FullNameColumn");
                this.columnFullName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFullName");
                this.columnFullName.ExtendedProperties.Add("Generator_DelegateName", "FullNameChangeEventHandler");
                this.columnFullName.ExtendedProperties.Add("Generator_EventArgName", "FullNameChangeEventArg");
                base.Columns.Add(this.columnFullName);
                this.columnEmail = new System.Data.DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.columnEmail.ExtendedProperties.Add("Generator_ChangedEventName", "EmailChanged");
                this.columnEmail.ExtendedProperties.Add("Generator_ChangingEventName", "EmailChanging");
                this.columnEmail.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Email");
                this.columnEmail.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EmailColumn");
                this.columnEmail.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEmail");
                this.columnEmail.ExtendedProperties.Add("Generator_DelegateName", "EmailChangeEventHandler");
                this.columnEmail.ExtendedProperties.Add("Generator_EventArgName", "EmailChangeEventArg");
                base.Columns.Add(this.columnEmail);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                this.columnPassword.ExtendedProperties.Add("Generator_ChangedEventName", "PasswordChanged");
                this.columnPassword.ExtendedProperties.Add("Generator_ChangingEventName", "PasswordChanging");
                this.columnPassword.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Password");
                this.columnPassword.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PasswordColumn");
                this.columnPassword.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPassword");
                this.columnPassword.ExtendedProperties.Add("Generator_DelegateName", "PasswordChangeEventHandler");
                this.columnPassword.ExtendedProperties.Add("Generator_EventArgName", "PasswordChangeEventArg");
                base.Columns.Add(this.columnPassword);
                this.columnResetPWGuid = new System.Data.DataColumn("ResetPWGuid", typeof(byte[]), null, System.Data.MappingType.Element);
                this.columnResetPWGuid.ExtendedProperties.Add("Generator_ChangedEventName", "ResetPWGuidChanged");
                this.columnResetPWGuid.ExtendedProperties.Add("Generator_ChangingEventName", "ResetPWGuidChanging");
                this.columnResetPWGuid.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ResetPWGuid");
                this.columnResetPWGuid.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ResetPWGuidColumn");
                this.columnResetPWGuid.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnResetPWGuid");
                this.columnResetPWGuid.ExtendedProperties.Add("Generator_DelegateName", "ResetPWGuidChangeEventHandler");
                this.columnResetPWGuid.ExtendedProperties.Add("Generator_EventArgName", "ResetPWGuidChangeEventArg");
                base.Columns.Add(this.columnResetPWGuid);
                this.columnResetPWExpire = new System.Data.DataColumn("ResetPWExpire", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnResetPWExpire.ExtendedProperties.Add("Generator_ChangedEventName", "ResetPWExpireChanged");
                this.columnResetPWExpire.ExtendedProperties.Add("Generator_ChangingEventName", "ResetPWExpireChanging");
                this.columnResetPWExpire.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ResetPWExpire");
                this.columnResetPWExpire.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ResetPWExpireColumn");
                this.columnResetPWExpire.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnResetPWExpire");
                this.columnResetPWExpire.ExtendedProperties.Add("Generator_DelegateName", "ResetPWExpireChangeEventHandler");
                this.columnResetPWExpire.ExtendedProperties.Add("Generator_EventArgName", "ResetPWExpireChangeEventArg");
                base.Columns.Add(this.columnResetPWExpire);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSetPersonKey1", new System.Data.DataColumn[] {
                                this.columnPersonID}, true));
                this.columnPersonID.AutoIncrement = true;
                this.columnPersonID.AutoIncrementStep = -1;
                this.columnPersonID.AllowDBNull = false;
                this.columnPersonID.ReadOnly = true;
                this.columnPersonID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "PersonRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "PersonRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "PersonRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "PersonDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Person");
                this.ExtendedProperties.Add("Generator_TableVarName", "tablePerson");
            }
            
            public PersonRow NewPersonRow() {
                return ((PersonRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PersonRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PersonRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PersonRowChanged != null)) {
                    this.PersonRowChanged(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PersonRowChanging != null)) {
                    this.PersonRowChanging(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PersonRowDeleted != null)) {
                    this.PersonRowDeleted(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PersonRowDeleting != null)) {
                    this.PersonRowDeleting(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePersonRow(PersonRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetPerson ds = new DataSetPerson();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PersonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void PersonIDChangeEventHandler(PersonDataTable sender, PersonIDChangeEventArg e);
            
            public class PersonIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PersonIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonRow Row {
                    get {
                        return ((PersonRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PersonIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void LastNameChangeEventHandler(PersonDataTable sender, LastNameChangeEventArg e);
            
            public class LastNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public LastNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonRow Row {
                    get {
                        return ((PersonRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn LastNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void FirstNameChangeEventHandler(PersonDataTable sender, FirstNameChangeEventArg e);
            
            public class FirstNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public FirstNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonRow Row {
                    get {
                        return ((PersonRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn FirstNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void FullNameChangeEventHandler(PersonDataTable sender, FullNameChangeEventArg e);
            
            public class FullNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public FullNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonRow Row {
                    get {
                        return ((PersonRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn FullNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void EmailChangeEventHandler(PersonDataTable sender, EmailChangeEventArg e);
            
            public class EmailChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public EmailChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonRow Row {
                    get {
                        return ((PersonRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn EmailColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PasswordChangeEventHandler(PersonDataTable sender, PasswordChangeEventArg e);
            
            public class PasswordChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PasswordChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonRow Row {
                    get {
                        return ((PersonRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PasswordColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ResetPWGuidChangeEventHandler(PersonDataTable sender, ResetPWGuidChangeEventArg e);
            
            public class ResetPWGuidChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ResetPWGuidChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonRow Row {
                    get {
                        return ((PersonRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ResetPWGuidColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public byte[] ProposedValue {
                    get {
                        return ((byte[])(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((byte[])(value));
                    }
                }
            }
            
            public delegate void ResetPWExpireChangeEventHandler(PersonDataTable sender, ResetPWExpireChangeEventArg e);
            
            public class ResetPWExpireChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ResetPWExpireChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonRow Row {
                    get {
                        return ((PersonRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ResetPWExpireColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PersonGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPersonGroupID;
            
            private System.Data.DataColumn columnPersonID;
            
            private System.Data.DataColumn columnGroupID;
            
            private bool m_suspendValidation = false;
            
            public PersonGroupDataTable() {
                this.TableName = "PersonGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal PersonGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected PersonGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn PersonGroupIDColumn {
                get {
                    return this.columnPersonGroupID;
                }
            }
            
            internal System.Data.DataColumn PersonIDColumn {
                get {
                    return this.columnPersonID;
                }
            }
            
            internal System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public PersonGroupRow this[int index] {
                get {
                    return ((PersonGroupRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event PersonGroupIDChangeEventHandler PersonGroupIDChanging;
            
            public event PersonGroupIDChangeEventHandler PersonGroupIDChanged;
            
            public event PersonIDChangeEventHandler PersonIDChanging;
            
            public event PersonIDChangeEventHandler PersonIDChanged;
            
            public event GroupIDChangeEventHandler GroupIDChanging;
            
            public event GroupIDChangeEventHandler GroupIDChanged;
            
            public event PersonGroupRowChangeEventHandler PersonGroupRowChanged;
            
            public event PersonGroupRowChangeEventHandler PersonGroupRowChanging;
            
            public event PersonGroupRowChangeEventHandler PersonGroupRowDeleted;
            
            public event PersonGroupRowChangeEventHandler PersonGroupRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "PersonGroupID")) {
                    if ((this.PersonGroupIDChanging != null)) {
                        this.PersonGroupIDChanging(this, new PersonGroupIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "PersonID")) {
                        if ((this.PersonIDChanging != null)) {
                            this.PersonIDChanging(this, new PersonIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "GroupID")) {
                            if ((this.GroupIDChanging != null)) {
                                this.GroupIDChanging(this, new GroupIDChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "PersonGroupID")) {
                    if ((this.PersonGroupIDChanged != null)) {
                        this.PersonGroupIDChanged(this, new PersonGroupIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "PersonID")) {
                        if ((this.PersonIDChanged != null)) {
                            this.PersonIDChanged(this, new PersonIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "GroupID")) {
                            if ((this.GroupIDChanged != null)) {
                                this.GroupIDChanged(this, new GroupIDChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddPersonGroupRow(PersonGroupRow row) {
                this.Rows.Add(row);
            }
            
            public PersonGroupRow AddPersonGroupRow(PersonRow parentPersonRowByPersonPersonGroup, int GroupID) {
                PersonGroupRow rowPersonGroupRow = ((PersonGroupRow)(this.NewRow()));
                rowPersonGroupRow.ItemArray = new object[] {
                        null,
                        parentPersonRowByPersonPersonGroup[0],
                        GroupID};
                this.Rows.Add(rowPersonGroupRow);
                return rowPersonGroupRow;
            }
            
            public PersonGroupRow FindByPersonIDGroupID(int PersonID, int GroupID) {
                return ((PersonGroupRow)(this.Rows.Find(new object[] {
                            PersonID,
                            GroupID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                PersonGroupDataTable cln = ((PersonGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new PersonGroupDataTable();
            }
            
            internal void InitVars() {
                this.columnPersonGroupID = base.Columns["PersonGroupID"];
                this.columnPersonID = base.Columns["PersonID"];
                this.columnGroupID = base.Columns["GroupID"];
            }
            
            private void InitClass() {
                this.columnPersonGroupID = new System.Data.DataColumn("PersonGroupID", typeof(int), null, System.Data.MappingType.Element);
                this.columnPersonGroupID.ExtendedProperties.Add("Generator_ChangedEventName", "PersonGroupIDChanged");
                this.columnPersonGroupID.ExtendedProperties.Add("Generator_ChangingEventName", "PersonGroupIDChanging");
                this.columnPersonGroupID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PersonGroupID");
                this.columnPersonGroupID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PersonGroupIDColumn");
                this.columnPersonGroupID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPersonGroupID");
                this.columnPersonGroupID.ExtendedProperties.Add("Generator_DelegateName", "PersonGroupIDChangeEventHandler");
                this.columnPersonGroupID.ExtendedProperties.Add("Generator_EventArgName", "PersonGroupIDChangeEventArg");
                base.Columns.Add(this.columnPersonGroupID);
                this.columnPersonID = new System.Data.DataColumn("PersonID", typeof(int), null, System.Data.MappingType.Element);
                this.columnPersonID.ExtendedProperties.Add("Generator_ChangedEventName", "PersonIDChanged");
                this.columnPersonID.ExtendedProperties.Add("Generator_ChangingEventName", "PersonIDChanging");
                this.columnPersonID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PersonID");
                this.columnPersonID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PersonIDColumn");
                this.columnPersonID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPersonID");
                this.columnPersonID.ExtendedProperties.Add("Generator_DelegateName", "PersonIDChangeEventHandler");
                this.columnPersonID.ExtendedProperties.Add("Generator_EventArgName", "PersonIDChangeEventArg");
                base.Columns.Add(this.columnPersonID);
                this.columnGroupID = new System.Data.DataColumn("GroupID", typeof(int), null, System.Data.MappingType.Element);
                this.columnGroupID.ExtendedProperties.Add("Generator_ChangedEventName", "GroupIDChanged");
                this.columnGroupID.ExtendedProperties.Add("Generator_ChangingEventName", "GroupIDChanging");
                this.columnGroupID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "GroupID");
                this.columnGroupID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "GroupIDColumn");
                this.columnGroupID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnGroupID");
                this.columnGroupID.ExtendedProperties.Add("Generator_DelegateName", "GroupIDChangeEventHandler");
                this.columnGroupID.ExtendedProperties.Add("Generator_EventArgName", "GroupIDChangeEventArg");
                base.Columns.Add(this.columnGroupID);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSetPersonKey2", new System.Data.DataColumn[] {
                                this.columnPersonID,
                                this.columnGroupID}, true));
                this.columnPersonGroupID.AutoIncrement = true;
                this.columnPersonGroupID.AutoIncrementStep = -1;
                this.columnPersonGroupID.AllowDBNull = false;
                this.columnPersonGroupID.ReadOnly = true;
                this.columnPersonID.AllowDBNull = false;
                this.columnGroupID.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "PersonGroupRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "PersonGroupRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "PersonGroupRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "PersonGroupDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "PersonGroup");
                this.ExtendedProperties.Add("Generator_TableVarName", "tablePersonGroup");
            }
            
            public PersonGroupRow NewPersonGroupRow() {
                return ((PersonGroupRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PersonGroupRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PersonGroupRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PersonGroupRowChanged != null)) {
                    this.PersonGroupRowChanged(this, new PersonGroupRowChangeEvent(((PersonGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PersonGroupRowChanging != null)) {
                    this.PersonGroupRowChanging(this, new PersonGroupRowChangeEvent(((PersonGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PersonGroupRowDeleted != null)) {
                    this.PersonGroupRowDeleted(this, new PersonGroupRowChangeEvent(((PersonGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PersonGroupRowDeleting != null)) {
                    this.PersonGroupRowDeleting(this, new PersonGroupRowChangeEvent(((PersonGroupRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePersonGroupRow(PersonGroupRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetPerson ds = new DataSetPerson();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PersonGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void PersonGroupIDChangeEventHandler(PersonGroupDataTable sender, PersonGroupIDChangeEventArg e);
            
            public class PersonGroupIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PersonGroupIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonGroupRow Row {
                    get {
                        return ((PersonGroupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PersonGroupIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void PersonIDChangeEventHandler(PersonGroupDataTable sender, PersonIDChangeEventArg e);
            
            public class PersonIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PersonIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonGroupRow Row {
                    get {
                        return ((PersonGroupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PersonIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void GroupIDChangeEventHandler(PersonGroupDataTable sender, GroupIDChangeEventArg e);
            
            public class GroupIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public GroupIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PersonGroupRow Row {
                    get {
                        return ((PersonGroupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn GroupIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
        }
        
        public class PersonRow : System.Data.DataRow {
            
            private PersonDataTable tablePerson;
            
            internal PersonRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerson = ((PersonDataTable)(this.Table));
            }
            
            public int PersonID {
                get {
                    return ((int)(this[this.tablePerson.PersonIDColumn]));
                }
                set {
                    this[this.tablePerson.PersonIDColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.LastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePerson.LastNameColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.FirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePerson.FirstNameColumn] = value;
                }
            }
            
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePerson.FullNameColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tablePerson.EmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePerson.EmailColumn] = value;
                }
            }
            
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tablePerson.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePerson.PasswordColumn] = value;
                }
            }
            
            public byte[] ResetPWGuid {
                get {
                    try {
                        return ((byte[])(this[this.tablePerson.ResetPWGuidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePerson.ResetPWGuidColumn] = value;
                }
            }
            
            public System.DateTime ResetPWExpire {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePerson.ResetPWExpireColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePerson.ResetPWExpireColumn] = value;
                }
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tablePerson.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tablePerson.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tablePerson.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tablePerson.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullNameNull() {
                return this.IsNull(this.tablePerson.FullNameColumn);
            }
            
            public void SetFullNameNull() {
                this[this.tablePerson.FullNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tablePerson.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tablePerson.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsPasswordNull() {
                return this.IsNull(this.tablePerson.PasswordColumn);
            }
            
            public void SetPasswordNull() {
                this[this.tablePerson.PasswordColumn] = System.Convert.DBNull;
            }
            
            public bool IsResetPWGuidNull() {
                return this.IsNull(this.tablePerson.ResetPWGuidColumn);
            }
            
            public void SetResetPWGuidNull() {
                this[this.tablePerson.ResetPWGuidColumn] = System.Convert.DBNull;
            }
            
            public bool IsResetPWExpireNull() {
                return this.IsNull(this.tablePerson.ResetPWExpireColumn);
            }
            
            public void SetResetPWExpireNull() {
                this[this.tablePerson.ResetPWExpireColumn] = System.Convert.DBNull;
            }
            
            public PersonGroupRow[] GetPersonGroupRows() {
                return ((PersonGroupRow[])(this.GetChildRows(this.Table.ChildRelations["PersonPersonGroup"])));
            }
        }
        
        public class PersonGroupRow : System.Data.DataRow {
            
            private PersonGroupDataTable tablePersonGroup;
            
            internal PersonGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePersonGroup = ((PersonGroupDataTable)(this.Table));
            }
            
            public int PersonGroupID {
                get {
                    return ((int)(this[this.tablePersonGroup.PersonGroupIDColumn]));
                }
                set {
                    this[this.tablePersonGroup.PersonGroupIDColumn] = value;
                }
            }
            
            public int PersonID {
                get {
                    return ((int)(this[this.tablePersonGroup.PersonIDColumn]));
                }
                set {
                    this[this.tablePersonGroup.PersonIDColumn] = value;
                }
            }
            
            public int GroupID {
                get {
                    return ((int)(this[this.tablePersonGroup.GroupIDColumn]));
                }
                set {
                    this[this.tablePersonGroup.GroupIDColumn] = value;
                }
            }
            
            public PersonRow PersonRow {
                get {
                    return ((PersonRow)(this.GetParentRow(this.Table.ParentRelations["PersonPersonGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PersonPersonGroup"]);
                }
            }
        }
        
        public class PersonRowChangeEvent : System.EventArgs {
            
            private PersonRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public PersonRowChangeEvent(PersonRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PersonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class PersonGroupRowChangeEvent : System.EventArgs {
            
            private PersonGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public PersonGroupRowChangeEvent(PersonGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PersonGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
