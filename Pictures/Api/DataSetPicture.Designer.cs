//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace msn2.net.Pictures {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetPicture")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetPicture : global::System.Data.DataSet {
        
        private PictureDataTable tablePicture;
        
        private PictureCacheDataTable tablePictureCache;
        
        private PictureCategoryDataTable tablePictureCategory;
        
        private PictureGroupDataTable tablePictureGroup;
        
        private PicturePersonDataTable tablePicturePerson;
        
        private global::System.Data.DataRelation relationPicturePictureCache;
        
        private global::System.Data.DataRelation relationPicturePictureCategory;
        
        private global::System.Data.DataRelation relationPicturePictureGroup;
        
        private global::System.Data.DataRelation relationPicturePicturePerson;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetPicture() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetPicture(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Picture"] != null)) {
                    base.Tables.Add(new PictureDataTable(ds.Tables["Picture"]));
                }
                if ((ds.Tables["PictureCache"] != null)) {
                    base.Tables.Add(new PictureCacheDataTable(ds.Tables["PictureCache"]));
                }
                if ((ds.Tables["PictureCategory"] != null)) {
                    base.Tables.Add(new PictureCategoryDataTable(ds.Tables["PictureCategory"]));
                }
                if ((ds.Tables["PictureGroup"] != null)) {
                    base.Tables.Add(new PictureGroupDataTable(ds.Tables["PictureGroup"]));
                }
                if ((ds.Tables["PicturePerson"] != null)) {
                    base.Tables.Add(new PicturePersonDataTable(ds.Tables["PicturePerson"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PictureDataTable Picture {
            get {
                return this.tablePicture;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PictureCacheDataTable PictureCache {
            get {
                return this.tablePictureCache;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PictureCategoryDataTable PictureCategory {
            get {
                return this.tablePictureCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PictureGroupDataTable PictureGroup {
            get {
                return this.tablePictureGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PicturePersonDataTable PicturePerson {
            get {
                return this.tablePicturePerson;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSetPicture cln = ((DataSetPicture)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Picture"] != null)) {
                    base.Tables.Add(new PictureDataTable(ds.Tables["Picture"]));
                }
                if ((ds.Tables["PictureCache"] != null)) {
                    base.Tables.Add(new PictureCacheDataTable(ds.Tables["PictureCache"]));
                }
                if ((ds.Tables["PictureCategory"] != null)) {
                    base.Tables.Add(new PictureCategoryDataTable(ds.Tables["PictureCategory"]));
                }
                if ((ds.Tables["PictureGroup"] != null)) {
                    base.Tables.Add(new PictureGroupDataTable(ds.Tables["PictureGroup"]));
                }
                if ((ds.Tables["PicturePerson"] != null)) {
                    base.Tables.Add(new PicturePersonDataTable(ds.Tables["PicturePerson"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePicture = ((PictureDataTable)(base.Tables["Picture"]));
            if ((initTable == true)) {
                if ((this.tablePicture != null)) {
                    this.tablePicture.InitVars();
                }
            }
            this.tablePictureCache = ((PictureCacheDataTable)(base.Tables["PictureCache"]));
            if ((initTable == true)) {
                if ((this.tablePictureCache != null)) {
                    this.tablePictureCache.InitVars();
                }
            }
            this.tablePictureCategory = ((PictureCategoryDataTable)(base.Tables["PictureCategory"]));
            if ((initTable == true)) {
                if ((this.tablePictureCategory != null)) {
                    this.tablePictureCategory.InitVars();
                }
            }
            this.tablePictureGroup = ((PictureGroupDataTable)(base.Tables["PictureGroup"]));
            if ((initTable == true)) {
                if ((this.tablePictureGroup != null)) {
                    this.tablePictureGroup.InitVars();
                }
            }
            this.tablePicturePerson = ((PicturePersonDataTable)(base.Tables["PicturePerson"]));
            if ((initTable == true)) {
                if ((this.tablePicturePerson != null)) {
                    this.tablePicturePerson.InitVars();
                }
            }
            this.relationPicturePictureCache = this.Relations["PicturePictureCache"];
            this.relationPicturePictureCategory = this.Relations["PicturePictureCategory"];
            this.relationPicturePictureGroup = this.Relations["PicturePictureGroup"];
            this.relationPicturePicturePerson = this.Relations["PicturePicturePerson"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetPicture";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetPicture.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePicture = new PictureDataTable();
            base.Tables.Add(this.tablePicture);
            this.tablePictureCache = new PictureCacheDataTable();
            base.Tables.Add(this.tablePictureCache);
            this.tablePictureCategory = new PictureCategoryDataTable();
            base.Tables.Add(this.tablePictureCategory);
            this.tablePictureGroup = new PictureGroupDataTable();
            base.Tables.Add(this.tablePictureGroup);
            this.tablePicturePerson = new PicturePersonDataTable();
            base.Tables.Add(this.tablePicturePerson);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("PicturePictureCache", new global::System.Data.DataColumn[] {
                        this.tablePicture.PictureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePictureCache.PictureIDColumn});
            this.tablePictureCache.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("PicturePictureCategory", new global::System.Data.DataColumn[] {
                        this.tablePicture.PictureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePictureCategory.PictureIDColumn});
            this.tablePictureCategory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("PicturePictureGroup", new global::System.Data.DataColumn[] {
                        this.tablePicture.PictureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePictureGroup.PictureIDColumn});
            this.tablePictureGroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("PicturePicturePerson", new global::System.Data.DataColumn[] {
                        this.tablePicture.PictureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePicturePerson.PictureIDColumn});
            this.tablePicturePerson.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationPicturePictureCache = new global::System.Data.DataRelation("PicturePictureCache", new global::System.Data.DataColumn[] {
                        this.tablePicture.PictureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePictureCache.PictureIDColumn}, false);
            this.Relations.Add(this.relationPicturePictureCache);
            this.relationPicturePictureCategory = new global::System.Data.DataRelation("PicturePictureCategory", new global::System.Data.DataColumn[] {
                        this.tablePicture.PictureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePictureCategory.PictureIDColumn}, false);
            this.Relations.Add(this.relationPicturePictureCategory);
            this.relationPicturePictureGroup = new global::System.Data.DataRelation("PicturePictureGroup", new global::System.Data.DataColumn[] {
                        this.tablePicture.PictureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePictureGroup.PictureIDColumn}, false);
            this.Relations.Add(this.relationPicturePictureGroup);
            this.relationPicturePicturePerson = new global::System.Data.DataRelation("PicturePicturePerson", new global::System.Data.DataColumn[] {
                        this.tablePicture.PictureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePicturePerson.PictureIDColumn}, false);
            this.Relations.Add(this.relationPicturePicturePerson);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePicture() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePictureCache() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePictureCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePictureGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePicturePerson() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetPicture ds = new DataSetPicture();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void PictureRowChangeEventHandler(object sender, PictureRowChangeEvent e);
        
        public delegate void PictureCacheRowChangeEventHandler(object sender, PictureCacheRowChangeEvent e);
        
        public delegate void PictureCategoryRowChangeEventHandler(object sender, PictureCategoryRowChangeEvent e);
        
        public delegate void PictureGroupRowChangeEventHandler(object sender, PictureGroupRowChangeEvent e);
        
        public delegate void PicturePersonRowChangeEventHandler(object sender, PicturePersonRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PictureDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPictureID;
            
            private global::System.Data.DataColumn columnFilename;
            
            private global::System.Data.DataColumn columnPictureDate;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnPublish;
            
            private global::System.Data.DataColumn columnRating;
            
            private global::System.Data.DataColumn columnPictureBy;
            
            private global::System.Data.DataColumn columnPictureSort;
            
            private global::System.Data.DataColumn columnPictureAddDate;
            
            private global::System.Data.DataColumn columnPictureUpdateDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureDataTable() {
                this.TableName = "Picture";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PictureDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureIDColumn {
                get {
                    return this.columnPictureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureDateColumn {
                get {
                    return this.columnPictureDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PublishColumn {
                get {
                    return this.columnPublish;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureByColumn {
                get {
                    return this.columnPictureBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureSortColumn {
                get {
                    return this.columnPictureSort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureAddDateColumn {
                get {
                    return this.columnPictureAddDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureUpdateDateColumn {
                get {
                    return this.columnPictureUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow this[int index] {
                get {
                    return ((PictureRow)(this.Rows[index]));
                }
            }
            
            public event PictureRowChangeEventHandler PictureRowChanging;
            
            public event PictureRowChangeEventHandler PictureRowChanged;
            
            public event PictureRowChangeEventHandler PictureRowDeleting;
            
            public event PictureRowChangeEventHandler PictureRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPictureRow(PictureRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow AddPictureRow(string Filename, System.DateTime PictureDate, string Title, string Description, bool Publish, byte Rating, int PictureBy, int PictureSort, System.DateTime PictureAddDate, System.DateTime PictureUpdateDate) {
                PictureRow rowPictureRow = ((PictureRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Filename,
                        PictureDate,
                        Title,
                        Description,
                        Publish,
                        Rating,
                        PictureBy,
                        PictureSort,
                        PictureAddDate,
                        PictureUpdateDate};
                rowPictureRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPictureRow);
                return rowPictureRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow FindByPictureID(int PictureID) {
                return ((PictureRow)(this.Rows.Find(new object[] {
                            PictureID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PictureDataTable cln = ((PictureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PictureDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPictureID = base.Columns["PictureID"];
                this.columnFilename = base.Columns["Filename"];
                this.columnPictureDate = base.Columns["PictureDate"];
                this.columnTitle = base.Columns["Title"];
                this.columnDescription = base.Columns["Description"];
                this.columnPublish = base.Columns["Publish"];
                this.columnRating = base.Columns["Rating"];
                this.columnPictureBy = base.Columns["PictureBy"];
                this.columnPictureSort = base.Columns["PictureSort"];
                this.columnPictureAddDate = base.Columns["PictureAddDate"];
                this.columnPictureUpdateDate = base.Columns["PictureUpdateDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPictureID = new global::System.Data.DataColumn("PictureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureID);
                this.columnFilename = new global::System.Data.DataColumn("Filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilename);
                this.columnPictureDate = new global::System.Data.DataColumn("PictureDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureDate);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnPublish = new global::System.Data.DataColumn("Publish", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPublish);
                this.columnRating = new global::System.Data.DataColumn("Rating", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRating);
                this.columnPictureBy = new global::System.Data.DataColumn("PictureBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureBy);
                this.columnPictureSort = new global::System.Data.DataColumn("PictureSort", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureSort);
                this.columnPictureAddDate = new global::System.Data.DataColumn("PictureAddDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureAddDate);
                this.columnPictureUpdateDate = new global::System.Data.DataColumn("PictureUpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureUpdateDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DataSetPictureKey1", new global::System.Data.DataColumn[] {
                                this.columnPictureID}, true));
                this.columnPictureID.AutoIncrement = true;
                this.columnPictureID.AutoIncrementStep = -1;
                this.columnPictureID.AllowDBNull = false;
                this.columnPictureID.ReadOnly = true;
                this.columnPictureID.Unique = true;
                this.columnPictureSort.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow NewPictureRow() {
                return ((PictureRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PictureRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PictureRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PictureRowChanged != null)) {
                    this.PictureRowChanged(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PictureRowChanging != null)) {
                    this.PictureRowChanging(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PictureRowDeleted != null)) {
                    this.PictureRowDeleted(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PictureRowDeleting != null)) {
                    this.PictureRowDeleting(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePictureRow(PictureRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetPicture ds = new DataSetPicture();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PictureDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PictureCacheDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPictureCacheID;
            
            private global::System.Data.DataColumn columnPictureID;
            
            private global::System.Data.DataColumn columnFilename;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnMaxHeight;
            
            private global::System.Data.DataColumn columnMaxWidth;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCacheDataTable() {
                this.TableName = "PictureCache";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureCacheDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PictureCacheDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureCacheIDColumn {
                get {
                    return this.columnPictureCacheID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureIDColumn {
                get {
                    return this.columnPictureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxHeightColumn {
                get {
                    return this.columnMaxHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxWidthColumn {
                get {
                    return this.columnMaxWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCacheRow this[int index] {
                get {
                    return ((PictureCacheRow)(this.Rows[index]));
                }
            }
            
            public event PictureCacheRowChangeEventHandler PictureCacheRowChanging;
            
            public event PictureCacheRowChangeEventHandler PictureCacheRowChanged;
            
            public event PictureCacheRowChangeEventHandler PictureCacheRowDeleting;
            
            public event PictureCacheRowChangeEventHandler PictureCacheRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPictureCacheRow(PictureCacheRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCacheRow AddPictureCacheRow(PictureRow parentPictureRowByPicturePictureCache, string Filename, int Height, int Width, int MaxHeight, int MaxWidth) {
                PictureCacheRow rowPictureCacheRow = ((PictureCacheRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Filename,
                        Height,
                        Width,
                        MaxHeight,
                        MaxWidth};
                if ((parentPictureRowByPicturePictureCache != null)) {
                    columnValuesArray[1] = parentPictureRowByPicturePictureCache[0];
                }
                rowPictureCacheRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPictureCacheRow);
                return rowPictureCacheRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCacheRow FindByPictureCacheID(int PictureCacheID) {
                return ((PictureCacheRow)(this.Rows.Find(new object[] {
                            PictureCacheID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PictureCacheDataTable cln = ((PictureCacheDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PictureCacheDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPictureCacheID = base.Columns["PictureCacheID"];
                this.columnPictureID = base.Columns["PictureID"];
                this.columnFilename = base.Columns["Filename"];
                this.columnHeight = base.Columns["Height"];
                this.columnWidth = base.Columns["Width"];
                this.columnMaxHeight = base.Columns["MaxHeight"];
                this.columnMaxWidth = base.Columns["MaxWidth"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPictureCacheID = new global::System.Data.DataColumn("PictureCacheID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureCacheID);
                this.columnPictureID = new global::System.Data.DataColumn("PictureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureID);
                this.columnFilename = new global::System.Data.DataColumn("Filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilename);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnMaxHeight = new global::System.Data.DataColumn("MaxHeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxHeight);
                this.columnMaxWidth = new global::System.Data.DataColumn("MaxWidth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxWidth);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DataSetPictureKey2", new global::System.Data.DataColumn[] {
                                this.columnPictureCacheID}, true));
                this.columnPictureCacheID.AutoIncrement = true;
                this.columnPictureCacheID.AutoIncrementStep = -1;
                this.columnPictureCacheID.AllowDBNull = false;
                this.columnPictureCacheID.ReadOnly = true;
                this.columnPictureCacheID.Unique = true;
                this.columnPictureID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCacheRow NewPictureCacheRow() {
                return ((PictureCacheRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PictureCacheRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PictureCacheRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PictureCacheRowChanged != null)) {
                    this.PictureCacheRowChanged(this, new PictureCacheRowChangeEvent(((PictureCacheRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PictureCacheRowChanging != null)) {
                    this.PictureCacheRowChanging(this, new PictureCacheRowChangeEvent(((PictureCacheRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PictureCacheRowDeleted != null)) {
                    this.PictureCacheRowDeleted(this, new PictureCacheRowChangeEvent(((PictureCacheRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PictureCacheRowDeleting != null)) {
                    this.PictureCacheRowDeleting(this, new PictureCacheRowChangeEvent(((PictureCacheRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePictureCacheRow(PictureCacheRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetPicture ds = new DataSetPicture();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PictureCacheDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PictureCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPictureID;
            
            private global::System.Data.DataColumn columnCategoryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCategoryDataTable() {
                this.TableName = "PictureCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PictureCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureIDColumn {
                get {
                    return this.columnPictureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCategoryRow this[int index] {
                get {
                    return ((PictureCategoryRow)(this.Rows[index]));
                }
            }
            
            public event PictureCategoryRowChangeEventHandler PictureCategoryRowChanging;
            
            public event PictureCategoryRowChangeEventHandler PictureCategoryRowChanged;
            
            public event PictureCategoryRowChangeEventHandler PictureCategoryRowDeleting;
            
            public event PictureCategoryRowChangeEventHandler PictureCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPictureCategoryRow(PictureCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCategoryRow AddPictureCategoryRow(PictureRow parentPictureRowByPicturePictureCategory, int CategoryID) {
                PictureCategoryRow rowPictureCategoryRow = ((PictureCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CategoryID};
                if ((parentPictureRowByPicturePictureCategory != null)) {
                    columnValuesArray[0] = parentPictureRowByPicturePictureCategory[0];
                }
                rowPictureCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPictureCategoryRow);
                return rowPictureCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCategoryRow FindByPictureIDCategoryID(int PictureID, int CategoryID) {
                return ((PictureCategoryRow)(this.Rows.Find(new object[] {
                            PictureID,
                            CategoryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PictureCategoryDataTable cln = ((PictureCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PictureCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPictureID = base.Columns["PictureID"];
                this.columnCategoryID = base.Columns["CategoryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPictureID = new global::System.Data.DataColumn("PictureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureID);
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DataSetPictureKey3", new global::System.Data.DataColumn[] {
                                this.columnPictureID,
                                this.columnCategoryID}, true));
                this.columnPictureID.AllowDBNull = false;
                this.columnCategoryID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCategoryRow NewPictureCategoryRow() {
                return ((PictureCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PictureCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PictureCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PictureCategoryRowChanged != null)) {
                    this.PictureCategoryRowChanged(this, new PictureCategoryRowChangeEvent(((PictureCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PictureCategoryRowChanging != null)) {
                    this.PictureCategoryRowChanging(this, new PictureCategoryRowChangeEvent(((PictureCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PictureCategoryRowDeleted != null)) {
                    this.PictureCategoryRowDeleted(this, new PictureCategoryRowChangeEvent(((PictureCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PictureCategoryRowDeleting != null)) {
                    this.PictureCategoryRowDeleting(this, new PictureCategoryRowChangeEvent(((PictureCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePictureCategoryRow(PictureCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetPicture ds = new DataSetPicture();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PictureCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PictureGroupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPictureGroupID;
            
            private global::System.Data.DataColumn columnPictureID;
            
            private global::System.Data.DataColumn columnGroupID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureGroupDataTable() {
                this.TableName = "PictureGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PictureGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureGroupIDColumn {
                get {
                    return this.columnPictureGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureIDColumn {
                get {
                    return this.columnPictureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureGroupRow this[int index] {
                get {
                    return ((PictureGroupRow)(this.Rows[index]));
                }
            }
            
            public event PictureGroupRowChangeEventHandler PictureGroupRowChanging;
            
            public event PictureGroupRowChangeEventHandler PictureGroupRowChanged;
            
            public event PictureGroupRowChangeEventHandler PictureGroupRowDeleting;
            
            public event PictureGroupRowChangeEventHandler PictureGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPictureGroupRow(PictureGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureGroupRow AddPictureGroupRow(PictureRow parentPictureRowByPicturePictureGroup, int GroupID) {
                PictureGroupRow rowPictureGroupRow = ((PictureGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        GroupID};
                if ((parentPictureRowByPicturePictureGroup != null)) {
                    columnValuesArray[1] = parentPictureRowByPicturePictureGroup[0];
                }
                rowPictureGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPictureGroupRow);
                return rowPictureGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureGroupRow FindByPictureGroupID(int PictureGroupID) {
                return ((PictureGroupRow)(this.Rows.Find(new object[] {
                            PictureGroupID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PictureGroupDataTable cln = ((PictureGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PictureGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPictureGroupID = base.Columns["PictureGroupID"];
                this.columnPictureID = base.Columns["PictureID"];
                this.columnGroupID = base.Columns["GroupID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPictureGroupID = new global::System.Data.DataColumn("PictureGroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureGroupID);
                this.columnPictureID = new global::System.Data.DataColumn("PictureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureID);
                this.columnGroupID = new global::System.Data.DataColumn("GroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DataSetPictureKey4", new global::System.Data.DataColumn[] {
                                this.columnPictureGroupID}, true));
                this.columnPictureGroupID.AutoIncrement = true;
                this.columnPictureGroupID.AutoIncrementStep = -1;
                this.columnPictureGroupID.AllowDBNull = false;
                this.columnPictureGroupID.ReadOnly = true;
                this.columnPictureGroupID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureGroupRow NewPictureGroupRow() {
                return ((PictureGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PictureGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PictureGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PictureGroupRowChanged != null)) {
                    this.PictureGroupRowChanged(this, new PictureGroupRowChangeEvent(((PictureGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PictureGroupRowChanging != null)) {
                    this.PictureGroupRowChanging(this, new PictureGroupRowChangeEvent(((PictureGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PictureGroupRowDeleted != null)) {
                    this.PictureGroupRowDeleted(this, new PictureGroupRowChangeEvent(((PictureGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PictureGroupRowDeleting != null)) {
                    this.PictureGroupRowDeleting(this, new PictureGroupRowChangeEvent(((PictureGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePictureGroupRow(PictureGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetPicture ds = new DataSetPicture();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PictureGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PicturePersonDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPictureID;
            
            private global::System.Data.DataColumn columnPersonID;
            
            private global::System.Data.DataColumn columnPicturePersonID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PicturePersonDataTable() {
                this.TableName = "PicturePerson";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PicturePersonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PicturePersonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureIDColumn {
                get {
                    return this.columnPictureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonIDColumn {
                get {
                    return this.columnPersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PicturePersonIDColumn {
                get {
                    return this.columnPicturePersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PicturePersonRow this[int index] {
                get {
                    return ((PicturePersonRow)(this.Rows[index]));
                }
            }
            
            public event PicturePersonRowChangeEventHandler PicturePersonRowChanging;
            
            public event PicturePersonRowChangeEventHandler PicturePersonRowChanged;
            
            public event PicturePersonRowChangeEventHandler PicturePersonRowDeleting;
            
            public event PicturePersonRowChangeEventHandler PicturePersonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPicturePersonRow(PicturePersonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PicturePersonRow AddPicturePersonRow(PictureRow parentPictureRowByPicturePicturePerson, int PersonID) {
                PicturePersonRow rowPicturePersonRow = ((PicturePersonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PersonID,
                        null};
                if ((parentPictureRowByPicturePicturePerson != null)) {
                    columnValuesArray[0] = parentPictureRowByPicturePicturePerson[0];
                }
                rowPicturePersonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPicturePersonRow);
                return rowPicturePersonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PicturePersonRow FindByPictureIDPersonID(int PictureID, int PersonID) {
                return ((PicturePersonRow)(this.Rows.Find(new object[] {
                            PictureID,
                            PersonID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PicturePersonDataTable cln = ((PicturePersonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PicturePersonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPictureID = base.Columns["PictureID"];
                this.columnPersonID = base.Columns["PersonID"];
                this.columnPicturePersonID = base.Columns["PicturePersonID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPictureID = new global::System.Data.DataColumn("PictureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureID);
                this.columnPersonID = new global::System.Data.DataColumn("PersonID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonID);
                this.columnPicturePersonID = new global::System.Data.DataColumn("PicturePersonID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPicturePersonID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DataSetPictureKey5", new global::System.Data.DataColumn[] {
                                this.columnPictureID,
                                this.columnPersonID}, true));
                this.columnPictureID.AllowDBNull = false;
                this.columnPersonID.AllowDBNull = false;
                this.columnPicturePersonID.AutoIncrement = true;
                this.columnPicturePersonID.AllowDBNull = false;
                this.columnPicturePersonID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PicturePersonRow NewPicturePersonRow() {
                return ((PicturePersonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PicturePersonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PicturePersonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PicturePersonRowChanged != null)) {
                    this.PicturePersonRowChanged(this, new PicturePersonRowChangeEvent(((PicturePersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PicturePersonRowChanging != null)) {
                    this.PicturePersonRowChanging(this, new PicturePersonRowChangeEvent(((PicturePersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PicturePersonRowDeleted != null)) {
                    this.PicturePersonRowDeleted(this, new PicturePersonRowChangeEvent(((PicturePersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PicturePersonRowDeleting != null)) {
                    this.PicturePersonRowDeleting(this, new PicturePersonRowChangeEvent(((PicturePersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePicturePersonRow(PicturePersonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetPicture ds = new DataSetPicture();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PicturePersonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PictureRow : global::System.Data.DataRow {
            
            private PictureDataTable tablePicture;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePicture = ((PictureDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureID {
                get {
                    return ((int)(this[this.tablePicture.PictureIDColumn]));
                }
                set {
                    this[this.tablePicture.PictureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    try {
                        return ((string)(this[this.tablePicture.FilenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Filename\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.FilenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PictureDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePicture.PictureDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PictureDate\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.PictureDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tablePicture.TitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Title\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablePicture.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Publish {
                get {
                    try {
                        return ((bool)(this[this.tablePicture.PublishColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Publish\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.PublishColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Rating {
                get {
                    try {
                        return ((byte)(this[this.tablePicture.RatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rating\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.RatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureBy {
                get {
                    try {
                        return ((int)(this[this.tablePicture.PictureByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PictureBy\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.PictureByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureSort {
                get {
                    return ((int)(this[this.tablePicture.PictureSortColumn]));
                }
                set {
                    this[this.tablePicture.PictureSortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PictureAddDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePicture.PictureAddDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PictureAddDate\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.PictureAddDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PictureUpdateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePicture.PictureUpdateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PictureUpdateDate\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.PictureUpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilenameNull() {
                return this.IsNull(this.tablePicture.FilenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilenameNull() {
                this[this.tablePicture.FilenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureDateNull() {
                return this.IsNull(this.tablePicture.PictureDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureDateNull() {
                this[this.tablePicture.PictureDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tablePicture.TitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tablePicture.TitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablePicture.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablePicture.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPublishNull() {
                return this.IsNull(this.tablePicture.PublishColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPublishNull() {
                this[this.tablePicture.PublishColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingNull() {
                return this.IsNull(this.tablePicture.RatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingNull() {
                this[this.tablePicture.RatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureByNull() {
                return this.IsNull(this.tablePicture.PictureByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureByNull() {
                this[this.tablePicture.PictureByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureAddDateNull() {
                return this.IsNull(this.tablePicture.PictureAddDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureAddDateNull() {
                this[this.tablePicture.PictureAddDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureUpdateDateNull() {
                return this.IsNull(this.tablePicture.PictureUpdateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureUpdateDateNull() {
                this[this.tablePicture.PictureUpdateDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCacheRow[] GetPictureCacheRows() {
                if ((this.Table.ChildRelations["PicturePictureCache"] == null)) {
                    return new PictureCacheRow[0];
                }
                else {
                    return ((PictureCacheRow[])(base.GetChildRows(this.Table.ChildRelations["PicturePictureCache"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCategoryRow[] GetPictureCategoryRows() {
                if ((this.Table.ChildRelations["PicturePictureCategory"] == null)) {
                    return new PictureCategoryRow[0];
                }
                else {
                    return ((PictureCategoryRow[])(base.GetChildRows(this.Table.ChildRelations["PicturePictureCategory"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureGroupRow[] GetPictureGroupRows() {
                if ((this.Table.ChildRelations["PicturePictureGroup"] == null)) {
                    return new PictureGroupRow[0];
                }
                else {
                    return ((PictureGroupRow[])(base.GetChildRows(this.Table.ChildRelations["PicturePictureGroup"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PicturePersonRow[] GetPicturePersonRows() {
                if ((this.Table.ChildRelations["PicturePicturePerson"] == null)) {
                    return new PicturePersonRow[0];
                }
                else {
                    return ((PicturePersonRow[])(base.GetChildRows(this.Table.ChildRelations["PicturePicturePerson"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PictureCacheRow : global::System.Data.DataRow {
            
            private PictureCacheDataTable tablePictureCache;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureCacheRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePictureCache = ((PictureCacheDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureCacheID {
                get {
                    return ((int)(this[this.tablePictureCache.PictureCacheIDColumn]));
                }
                set {
                    this[this.tablePictureCache.PictureCacheIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureID {
                get {
                    return ((int)(this[this.tablePictureCache.PictureIDColumn]));
                }
                set {
                    this[this.tablePictureCache.PictureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    try {
                        return ((string)(this[this.tablePictureCache.FilenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Filename\' in table \'PictureCache\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePictureCache.FilenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tablePictureCache.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'PictureCache\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePictureCache.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Width {
                get {
                    try {
                        return ((int)(this[this.tablePictureCache.WidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Width\' in table \'PictureCache\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePictureCache.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxHeight {
                get {
                    try {
                        return ((int)(this[this.tablePictureCache.MaxHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxHeight\' in table \'PictureCache\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePictureCache.MaxHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxWidth {
                get {
                    try {
                        return ((int)(this[this.tablePictureCache.MaxWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxWidth\' in table \'PictureCache\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePictureCache.MaxWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow PictureRow {
                get {
                    return ((PictureRow)(this.GetParentRow(this.Table.ParentRelations["PicturePictureCache"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PicturePictureCache"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilenameNull() {
                return this.IsNull(this.tablePictureCache.FilenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilenameNull() {
                this[this.tablePictureCache.FilenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tablePictureCache.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tablePictureCache.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tablePictureCache.WidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tablePictureCache.WidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxHeightNull() {
                return this.IsNull(this.tablePictureCache.MaxHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxHeightNull() {
                this[this.tablePictureCache.MaxHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxWidthNull() {
                return this.IsNull(this.tablePictureCache.MaxWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxWidthNull() {
                this[this.tablePictureCache.MaxWidthColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PictureCategoryRow : global::System.Data.DataRow {
            
            private PictureCategoryDataTable tablePictureCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePictureCategory = ((PictureCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureID {
                get {
                    return ((int)(this[this.tablePictureCategory.PictureIDColumn]));
                }
                set {
                    this[this.tablePictureCategory.PictureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    return ((int)(this[this.tablePictureCategory.CategoryIDColumn]));
                }
                set {
                    this[this.tablePictureCategory.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow PictureRow {
                get {
                    return ((PictureRow)(this.GetParentRow(this.Table.ParentRelations["PicturePictureCategory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PicturePictureCategory"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PictureGroupRow : global::System.Data.DataRow {
            
            private PictureGroupDataTable tablePictureGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePictureGroup = ((PictureGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureGroupID {
                get {
                    return ((int)(this[this.tablePictureGroup.PictureGroupIDColumn]));
                }
                set {
                    this[this.tablePictureGroup.PictureGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureID {
                get {
                    try {
                        return ((int)(this[this.tablePictureGroup.PictureIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PictureID\' in table \'PictureGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePictureGroup.PictureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupID {
                get {
                    try {
                        return ((int)(this[this.tablePictureGroup.GroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupID\' in table \'PictureGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePictureGroup.GroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow PictureRow {
                get {
                    return ((PictureRow)(this.GetParentRow(this.Table.ParentRelations["PicturePictureGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PicturePictureGroup"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureIDNull() {
                return this.IsNull(this.tablePictureGroup.PictureIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureIDNull() {
                this[this.tablePictureGroup.PictureIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupIDNull() {
                return this.IsNull(this.tablePictureGroup.GroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupIDNull() {
                this[this.tablePictureGroup.GroupIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PicturePersonRow : global::System.Data.DataRow {
            
            private PicturePersonDataTable tablePicturePerson;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PicturePersonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePicturePerson = ((PicturePersonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureID {
                get {
                    return ((int)(this[this.tablePicturePerson.PictureIDColumn]));
                }
                set {
                    this[this.tablePicturePerson.PictureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PersonID {
                get {
                    return ((int)(this[this.tablePicturePerson.PersonIDColumn]));
                }
                set {
                    this[this.tablePicturePerson.PersonIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PicturePersonID {
                get {
                    return ((int)(this[this.tablePicturePerson.PicturePersonIDColumn]));
                }
                set {
                    this[this.tablePicturePerson.PicturePersonIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow PictureRow {
                get {
                    return ((PictureRow)(this.GetParentRow(this.Table.ParentRelations["PicturePicturePerson"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PicturePicturePerson"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PictureRowChangeEvent : global::System.EventArgs {
            
            private PictureRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRowChangeEvent(PictureRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PictureCacheRowChangeEvent : global::System.EventArgs {
            
            private PictureCacheRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCacheRowChangeEvent(PictureCacheRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCacheRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PictureCategoryRowChangeEvent : global::System.EventArgs {
            
            private PictureCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCategoryRowChangeEvent(PictureCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PictureGroupRowChangeEvent : global::System.EventArgs {
            
            private PictureGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureGroupRowChangeEvent(PictureGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PicturePersonRowChangeEvent : global::System.EventArgs {
            
            private PicturePersonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PicturePersonRowChangeEvent(PicturePersonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PicturePersonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591