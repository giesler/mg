#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace msn2.net.Pictures
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="picdb")]
	public partial class PictureDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCategorySubCategory(CategorySubCategory instance);
    partial void UpdateCategorySubCategory(CategorySubCategory instance);
    partial void DeleteCategorySubCategory(CategorySubCategory instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertLoginRequest(LoginRequest instance);
    partial void UpdateLoginRequest(LoginRequest instance);
    partial void DeleteLoginRequest(LoginRequest instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonGroup(PersonGroup instance);
    partial void UpdatePersonGroup(PersonGroup instance);
    partial void DeletePersonGroup(PersonGroup instance);
    partial void InsertPicture(Picture instance);
    partial void UpdatePicture(Picture instance);
    partial void DeletePicture(Picture instance);
    partial void InsertPictureCache(PictureCache instance);
    partial void UpdatePictureCache(PictureCache instance);
    partial void DeletePictureCache(PictureCache instance);
    partial void InsertPictureCategory(PictureCategory instance);
    partial void UpdatePictureCategory(PictureCategory instance);
    partial void DeletePictureCategory(PictureCategory instance);
    partial void InsertPictureComment(PictureComment instance);
    partial void UpdatePictureComment(PictureComment instance);
    partial void DeletePictureComment(PictureComment instance);
    partial void InsertPictureLog(PictureLog instance);
    partial void UpdatePictureLog(PictureLog instance);
    partial void DeletePictureLog(PictureLog instance);
    partial void InsertPicturePerson(PicturePerson instance);
    partial void UpdatePicturePerson(PicturePerson instance);
    partial void DeletePicturePerson(PicturePerson instance);
    partial void InsertPictureRating(PictureRating instance);
    partial void UpdatePictureRating(PictureRating instance);
    partial void DeletePictureRating(PictureRating instance);
    partial void InsertRecentCategory(RecentCategory instance);
    partial void UpdateRecentCategory(RecentCategory instance);
    partial void DeleteRecentCategory(RecentCategory instance);
    #endregion
		
		public PictureDataContext() : 
				base(global::msn2.net.Pictures.Properties.Settings.Default.picdbConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PictureDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PictureDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PictureDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PictureDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CategorySubCategory> CategorySubCategories
		{
			get
			{
				return this.GetTable<CategorySubCategory>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<LoginRequest> LoginRequests
		{
			get
			{
				return this.GetTable<LoginRequest>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonGroup> PersonGroups
		{
			get
			{
				return this.GetTable<PersonGroup>();
			}
		}
		
		public System.Data.Linq.Table<Picture> Pictures
		{
			get
			{
				return this.GetTable<Picture>();
			}
		}
		
		public System.Data.Linq.Table<PictureCache> PictureCaches
		{
			get
			{
				return this.GetTable<PictureCache>();
			}
		}
		
		public System.Data.Linq.Table<PictureCategory> PictureCategories
		{
			get
			{
				return this.GetTable<PictureCategory>();
			}
		}
		
		public System.Data.Linq.Table<PictureComment> PictureComments
		{
			get
			{
				return this.GetTable<PictureComment>();
			}
		}
		
		public System.Data.Linq.Table<PictureLog> PictureLogs
		{
			get
			{
				return this.GetTable<PictureLog>();
			}
		}
		
		public System.Data.Linq.Table<PicturePerson> PicturePersons
		{
			get
			{
				return this.GetTable<PicturePerson>();
			}
		}
		
		public System.Data.Linq.Table<PictureRating> PictureRatings
		{
			get
			{
				return this.GetTable<PictureRating>();
			}
		}
		
		public System.Data.Linq.Table<RecentCategory> RecentCategories
		{
			get
			{
				return this.GetTable<RecentCategory>();
			}
		}
		
		[Function(Name="dbo.up_Person_GetRecent")]
		public ISingleResult<Person> GetRecentlySelectedUsers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Person>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.p_GetRandomPicture")]
		public ISingleResult<Picture> GetRandomPicture([Parameter(Name="PersonID", DbType="Int")] System.Nullable<int> personID, [Parameter(Name="MaxWidth", DbType="Int")] System.Nullable<int> maxWidth, [Parameter(Name="MaxHeight", DbType="Int")] System.Nullable<int> maxHeight, [Parameter(DbType="NVarChar(255)")] string path, [Parameter(DbType="Int")] System.Nullable<int> overrideGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personID, maxWidth, maxHeight, path, overrideGroupId);
			return ((ISingleResult<Picture>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private int _CategoryParentID;
		
		private string _CategoryName;
		
		private string _CategoryPath;
		
		private string _CategoryDescription;
		
		private System.Nullable<System.DateTime> _CategoryDate;
		
		private bool _Publish;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private System.Nullable<int> _PictureId;
		
		private EntitySet<PictureCategory> _PictureCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryParentIDChanging(int value);
    partial void OnCategoryParentIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryPathChanging(string value);
    partial void OnCategoryPathChanged();
    partial void OnCategoryDescriptionChanging(string value);
    partial void OnCategoryDescriptionChanged();
    partial void OnCategoryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCategoryDateChanged();
    partial void OnPublishChanging(bool value);
    partial void OnPublishChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnPictureIdChanging(System.Nullable<int> value);
    partial void OnPictureIdChanged();
    #endregion
		
		public Category()
		{
			this._PictureCategories = new EntitySet<PictureCategory>(new Action<PictureCategory>(this.attach_PictureCategories), new Action<PictureCategory>(this.detach_PictureCategories));
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryParentID", DbType="Int NOT NULL")]
		public int CategoryParentID
		{
			get
			{
				return this._CategoryParentID;
			}
			set
			{
				if ((this._CategoryParentID != value))
				{
					this.OnCategoryParentIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryParentID = value;
					this.SendPropertyChanged("CategoryParentID");
					this.OnCategoryParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryPath", DbType="NVarChar(2500)")]
		public string CategoryPath
		{
			get
			{
				return this._CategoryPath;
			}
			set
			{
				if ((this._CategoryPath != value))
				{
					this.OnCategoryPathChanging(value);
					this.SendPropertyChanging();
					this._CategoryPath = value;
					this.SendPropertyChanged("CategoryPath");
					this.OnCategoryPathChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryDescription", DbType="NVarChar(2500)")]
		public string CategoryDescription
		{
			get
			{
				return this._CategoryDescription;
			}
			set
			{
				if ((this._CategoryDescription != value))
				{
					this.OnCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CategoryDescription = value;
					this.SendPropertyChanged("CategoryDescription");
					this.OnCategoryDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> CategoryDate
		{
			get
			{
				return this._CategoryDate;
			}
			set
			{
				if ((this._CategoryDate != value))
				{
					this.OnCategoryDateChanging(value);
					this.SendPropertyChanging();
					this._CategoryDate = value;
					this.SendPropertyChanged("CategoryDate");
					this.OnCategoryDateChanged();
				}
			}
		}
		
		[Column(Storage="_Publish", DbType="Bit NOT NULL")]
		public bool Publish
		{
			get
			{
				return this._Publish;
			}
			set
			{
				if ((this._Publish != value))
				{
					this.OnPublishChanging(value);
					this.SendPropertyChanging();
					this._Publish = value;
					this.SendPropertyChanged("Publish");
					this.OnPublishChanged();
				}
			}
		}
		
		[Column(Storage="_LastModified", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int")]
		public System.Nullable<int> PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Association(Name="Category_PictureCategory", Storage="_PictureCategories", OtherKey="CategoryID")]
		public EntitySet<PictureCategory> PictureCategories
		{
			get
			{
				return this._PictureCategories;
			}
			set
			{
				this._PictureCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PictureCategories(PictureCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_PictureCategories(PictureCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.CategorySubCategory")]
	public partial class CategorySubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private int _SubCategoryID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    #endregion
		
		public CategorySubCategory()
		{
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _GroupName;
		
		private EntitySet<PersonGroup> _PersonGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public Group()
		{
			this._PersonGroups = new EntitySet<PersonGroup>(new Action<PersonGroup>(this.attach_PersonGroups), new Action<PersonGroup>(this.detach_PersonGroups));
			OnCreated();
		}
		
		[Column(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="NVarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Association(Name="Group_PersonGroup", Storage="_PersonGroups", OtherKey="GroupID")]
		public EntitySet<PersonGroup> PersonGroups
		{
			get
			{
				return this._PersonGroups;
			}
			set
			{
				this._PersonGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonGroups(PersonGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_PersonGroups(PersonGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.LoginRequest")]
	public partial class LoginRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private string _Name;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _RequestDate;
		
		private System.Nullable<bool> _Complete;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRequestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestDateChanged();
    partial void OnCompleteChanging(System.Nullable<bool> value);
    partial void OnCompleteChanged();
    #endregion
		
		public LoginRequest()
		{
			OnCreated();
		}
		
		[Column(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(150)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Column(Storage="_Complete", DbType="Bit")]
		public System.Nullable<bool> Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _FullName;
		
		private string _Email;
		
		private string _Password;
		
		private byte[] _ResetPWGuid;
		
		private System.Nullable<System.DateTime> _ResetPWExpire;
		
		private string _WindowsUserName;
		
		private EntitySet<PersonGroup> _PersonGroups;
		
		private EntitySet<PictureComment> _PictureComments;
		
		private EntitySet<PicturePerson> _PicturePersons;
		
		private EntitySet<PictureRating> _PictureRatings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnResetPWGuidChanging(byte[] value);
    partial void OnResetPWGuidChanged();
    partial void OnResetPWExpireChanging(System.Nullable<System.DateTime> value);
    partial void OnResetPWExpireChanged();
    partial void OnWindowsUserNameChanging(string value);
    partial void OnWindowsUserNameChanged();
    #endregion
		
		public Person()
		{
			this._PersonGroups = new EntitySet<PersonGroup>(new Action<PersonGroup>(this.attach_PersonGroups), new Action<PersonGroup>(this.detach_PersonGroups));
			this._PictureComments = new EntitySet<PictureComment>(new Action<PictureComment>(this.attach_PictureComments), new Action<PictureComment>(this.detach_PictureComments));
			this._PicturePersons = new EntitySet<PicturePerson>(new Action<PicturePerson>(this.attach_PicturePersons), new Action<PicturePerson>(this.detach_PicturePersons));
			this._PictureRatings = new EntitySet<PictureRating>(new Action<PictureRating>(this.attach_PictureRatings), new Action<PictureRating>(this.detach_PictureRatings));
			OnCreated();
		}
		
		[Column(Storage="_PersonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_ResetPWGuid", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public byte[] ResetPWGuid
		{
			get
			{
				return this._ResetPWGuid;
			}
			set
			{
				if ((this._ResetPWGuid != value))
				{
					this.OnResetPWGuidChanging(value);
					this.SendPropertyChanging();
					this._ResetPWGuid = value;
					this.SendPropertyChanged("ResetPWGuid");
					this.OnResetPWGuidChanged();
				}
			}
		}
		
		[Column(Storage="_ResetPWExpire", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ResetPWExpire
		{
			get
			{
				return this._ResetPWExpire;
			}
			set
			{
				if ((this._ResetPWExpire != value))
				{
					this.OnResetPWExpireChanging(value);
					this.SendPropertyChanging();
					this._ResetPWExpire = value;
					this.SendPropertyChanged("ResetPWExpire");
					this.OnResetPWExpireChanged();
				}
			}
		}
		
		[Column(Storage="_WindowsUserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WindowsUserName
		{
			get
			{
				return this._WindowsUserName;
			}
			set
			{
				if ((this._WindowsUserName != value))
				{
					this.OnWindowsUserNameChanging(value);
					this.SendPropertyChanging();
					this._WindowsUserName = value;
					this.SendPropertyChanged("WindowsUserName");
					this.OnWindowsUserNameChanged();
				}
			}
		}
		
		[Association(Name="Person_PersonGroup", Storage="_PersonGroups", OtherKey="PersonID")]
		public EntitySet<PersonGroup> PersonGroups
		{
			get
			{
				return this._PersonGroups;
			}
			set
			{
				this._PersonGroups.Assign(value);
			}
		}
		
		[Association(Name="Person_PictureComment", Storage="_PictureComments", OtherKey="PersonId")]
		public EntitySet<PictureComment> PictureComments
		{
			get
			{
				return this._PictureComments;
			}
			set
			{
				this._PictureComments.Assign(value);
			}
		}
		
		[Association(Name="Person_PicturePerson", Storage="_PicturePersons", OtherKey="PersonID")]
		public EntitySet<PicturePerson> PicturePersons
		{
			get
			{
				return this._PicturePersons;
			}
			set
			{
				this._PicturePersons.Assign(value);
			}
		}
		
		[Association(Name="Person_PictureRating", Storage="_PictureRatings", OtherKey="PersonId")]
		public EntitySet<PictureRating> PictureRatings
		{
			get
			{
				return this._PictureRatings;
			}
			set
			{
				this._PictureRatings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonGroups(PersonGroup entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonGroups(PersonGroup entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PictureComments(PictureComment entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PictureComments(PictureComment entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PicturePersons(PicturePerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PicturePersons(PicturePerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PictureRatings(PictureRating entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PictureRatings(PictureRating entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[Table(Name="dbo.PersonGroup")]
	public partial class PersonGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonGroupID;
		
		private int _PersonID;
		
		private int _GroupID;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonGroupIDChanging(int value);
    partial void OnPersonGroupIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public PersonGroup()
		{
			this._Group = default(EntityRef<Group>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_PersonGroupID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int PersonGroupID
		{
			get
			{
				return this._PersonGroupID;
			}
			set
			{
				if ((this._PersonGroupID != value))
				{
					this.OnPersonGroupIDChanging(value);
					this.SendPropertyChanging();
					this._PersonGroupID = value;
					this.SendPropertyChanged("PersonGroupID");
					this.OnPersonGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_PersonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Association(Name="Group_PersonGroup", Storage="_Group", ThisKey="GroupID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.PersonGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.PersonGroups.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Person_PersonGroup", Storage="_Person", ThisKey="PersonID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonGroups.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonGroups.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Picture")]
	public partial class Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PictureID;
		
		private string _Filename;
		
		private System.DateTime _PictureDate;
		
		private string _Title;
		
		private string _Description;
		
		private bool _Publish;
		
		private System.Nullable<byte> _Rating;
		
		private System.Nullable<int> _PictureBy;
		
		private int _PictureSort;
		
		private System.Nullable<System.DateTime> _PictureAddDate;
		
		private System.Nullable<System.DateTime> _PictureUpdateDate;
		
		private System.Nullable<decimal> _AverageRating;
		
		private EntitySet<PictureCache> _PictureCaches;
		
		private EntitySet<PictureCategory> _PictureCategories;
		
		private EntitySet<PictureComment> _PictureComments;
		
		private EntitySet<PicturePerson> _PicturePersons;
		
		private EntitySet<PictureRating> _PictureRatings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureIDChanging(int value);
    partial void OnPictureIDChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnPictureDateChanging(System.DateTime value);
    partial void OnPictureDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPublishChanging(bool value);
    partial void OnPublishChanged();
    partial void OnRatingChanging(System.Nullable<byte> value);
    partial void OnRatingChanged();
    partial void OnPictureByChanging(System.Nullable<int> value);
    partial void OnPictureByChanged();
    partial void OnPictureSortChanging(int value);
    partial void OnPictureSortChanged();
    partial void OnPictureAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPictureAddDateChanged();
    partial void OnPictureUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPictureUpdateDateChanged();
    partial void OnAverageRatingChanging(System.Nullable<decimal> value);
    partial void OnAverageRatingChanged();
    #endregion
		
		public Picture()
		{
			this._PictureCaches = new EntitySet<PictureCache>(new Action<PictureCache>(this.attach_PictureCaches), new Action<PictureCache>(this.detach_PictureCaches));
			this._PictureCategories = new EntitySet<PictureCategory>(new Action<PictureCategory>(this.attach_PictureCategories), new Action<PictureCategory>(this.detach_PictureCategories));
			this._PictureComments = new EntitySet<PictureComment>(new Action<PictureComment>(this.attach_PictureComments), new Action<PictureComment>(this.detach_PictureComments));
			this._PicturePersons = new EntitySet<PicturePerson>(new Action<PicturePerson>(this.attach_PicturePersons), new Action<PicturePerson>(this.detach_PicturePersons));
			this._PictureRatings = new EntitySet<PictureRating>(new Action<PictureRating>(this.attach_PictureRatings), new Action<PictureRating>(this.detach_PictureRatings));
			OnCreated();
		}
		
		[Column(Storage="_PictureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Filename", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[Column(Storage="_PictureDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PictureDate
		{
			get
			{
				return this._PictureDate;
			}
			set
			{
				if ((this._PictureDate != value))
				{
					this.OnPictureDateChanging(value);
					this.SendPropertyChanging();
					this._PictureDate = value;
					this.SendPropertyChanged("PictureDate");
					this.OnPictureDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Publish", DbType="Bit NOT NULL")]
		public bool Publish
		{
			get
			{
				return this._Publish;
			}
			set
			{
				if ((this._Publish != value))
				{
					this.OnPublishChanging(value);
					this.SendPropertyChanging();
					this._Publish = value;
					this.SendPropertyChanged("Publish");
					this.OnPublishChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="TinyInt")]
		public System.Nullable<byte> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_PictureBy", DbType="Int")]
		public System.Nullable<int> PictureBy
		{
			get
			{
				return this._PictureBy;
			}
			set
			{
				if ((this._PictureBy != value))
				{
					this.OnPictureByChanging(value);
					this.SendPropertyChanging();
					this._PictureBy = value;
					this.SendPropertyChanged("PictureBy");
					this.OnPictureByChanged();
				}
			}
		}
		
		[Column(Storage="_PictureSort", DbType="Int NOT NULL")]
		public int PictureSort
		{
			get
			{
				return this._PictureSort;
			}
			set
			{
				if ((this._PictureSort != value))
				{
					this.OnPictureSortChanging(value);
					this.SendPropertyChanging();
					this._PictureSort = value;
					this.SendPropertyChanged("PictureSort");
					this.OnPictureSortChanged();
				}
			}
		}
		
		[Column(Storage="_PictureAddDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> PictureAddDate
		{
			get
			{
				return this._PictureAddDate;
			}
			set
			{
				if ((this._PictureAddDate != value))
				{
					this.OnPictureAddDateChanging(value);
					this.SendPropertyChanging();
					this._PictureAddDate = value;
					this.SendPropertyChanged("PictureAddDate");
					this.OnPictureAddDateChanged();
				}
			}
		}
		
		[Column(Storage="_PictureUpdateDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> PictureUpdateDate
		{
			get
			{
				return this._PictureUpdateDate;
			}
			set
			{
				if ((this._PictureUpdateDate != value))
				{
					this.OnPictureUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._PictureUpdateDate = value;
					this.SendPropertyChanged("PictureUpdateDate");
					this.OnPictureUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_AverageRating", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> AverageRating
		{
			get
			{
				return this._AverageRating;
			}
			set
			{
				if ((this._AverageRating != value))
				{
					this.OnAverageRatingChanging(value);
					this.SendPropertyChanging();
					this._AverageRating = value;
					this.SendPropertyChanged("AverageRating");
					this.OnAverageRatingChanged();
				}
			}
		}
		
		[Association(Name="Picture_PictureCache", Storage="_PictureCaches", OtherKey="PictureID")]
		public EntitySet<PictureCache> PictureCaches
		{
			get
			{
				return this._PictureCaches;
			}
			set
			{
				this._PictureCaches.Assign(value);
			}
		}
		
		[Association(Name="Picture_PictureCategory", Storage="_PictureCategories", OtherKey="PictureID")]
		public EntitySet<PictureCategory> PictureCategories
		{
			get
			{
				return this._PictureCategories;
			}
			set
			{
				this._PictureCategories.Assign(value);
			}
		}
		
		[Association(Name="Picture_PictureComment", Storage="_PictureComments", OtherKey="PictureId")]
		public EntitySet<PictureComment> PictureComments
		{
			get
			{
				return this._PictureComments;
			}
			set
			{
				this._PictureComments.Assign(value);
			}
		}
		
		[Association(Name="Picture_PicturePerson", Storage="_PicturePersons", OtherKey="PictureID")]
		public EntitySet<PicturePerson> PicturePersons
		{
			get
			{
				return this._PicturePersons;
			}
			set
			{
				this._PicturePersons.Assign(value);
			}
		}
		
		[Association(Name="Picture_PictureRating", Storage="_PictureRatings", OtherKey="PictureId")]
		public EntitySet<PictureRating> PictureRatings
		{
			get
			{
				return this._PictureRatings;
			}
			set
			{
				this._PictureRatings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PictureCaches(PictureCache entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_PictureCaches(PictureCache entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_PictureCategories(PictureCategory entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_PictureCategories(PictureCategory entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_PictureComments(PictureComment entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_PictureComments(PictureComment entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_PicturePersons(PicturePerson entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_PicturePersons(PicturePerson entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_PictureRatings(PictureRating entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_PictureRatings(PictureRating entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
	}
	
	[Table(Name="dbo.PictureCache")]
	public partial class PictureCache : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PictureCacheID;
		
		private int _PictureID;
		
		private string _Filename;
		
		private System.Nullable<int> _Height;
		
		private System.Nullable<int> _Width;
		
		private System.Nullable<int> _MaxHeight;
		
		private System.Nullable<int> _MaxWidth;
		
		private EntityRef<Picture> _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureCacheIDChanging(int value);
    partial void OnPictureCacheIDChanged();
    partial void OnPictureIDChanging(int value);
    partial void OnPictureIDChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    partial void OnMaxHeightChanging(System.Nullable<int> value);
    partial void OnMaxHeightChanged();
    partial void OnMaxWidthChanging(System.Nullable<int> value);
    partial void OnMaxWidthChanged();
    #endregion
		
		public PictureCache()
		{
			this._Picture = default(EntityRef<Picture>);
			OnCreated();
		}
		
		[Column(Storage="_PictureCacheID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PictureCacheID
		{
			get
			{
				return this._PictureCacheID;
			}
			set
			{
				if ((this._PictureCacheID != value))
				{
					this.OnPictureCacheIDChanging(value);
					this.SendPropertyChanging();
					this._PictureCacheID = value;
					this.SendPropertyChanged("PictureCacheID");
					this.OnPictureCacheIDChanged();
				}
			}
		}
		
		[Column(Storage="_PictureID", DbType="Int NOT NULL")]
		public int PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Filename", DbType="NVarChar(200)")]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_MaxHeight", DbType="Int")]
		public System.Nullable<int> MaxHeight
		{
			get
			{
				return this._MaxHeight;
			}
			set
			{
				if ((this._MaxHeight != value))
				{
					this.OnMaxHeightChanging(value);
					this.SendPropertyChanging();
					this._MaxHeight = value;
					this.SendPropertyChanged("MaxHeight");
					this.OnMaxHeightChanged();
				}
			}
		}
		
		[Column(Storage="_MaxWidth", DbType="Int")]
		public System.Nullable<int> MaxWidth
		{
			get
			{
				return this._MaxWidth;
			}
			set
			{
				if ((this._MaxWidth != value))
				{
					this.OnMaxWidthChanging(value);
					this.SendPropertyChanging();
					this._MaxWidth = value;
					this.SendPropertyChanged("MaxWidth");
					this.OnMaxWidthChanged();
				}
			}
		}
		
		[Association(Name="Picture_PictureCache", Storage="_Picture", ThisKey="PictureID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.PictureCaches.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.PictureCaches.Add(this);
						this._PictureID = value.PictureID;
					}
					else
					{
						this._PictureID = default(int);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PictureCategory")]
	public partial class PictureCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PictureID;
		
		private int _CategoryID;
		
		private System.Nullable<System.DateTime> _PictureCategoryDate;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Picture> _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureIDChanging(int value);
    partial void OnPictureIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnPictureCategoryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPictureCategoryDateChanged();
    #endregion
		
		public PictureCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Picture = default(EntityRef<Picture>);
			OnCreated();
		}
		
		[Column(Storage="_PictureID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_PictureCategoryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PictureCategoryDate
		{
			get
			{
				return this._PictureCategoryDate;
			}
			set
			{
				if ((this._PictureCategoryDate != value))
				{
					this.OnPictureCategoryDateChanging(value);
					this.SendPropertyChanging();
					this._PictureCategoryDate = value;
					this.SendPropertyChanged("PictureCategoryDate");
					this.OnPictureCategoryDateChanged();
				}
			}
		}
		
		[Association(Name="Category_PictureCategory", Storage="_Category", ThisKey="CategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.PictureCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.PictureCategories.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Picture_PictureCategory", Storage="_Picture", ThisKey="PictureID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.PictureCategories.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.PictureCategories.Add(this);
						this._PictureID = value.PictureID;
					}
					else
					{
						this._PictureID = default(int);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PictureComment")]
	public partial class PictureComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PictureCommnetId;
		
		private int _PictureId;
		
		private int _PersonId;
		
		private string _Comment;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Picture> _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureCommnetIdChanging(int value);
    partial void OnPictureCommnetIdChanged();
    partial void OnPictureIdChanging(int value);
    partial void OnPictureIdChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public PictureComment()
		{
			this._Person = default(EntityRef<Person>);
			this._Picture = default(EntityRef<Picture>);
			OnCreated();
		}
		
		[Column(Storage="_PictureCommnetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PictureCommnetId
		{
			get
			{
				return this._PictureCommnetId;
			}
			set
			{
				if ((this._PictureCommnetId != value))
				{
					this.OnPictureCommnetIdChanging(value);
					this.SendPropertyChanging();
					this._PictureCommnetId = value;
					this.SendPropertyChanged("PictureCommnetId");
					this.OnPictureCommnetIdChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int NOT NULL")]
		public int PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="Person_PictureComment", Storage="_Person", ThisKey="PersonId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PictureComments.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PictureComments.Add(this);
						this._PersonId = value.PersonID;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Picture_PictureComment", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.PictureComments.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.PictureComments.Add(this);
						this._PictureId = value.PictureID;
					}
					else
					{
						this._PictureId = default(int);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PictureLog")]
	public partial class PictureLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PictureLogID;
		
		private System.Nullable<int> _PictureID;
		
		private System.Nullable<int> _PersonID;
		
		private System.Nullable<System.DateTime> _LogDate;
		
		private string _LogDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureLogIDChanging(int value);
    partial void OnPictureLogIDChanged();
    partial void OnPictureIDChanging(System.Nullable<int> value);
    partial void OnPictureIDChanged();
    partial void OnPersonIDChanging(System.Nullable<int> value);
    partial void OnPersonIDChanged();
    partial void OnLogDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLogDateChanged();
    partial void OnLogDetailsChanging(string value);
    partial void OnLogDetailsChanged();
    #endregion
		
		public PictureLog()
		{
			OnCreated();
		}
		
		[Column(Storage="_PictureLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PictureLogID
		{
			get
			{
				return this._PictureLogID;
			}
			set
			{
				if ((this._PictureLogID != value))
				{
					this.OnPictureLogIDChanging(value);
					this.SendPropertyChanging();
					this._PictureLogID = value;
					this.SendPropertyChanged("PictureLogID");
					this.OnPictureLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_PictureID", DbType="Int")]
		public System.Nullable<int> PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		[Column(Storage="_PersonID", DbType="Int")]
		public System.Nullable<int> PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_LogDetails", DbType="NVarChar(255)")]
		public string LogDetails
		{
			get
			{
				return this._LogDetails;
			}
			set
			{
				if ((this._LogDetails != value))
				{
					this.OnLogDetailsChanging(value);
					this.SendPropertyChanging();
					this._LogDetails = value;
					this.SendPropertyChanged("LogDetails");
					this.OnLogDetailsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PicturePerson")]
	public partial class PicturePerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PictureID;
		
		private int _PersonID;
		
		private int _PicturePersonID;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Picture> _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureIDChanging(int value);
    partial void OnPictureIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnPicturePersonIDChanging(int value);
    partial void OnPicturePersonIDChanged();
    #endregion
		
		public PicturePerson()
		{
			this._Person = default(EntityRef<Person>);
			this._Picture = default(EntityRef<Picture>);
			OnCreated();
		}
		
		[Column(Storage="_PictureID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		[Column(Storage="_PersonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicturePersonID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int PicturePersonID
		{
			get
			{
				return this._PicturePersonID;
			}
			set
			{
				if ((this._PicturePersonID != value))
				{
					this.OnPicturePersonIDChanging(value);
					this.SendPropertyChanging();
					this._PicturePersonID = value;
					this.SendPropertyChanged("PicturePersonID");
					this.OnPicturePersonIDChanged();
				}
			}
		}
		
		[Association(Name="Person_PicturePerson", Storage="_Person", ThisKey="PersonID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PicturePersons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PicturePersons.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Picture_PicturePerson", Storage="_Picture", ThisKey="PictureID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.PicturePersons.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.PicturePersons.Add(this);
						this._PictureID = value.PictureID;
					}
					else
					{
						this._PictureID = default(int);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PictureRating")]
	public partial class PictureRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatingId;
		
		private int _PictureId;
		
		private int _PersonId;
		
		private byte _Rating;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Picture> _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnPictureIdChanging(int value);
    partial void OnPictureIdChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnRatingChanging(byte value);
    partial void OnRatingChanged();
    #endregion
		
		public PictureRating()
		{
			this._Person = default(EntityRef<Person>);
			this._Picture = default(EntityRef<Picture>);
			OnCreated();
		}
		
		[Column(Storage="_RatingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int NOT NULL")]
		public int PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="TinyInt NOT NULL")]
		public byte Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="Person_PictureRating", Storage="_Person", ThisKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PictureRatings.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PictureRatings.Add(this);
						this._PersonId = value.PersonID;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Picture_PictureRating", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.PictureRatings.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.PictureRatings.Add(this);
						this._PictureId = value.PictureID;
					}
					else
					{
						this._PictureId = default(int);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RecentCategories")]
	public partial class RecentCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecentID;
		
		private string _RecentCategoryID;
		
		private System.Nullable<System.DateTime> _RecentDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecentIDChanging(int value);
    partial void OnRecentIDChanged();
    partial void OnRecentCategoryIDChanging(string value);
    partial void OnRecentCategoryIDChanged();
    partial void OnRecentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecentDateChanged();
    #endregion
		
		public RecentCategory()
		{
			OnCreated();
		}
		
		[Column(Storage="_RecentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecentID
		{
			get
			{
				return this._RecentID;
			}
			set
			{
				if ((this._RecentID != value))
				{
					this.OnRecentIDChanging(value);
					this.SendPropertyChanging();
					this._RecentID = value;
					this.SendPropertyChanged("RecentID");
					this.OnRecentIDChanged();
				}
			}
		}
		
		[Column(Storage="_RecentCategoryID", DbType="NVarChar(50)")]
		public string RecentCategoryID
		{
			get
			{
				return this._RecentCategoryID;
			}
			set
			{
				if ((this._RecentCategoryID != value))
				{
					this.OnRecentCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RecentCategoryID = value;
					this.SendPropertyChanged("RecentCategoryID");
					this.OnRecentCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_RecentDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> RecentDate
		{
			get
			{
				return this._RecentDate;
			}
			set
			{
				if ((this._RecentDate != value))
				{
					this.OnRecentDateChanging(value);
					this.SendPropertyChanging();
					this._RecentDate = value;
					this.SendPropertyChanged("RecentDate");
					this.OnRecentDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
