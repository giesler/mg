//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.85
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace msn2.net.Pictures {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("PictureDataSet")]
    public partial class PictureDataSet : System.Data.DataSet {
        
        private PictureDataTable tablePicture;
        
        public PictureDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected PictureDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Picture"] != null)) {
                    base.Tables.Add(new PictureDataTable(ds.Tables["Picture"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PictureDataTable Picture {
            get {
                return this.tablePicture;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            PictureDataSet cln = ((PictureDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Picture"] != null)) {
                base.Tables.Add(new PictureDataTable(ds.Tables["Picture"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tablePicture = ((PictureDataTable)(base.Tables["Picture"]));
            if ((initTable == true)) {
                if ((this.tablePicture != null)) {
                    this.tablePicture.InitVars();
                }
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PictureDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PictureDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePicture = new PictureDataTable();
            base.Tables.Add(this.tablePicture);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "PictureDataSet");
            this.ExtendedProperties.Add("User_DataSetName", "PictureDataSet");
        }
        
        private bool ShouldSerializePicture() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            PictureDataSet ds = new PictureDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void PictureRowChangeEventHandler(object sender, PictureRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PictureDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPictureID;
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnPictureDate;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnPictureBy;
            
            private System.Data.DataColumn columnPictureSort;
            
            private System.Data.DataColumn columnPictureAddDate;
            
            private System.Data.DataColumn columnPictureUpdateDate;
            
            private bool m_suspendValidation = false;
            
            public PictureDataTable() {
                this.TableName = "Picture";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal PictureDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected PictureDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn PictureIDColumn {
                get {
                    return this.columnPictureID;
                }
            }
            
            internal System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            internal System.Data.DataColumn PictureDateColumn {
                get {
                    return this.columnPictureDate;
                }
            }
            
            internal System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal System.Data.DataColumn PictureByColumn {
                get {
                    return this.columnPictureBy;
                }
            }
            
            internal System.Data.DataColumn PictureSortColumn {
                get {
                    return this.columnPictureSort;
                }
            }
            
            internal System.Data.DataColumn PictureAddDateColumn {
                get {
                    return this.columnPictureAddDate;
                }
            }
            
            internal System.Data.DataColumn PictureUpdateDateColumn {
                get {
                    return this.columnPictureUpdateDate;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public PictureRow this[int index] {
                get {
                    return ((PictureRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event PictureIDChangeEventHandler PictureIDChanging;
            
            public event PictureIDChangeEventHandler PictureIDChanged;
            
            public event FilenameChangeEventHandler FilenameChanging;
            
            public event FilenameChangeEventHandler FilenameChanged;
            
            public event PictureDateChangeEventHandler PictureDateChanging;
            
            public event PictureDateChangeEventHandler PictureDateChanged;
            
            public event TitleChangeEventHandler TitleChanging;
            
            public event TitleChangeEventHandler TitleChanged;
            
            public event DescriptionChangeEventHandler DescriptionChanging;
            
            public event DescriptionChangeEventHandler DescriptionChanged;
            
            public event PictureByChangeEventHandler PictureByChanging;
            
            public event PictureByChangeEventHandler PictureByChanged;
            
            public event PictureSortChangeEventHandler PictureSortChanging;
            
            public event PictureSortChangeEventHandler PictureSortChanged;
            
            public event PictureAddDateChangeEventHandler PictureAddDateChanging;
            
            public event PictureAddDateChangeEventHandler PictureAddDateChanged;
            
            public event PictureUpdateDateChangeEventHandler PictureUpdateDateChanging;
            
            public event PictureUpdateDateChangeEventHandler PictureUpdateDateChanged;
            
            public event PictureRowChangeEventHandler PictureRowChanged;
            
            public event PictureRowChangeEventHandler PictureRowChanging;
            
            public event PictureRowChangeEventHandler PictureRowDeleted;
            
            public event PictureRowChangeEventHandler PictureRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "PictureID")) {
                    if ((this.PictureIDChanging != null)) {
                        this.PictureIDChanging(this, new PictureIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "Filename")) {
                        if ((this.FilenameChanging != null)) {
                            this.FilenameChanging(this, new FilenameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "PictureDate")) {
                            if ((this.PictureDateChanging != null)) {
                                this.PictureDateChanging(this, new PictureDateChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Title")) {
                                if ((this.TitleChanging != null)) {
                                    this.TitleChanging(this, new TitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Description")) {
                                    if ((this.DescriptionChanging != null)) {
                                        this.DescriptionChanging(this, new DescriptionChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "PictureBy")) {
                                        if ((this.PictureByChanging != null)) {
                                            this.PictureByChanging(this, new PictureByChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "PictureSort")) {
                                            if ((this.PictureSortChanging != null)) {
                                                this.PictureSortChanging(this, new PictureSortChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "PictureAddDate")) {
                                                if ((this.PictureAddDateChanging != null)) {
                                                    this.PictureAddDateChanging(this, new PictureAddDateChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "PictureUpdateDate")) {
                                                    if ((this.PictureUpdateDateChanging != null)) {
                                                        this.PictureUpdateDateChanging(this, new PictureUpdateDateChangeEventArg(e));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "PictureID")) {
                    if ((this.PictureIDChanged != null)) {
                        this.PictureIDChanged(this, new PictureIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "Filename")) {
                        if ((this.FilenameChanged != null)) {
                            this.FilenameChanged(this, new FilenameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "PictureDate")) {
                            if ((this.PictureDateChanged != null)) {
                                this.PictureDateChanged(this, new PictureDateChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Title")) {
                                if ((this.TitleChanged != null)) {
                                    this.TitleChanged(this, new TitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Description")) {
                                    if ((this.DescriptionChanged != null)) {
                                        this.DescriptionChanged(this, new DescriptionChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "PictureBy")) {
                                        if ((this.PictureByChanged != null)) {
                                            this.PictureByChanged(this, new PictureByChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "PictureSort")) {
                                            if ((this.PictureSortChanged != null)) {
                                                this.PictureSortChanged(this, new PictureSortChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "PictureAddDate")) {
                                                if ((this.PictureAddDateChanged != null)) {
                                                    this.PictureAddDateChanged(this, new PictureAddDateChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "PictureUpdateDate")) {
                                                    if ((this.PictureUpdateDateChanged != null)) {
                                                        this.PictureUpdateDateChanged(this, new PictureUpdateDateChangeEventArg(e));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddPictureRow(PictureRow row) {
                this.Rows.Add(row);
            }
            
            public PictureRow AddPictureRow(string Filename, System.DateTime PictureDate, string Title, string Description, int PictureBy, int PictureSort, System.DateTime PictureAddDate, System.DateTime PictureUpdateDate) {
                PictureRow rowPictureRow = ((PictureRow)(this.NewRow()));
                rowPictureRow.ItemArray = new object[] {
                        null,
                        Filename,
                        PictureDate,
                        Title,
                        Description,
                        PictureBy,
                        PictureSort,
                        PictureAddDate,
                        PictureUpdateDate};
                this.Rows.Add(rowPictureRow);
                return rowPictureRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                PictureDataTable cln = ((PictureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new PictureDataTable();
            }
            
            internal void InitVars() {
                this.columnPictureID = base.Columns["PictureID"];
                this.columnFilename = base.Columns["Filename"];
                this.columnPictureDate = base.Columns["PictureDate"];
                this.columnTitle = base.Columns["Title"];
                this.columnDescription = base.Columns["Description"];
                this.columnPictureBy = base.Columns["PictureBy"];
                this.columnPictureSort = base.Columns["PictureSort"];
                this.columnPictureAddDate = base.Columns["PictureAddDate"];
                this.columnPictureUpdateDate = base.Columns["PictureUpdateDate"];
            }
            
            private void InitClass() {
                this.columnPictureID = new System.Data.DataColumn("PictureID", typeof(int), null, System.Data.MappingType.Element);
                this.columnPictureID.ExtendedProperties.Add("Generator_ChangedEventName", "PictureIDChanged");
                this.columnPictureID.ExtendedProperties.Add("Generator_ChangingEventName", "PictureIDChanging");
                this.columnPictureID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PictureID");
                this.columnPictureID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PictureIDColumn");
                this.columnPictureID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPictureID");
                this.columnPictureID.ExtendedProperties.Add("Generator_DelegateName", "PictureIDChangeEventHandler");
                this.columnPictureID.ExtendedProperties.Add("Generator_EventArgName", "PictureIDChangeEventArg");
                this.columnPictureID.ExtendedProperties.Add("User_ColumnName", "PictureID");
                base.Columns.Add(this.columnPictureID);
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Element);
                this.columnFilename.ExtendedProperties.Add("Generator_ChangedEventName", "FilenameChanged");
                this.columnFilename.ExtendedProperties.Add("Generator_ChangingEventName", "FilenameChanging");
                this.columnFilename.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Filename");
                this.columnFilename.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FilenameColumn");
                this.columnFilename.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFilename");
                this.columnFilename.ExtendedProperties.Add("Generator_DelegateName", "FilenameChangeEventHandler");
                this.columnFilename.ExtendedProperties.Add("Generator_EventArgName", "FilenameChangeEventArg");
                this.columnFilename.ExtendedProperties.Add("User_ColumnName", "Filename");
                base.Columns.Add(this.columnFilename);
                this.columnPictureDate = new System.Data.DataColumn("PictureDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnPictureDate.ExtendedProperties.Add("Generator_ChangedEventName", "PictureDateChanged");
                this.columnPictureDate.ExtendedProperties.Add("Generator_ChangingEventName", "PictureDateChanging");
                this.columnPictureDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PictureDate");
                this.columnPictureDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PictureDateColumn");
                this.columnPictureDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPictureDate");
                this.columnPictureDate.ExtendedProperties.Add("Generator_DelegateName", "PictureDateChangeEventHandler");
                this.columnPictureDate.ExtendedProperties.Add("Generator_EventArgName", "PictureDateChangeEventArg");
                this.columnPictureDate.ExtendedProperties.Add("User_ColumnName", "PictureDate");
                base.Columns.Add(this.columnPictureDate);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                this.columnTitle.ExtendedProperties.Add("Generator_ChangedEventName", "TitleChanged");
                this.columnTitle.ExtendedProperties.Add("Generator_ChangingEventName", "TitleChanging");
                this.columnTitle.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Title");
                this.columnTitle.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "TitleColumn");
                this.columnTitle.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTitle");
                this.columnTitle.ExtendedProperties.Add("Generator_DelegateName", "TitleChangeEventHandler");
                this.columnTitle.ExtendedProperties.Add("Generator_EventArgName", "TitleChangeEventArg");
                this.columnTitle.ExtendedProperties.Add("User_ColumnName", "Title");
                base.Columns.Add(this.columnTitle);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.columnDescription.ExtendedProperties.Add("Generator_ChangedEventName", "DescriptionChanged");
                this.columnDescription.ExtendedProperties.Add("Generator_ChangingEventName", "DescriptionChanging");
                this.columnDescription.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Description");
                this.columnDescription.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DescriptionColumn");
                this.columnDescription.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDescription");
                this.columnDescription.ExtendedProperties.Add("Generator_DelegateName", "DescriptionChangeEventHandler");
                this.columnDescription.ExtendedProperties.Add("Generator_EventArgName", "DescriptionChangeEventArg");
                this.columnDescription.ExtendedProperties.Add("User_ColumnName", "Description");
                base.Columns.Add(this.columnDescription);
                this.columnPictureBy = new System.Data.DataColumn("PictureBy", typeof(int), null, System.Data.MappingType.Element);
                this.columnPictureBy.ExtendedProperties.Add("Generator_ChangedEventName", "PictureByChanged");
                this.columnPictureBy.ExtendedProperties.Add("Generator_ChangingEventName", "PictureByChanging");
                this.columnPictureBy.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PictureBy");
                this.columnPictureBy.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PictureByColumn");
                this.columnPictureBy.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPictureBy");
                this.columnPictureBy.ExtendedProperties.Add("Generator_DelegateName", "PictureByChangeEventHandler");
                this.columnPictureBy.ExtendedProperties.Add("Generator_EventArgName", "PictureByChangeEventArg");
                this.columnPictureBy.ExtendedProperties.Add("User_ColumnName", "PictureBy");
                base.Columns.Add(this.columnPictureBy);
                this.columnPictureSort = new System.Data.DataColumn("PictureSort", typeof(int), null, System.Data.MappingType.Element);
                this.columnPictureSort.ExtendedProperties.Add("Generator_ChangedEventName", "PictureSortChanged");
                this.columnPictureSort.ExtendedProperties.Add("Generator_ChangingEventName", "PictureSortChanging");
                this.columnPictureSort.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PictureSort");
                this.columnPictureSort.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PictureSortColumn");
                this.columnPictureSort.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPictureSort");
                this.columnPictureSort.ExtendedProperties.Add("Generator_DelegateName", "PictureSortChangeEventHandler");
                this.columnPictureSort.ExtendedProperties.Add("Generator_EventArgName", "PictureSortChangeEventArg");
                this.columnPictureSort.ExtendedProperties.Add("User_ColumnName", "PictureSort");
                base.Columns.Add(this.columnPictureSort);
                this.columnPictureAddDate = new System.Data.DataColumn("PictureAddDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnPictureAddDate.ExtendedProperties.Add("Generator_ChangedEventName", "PictureAddDateChanged");
                this.columnPictureAddDate.ExtendedProperties.Add("Generator_ChangingEventName", "PictureAddDateChanging");
                this.columnPictureAddDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PictureAddDate");
                this.columnPictureAddDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PictureAddDateColumn");
                this.columnPictureAddDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPictureAddDate");
                this.columnPictureAddDate.ExtendedProperties.Add("Generator_DelegateName", "PictureAddDateChangeEventHandler");
                this.columnPictureAddDate.ExtendedProperties.Add("Generator_EventArgName", "PictureAddDateChangeEventArg");
                this.columnPictureAddDate.ExtendedProperties.Add("User_ColumnName", "PictureAddDate");
                base.Columns.Add(this.columnPictureAddDate);
                this.columnPictureUpdateDate = new System.Data.DataColumn("PictureUpdateDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnPictureUpdateDate.ExtendedProperties.Add("Generator_ChangedEventName", "PictureUpdateDateChanged");
                this.columnPictureUpdateDate.ExtendedProperties.Add("Generator_ChangingEventName", "PictureUpdateDateChanging");
                this.columnPictureUpdateDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PictureUpdateDate");
                this.columnPictureUpdateDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PictureUpdateDateColumn");
                this.columnPictureUpdateDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPictureUpdateDate");
                this.columnPictureUpdateDate.ExtendedProperties.Add("Generator_DelegateName", "PictureUpdateDateChangeEventHandler");
                this.columnPictureUpdateDate.ExtendedProperties.Add("Generator_EventArgName", "PictureUpdateDateChangeEventArg");
                this.columnPictureUpdateDate.ExtendedProperties.Add("User_ColumnName", "PictureUpdateDate");
                base.Columns.Add(this.columnPictureUpdateDate);
                this.columnPictureID.AutoIncrement = true;
                this.columnPictureID.AllowDBNull = false;
                this.columnPictureID.ReadOnly = true;
                this.columnTitle.DefaultValue = ((string)(""));
                this.columnDescription.DefaultValue = ((string)(""));
                this.columnPictureSort.AllowDBNull = false;
                this.columnPictureSort.DefaultValue = ((int)(1));
                this.ExtendedProperties.Add("Generator_RowClassName", "PictureRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "PictureRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "PictureRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "PictureDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Picture");
                this.ExtendedProperties.Add("Generator_TableVarName", "tablePicture");
                this.ExtendedProperties.Add("User_TableName", "Picture");
            }
            
            public PictureRow NewPictureRow() {
                return ((PictureRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PictureRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PictureRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PictureRowChanged != null)) {
                    this.PictureRowChanged(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PictureRowChanging != null)) {
                    this.PictureRowChanging(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PictureRowDeleted != null)) {
                    this.PictureRowDeleted(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PictureRowDeleting != null)) {
                    this.PictureRowDeleting(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePictureRow(PictureRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                PictureDataSet ds = new PictureDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PictureDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void PictureIDChangeEventHandler(PictureDataTable sender, PictureIDChangeEventArg e);
            
            public class PictureIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PictureIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PictureIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void FilenameChangeEventHandler(PictureDataTable sender, FilenameChangeEventArg e);
            
            public class FilenameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public FilenameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn FilenameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PictureDateChangeEventHandler(PictureDataTable sender, PictureDateChangeEventArg e);
            
            public class PictureDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PictureDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PictureDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
            
            public delegate void TitleChangeEventHandler(PictureDataTable sender, TitleChangeEventArg e);
            
            public class TitleChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public TitleChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn TitleColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void DescriptionChangeEventHandler(PictureDataTable sender, DescriptionChangeEventArg e);
            
            public class DescriptionChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public DescriptionChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn DescriptionColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PictureByChangeEventHandler(PictureDataTable sender, PictureByChangeEventArg e);
            
            public class PictureByChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PictureByChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PictureByColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void PictureSortChangeEventHandler(PictureDataTable sender, PictureSortChangeEventArg e);
            
            public class PictureSortChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PictureSortChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PictureSortColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void PictureAddDateChangeEventHandler(PictureDataTable sender, PictureAddDateChangeEventArg e);
            
            public class PictureAddDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PictureAddDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PictureAddDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
            
            public delegate void PictureUpdateDateChangeEventHandler(PictureDataTable sender, PictureUpdateDateChangeEventArg e);
            
            public class PictureUpdateDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PictureUpdateDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public PictureRow Row {
                    get {
                        return ((PictureRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PictureUpdateDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
        }
        
        public class PictureRow : System.Data.DataRow {
            
            private PictureDataTable tablePicture;
            
            internal PictureRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePicture = ((PictureDataTable)(this.Table));
            }
            
            public int PictureID {
                get {
                    return ((int)(this[this.tablePicture.PictureIDColumn]));
                }
                set {
                    this[this.tablePicture.PictureIDColumn] = value;
                }
            }
            
            public string Filename {
                get {
                    try {
                        return ((string)(this[this.tablePicture.FilenameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePicture.FilenameColumn] = value;
                }
            }
            
            public System.DateTime PictureDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePicture.PictureDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePicture.PictureDateColumn] = value;
                }
            }
            
            public string Title {
                get {
                    if (this.IsTitleNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablePicture.TitleColumn]));
                    }
                }
                set {
                    this[this.tablePicture.TitleColumn] = value;
                }
            }
            
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablePicture.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tablePicture.DescriptionColumn] = value;
                }
            }
            
            public int PictureBy {
                get {
                    try {
                        return ((int)(this[this.tablePicture.PictureByColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePicture.PictureByColumn] = value;
                }
            }
            
            public int PictureSort {
                get {
                    return ((int)(this[this.tablePicture.PictureSortColumn]));
                }
                set {
                    this[this.tablePicture.PictureSortColumn] = value;
                }
            }
            
            public System.DateTime PictureAddDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePicture.PictureAddDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePicture.PictureAddDateColumn] = value;
                }
            }
            
            public System.DateTime PictureUpdateDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePicture.PictureUpdateDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tablePicture.PictureUpdateDateColumn] = value;
                }
            }
            
            public bool IsFilenameNull() {
                return this.IsNull(this.tablePicture.FilenameColumn);
            }
            
            public void SetFilenameNull() {
                this[this.tablePicture.FilenameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPictureDateNull() {
                return this.IsNull(this.tablePicture.PictureDateColumn);
            }
            
            public void SetPictureDateNull() {
                this[this.tablePicture.PictureDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTitleNull() {
                return this.IsNull(this.tablePicture.TitleColumn);
            }
            
            public void SetTitleNull() {
                this[this.tablePicture.TitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablePicture.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tablePicture.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPictureByNull() {
                return this.IsNull(this.tablePicture.PictureByColumn);
            }
            
            public void SetPictureByNull() {
                this[this.tablePicture.PictureByColumn] = System.Convert.DBNull;
            }
            
            public bool IsPictureAddDateNull() {
                return this.IsNull(this.tablePicture.PictureAddDateColumn);
            }
            
            public void SetPictureAddDateNull() {
                this[this.tablePicture.PictureAddDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPictureUpdateDateNull() {
                return this.IsNull(this.tablePicture.PictureUpdateDateColumn);
            }
            
            public void SetPictureUpdateDateNull() {
                this[this.tablePicture.PictureUpdateDateColumn] = System.Convert.DBNull;
            }
        }
        
        public class PictureRowChangeEvent : System.EventArgs {
            
            private PictureRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public PictureRowChangeEvent(PictureRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PictureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
