//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace msn2.net.QueuePlayer.Shared {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetMedia")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")]
    public partial class DataSetMedia : System.Data.DataSet {
        
        private MediaDataTable tableMedia;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public DataSetMedia() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        protected DataSetMedia(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Media"] != null)) {
                    base.Tables.Add(new MediaDataTable(ds.Tables["Media"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaDataTable Media {
            get {
                return this.tableMedia;
            }
        }
        
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        public override System.Data.DataSet Clone() {
            DataSetMedia cln = ((DataSetMedia)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Media"] != null)) {
                    base.Tables.Add(new MediaDataTable(ds.Tables["Media"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableMedia = ((MediaDataTable)(base.Tables["Media"]));
            if ((initTable == true)) {
                if ((this.tableMedia != null)) {
                    this.tableMedia.InitVars();
                }
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetMedia";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetMedia.xsd";
            this.EnforceConstraints = true;
            this.tableMedia = new MediaDataTable();
            base.Tables.Add(this.tableMedia);
        }
        
        private bool ShouldSerializeMedia() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetMedia ds = new DataSetMedia();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MediaRowChangeEventHandler(object sender, MediaRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MediaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMediaId;
            
            private System.Data.DataColumn columnMediaFile;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnArtist;
            
            private System.Data.DataColumn columnDuration;
            
            private System.Data.DataColumn columnPlayCount;
            
            private System.Data.DataColumn columnAlbum;
            
            private System.Data.DataColumn columnTrack;
            
            private System.Data.DataColumn columnGenre;
            
            private System.Data.DataColumn columnBitrate;
            
            private System.Data.DataColumn columnComments;
            
            private System.Data.DataColumn columnDateAdded;
            
            private System.Data.DataColumn columnDateUpdated;
            
            private System.Data.DataColumn columnMD5;
            
            public MediaDataTable() {
                this.TableName = "Media";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal MediaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected MediaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn MediaIdColumn {
                get {
                    return this.columnMediaId;
                }
            }
            
            public System.Data.DataColumn MediaFileColumn {
                get {
                    return this.columnMediaFile;
                }
            }
            
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public System.Data.DataColumn ArtistColumn {
                get {
                    return this.columnArtist;
                }
            }
            
            public System.Data.DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            public System.Data.DataColumn PlayCountColumn {
                get {
                    return this.columnPlayCount;
                }
            }
            
            public System.Data.DataColumn AlbumColumn {
                get {
                    return this.columnAlbum;
                }
            }
            
            public System.Data.DataColumn TrackColumn {
                get {
                    return this.columnTrack;
                }
            }
            
            public System.Data.DataColumn GenreColumn {
                get {
                    return this.columnGenre;
                }
            }
            
            public System.Data.DataColumn BitrateColumn {
                get {
                    return this.columnBitrate;
                }
            }
            
            public System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            public System.Data.DataColumn DateAddedColumn {
                get {
                    return this.columnDateAdded;
                }
            }
            
            public System.Data.DataColumn DateUpdatedColumn {
                get {
                    return this.columnDateUpdated;
                }
            }
            
            public System.Data.DataColumn MD5Column {
                get {
                    return this.columnMD5;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public MediaRow this[int index] {
                get {
                    return ((MediaRow)(this.Rows[index]));
                }
            }
            
            public event MediaRowChangeEventHandler MediaRowChanged;
            
            public event MediaRowChangeEventHandler MediaRowChanging;
            
            public event MediaRowChangeEventHandler MediaRowDeleted;
            
            public event MediaRowChangeEventHandler MediaRowDeleting;
            
            public void AddMediaRow(MediaRow row) {
                this.Rows.Add(row);
            }
            
            public MediaRow AddMediaRow(string MediaFile, string Name, string Artist, decimal Duration, int PlayCount, string Album, int Track, string Genre, int Bitrate, string Comments, System.DateTime DateAdded, System.DateTime DateUpdated, string MD5) {
                MediaRow rowMediaRow = ((MediaRow)(this.NewRow()));
                rowMediaRow.ItemArray = new object[] {
                        null,
                        MediaFile,
                        Name,
                        Artist,
                        Duration,
                        PlayCount,
                        Album,
                        Track,
                        Genre,
                        Bitrate,
                        Comments,
                        DateAdded,
                        DateUpdated,
                        MD5};
                this.Rows.Add(rowMediaRow);
                return rowMediaRow;
            }
            
            public MediaRow FindByMediaId(int MediaId) {
                return ((MediaRow)(this.Rows.Find(new object[] {
                            MediaId})));
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                MediaDataTable cln = ((MediaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new MediaDataTable();
            }
            
            internal void InitVars() {
                this.columnMediaId = base.Columns["MediaId"];
                this.columnMediaFile = base.Columns["MediaFile"];
                this.columnName = base.Columns["Name"];
                this.columnArtist = base.Columns["Artist"];
                this.columnDuration = base.Columns["Duration"];
                this.columnPlayCount = base.Columns["PlayCount"];
                this.columnAlbum = base.Columns["Album"];
                this.columnTrack = base.Columns["Track"];
                this.columnGenre = base.Columns["Genre"];
                this.columnBitrate = base.Columns["Bitrate"];
                this.columnComments = base.Columns["Comments"];
                this.columnDateAdded = base.Columns["DateAdded"];
                this.columnDateUpdated = base.Columns["DateUpdated"];
                this.columnMD5 = base.Columns["MD5"];
            }
            
            private void InitClass() {
                this.columnMediaId = new System.Data.DataColumn("MediaId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMediaId);
                this.columnMediaFile = new System.Data.DataColumn("MediaFile", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMediaFile);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnArtist = new System.Data.DataColumn("Artist", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtist);
                this.columnDuration = new System.Data.DataColumn("Duration", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuration);
                this.columnPlayCount = new System.Data.DataColumn("PlayCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayCount);
                this.columnAlbum = new System.Data.DataColumn("Album", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlbum);
                this.columnTrack = new System.Data.DataColumn("Track", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrack);
                this.columnGenre = new System.Data.DataColumn("Genre", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenre);
                this.columnBitrate = new System.Data.DataColumn("Bitrate", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBitrate);
                this.columnComments = new System.Data.DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnDateAdded = new System.Data.DataColumn("DateAdded", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateAdded);
                this.columnDateUpdated = new System.Data.DataColumn("DateUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateUpdated);
                this.columnMD5 = new System.Data.DataColumn("MD5", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMD5);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSetMediaKey1", new System.Data.DataColumn[] {
                                this.columnMediaId}, true));
                this.columnMediaId.AutoIncrement = true;
                this.columnMediaId.AllowDBNull = false;
                this.columnMediaId.ReadOnly = true;
                this.columnMediaId.Unique = true;
            }
            
            public MediaRow NewMediaRow() {
                return ((MediaRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MediaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MediaRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaRowChanged != null)) {
                    this.MediaRowChanged(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaRowChanging != null)) {
                    this.MediaRowChanging(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaRowDeleted != null)) {
                    this.MediaRowDeleted(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaRowDeleting != null)) {
                    this.MediaRowDeleting(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMediaRow(MediaRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetMedia ds = new DataSetMedia();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MediaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        public partial class MediaRow : System.Data.DataRow {
            
            private MediaDataTable tableMedia;
            
            internal MediaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMedia = ((MediaDataTable)(this.Table));
            }
            
            public int MediaId {
                get {
                    return ((int)(this[this.tableMedia.MediaIdColumn]));
                }
                set {
                    this[this.tableMedia.MediaIdColumn] = value;
                }
            }
            
            public string MediaFile {
                get {
                    try {
                        return ((string)(this[this.tableMedia.MediaFileColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaFile\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.MediaFileColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableMedia.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.NameColumn] = value;
                }
            }
            
            public string Artist {
                get {
                    try {
                        return ((string)(this[this.tableMedia.ArtistColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Artist\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.ArtistColumn] = value;
                }
            }
            
            public decimal Duration {
                get {
                    try {
                        return ((decimal)(this[this.tableMedia.DurationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Duration\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.DurationColumn] = value;
                }
            }
            
            public int PlayCount {
                get {
                    try {
                        return ((int)(this[this.tableMedia.PlayCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PlayCount\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.PlayCountColumn] = value;
                }
            }
            
            public string Album {
                get {
                    try {
                        return ((string)(this[this.tableMedia.AlbumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Album\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.AlbumColumn] = value;
                }
            }
            
            public int Track {
                get {
                    try {
                        return ((int)(this[this.tableMedia.TrackColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Track\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.TrackColumn] = value;
                }
            }
            
            public string Genre {
                get {
                    try {
                        return ((string)(this[this.tableMedia.GenreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Genre\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.GenreColumn] = value;
                }
            }
            
            public int Bitrate {
                get {
                    try {
                        return ((int)(this[this.tableMedia.BitrateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Bitrate\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.BitrateColumn] = value;
                }
            }
            
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableMedia.CommentsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comments\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.CommentsColumn] = value;
                }
            }
            
            public System.DateTime DateAdded {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMedia.DateAddedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateAdded\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.DateAddedColumn] = value;
                }
            }
            
            public System.DateTime DateUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMedia.DateUpdatedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateUpdated\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.DateUpdatedColumn] = value;
                }
            }
            
            public string MD5 {
                get {
                    try {
                        return ((string)(this[this.tableMedia.MD5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MD5\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.MD5Column] = value;
                }
            }
            
            public bool IsMediaFileNull() {
                return this.IsNull(this.tableMedia.MediaFileColumn);
            }
            
            public void SetMediaFileNull() {
                this[this.tableMedia.MediaFileColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableMedia.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableMedia.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsArtistNull() {
                return this.IsNull(this.tableMedia.ArtistColumn);
            }
            
            public void SetArtistNull() {
                this[this.tableMedia.ArtistColumn] = System.Convert.DBNull;
            }
            
            public bool IsDurationNull() {
                return this.IsNull(this.tableMedia.DurationColumn);
            }
            
            public void SetDurationNull() {
                this[this.tableMedia.DurationColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlayCountNull() {
                return this.IsNull(this.tableMedia.PlayCountColumn);
            }
            
            public void SetPlayCountNull() {
                this[this.tableMedia.PlayCountColumn] = System.Convert.DBNull;
            }
            
            public bool IsAlbumNull() {
                return this.IsNull(this.tableMedia.AlbumColumn);
            }
            
            public void SetAlbumNull() {
                this[this.tableMedia.AlbumColumn] = System.Convert.DBNull;
            }
            
            public bool IsTrackNull() {
                return this.IsNull(this.tableMedia.TrackColumn);
            }
            
            public void SetTrackNull() {
                this[this.tableMedia.TrackColumn] = System.Convert.DBNull;
            }
            
            public bool IsGenreNull() {
                return this.IsNull(this.tableMedia.GenreColumn);
            }
            
            public void SetGenreNull() {
                this[this.tableMedia.GenreColumn] = System.Convert.DBNull;
            }
            
            public bool IsBitrateNull() {
                return this.IsNull(this.tableMedia.BitrateColumn);
            }
            
            public void SetBitrateNull() {
                this[this.tableMedia.BitrateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommentsNull() {
                return this.IsNull(this.tableMedia.CommentsColumn);
            }
            
            public void SetCommentsNull() {
                this[this.tableMedia.CommentsColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateAddedNull() {
                return this.IsNull(this.tableMedia.DateAddedColumn);
            }
            
            public void SetDateAddedNull() {
                this[this.tableMedia.DateAddedColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateUpdatedNull() {
                return this.IsNull(this.tableMedia.DateUpdatedColumn);
            }
            
            public void SetDateUpdatedNull() {
                this[this.tableMedia.DateUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsMD5Null() {
                return this.IsNull(this.tableMedia.MD5Column);
            }
            
            public void SetMD5Null() {
                this[this.tableMedia.MD5Column] = System.Convert.DBNull;
            }
        }
        
        public class MediaRowChangeEvent : System.EventArgs {
            
            private MediaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public MediaRowChangeEvent(MediaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MediaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
