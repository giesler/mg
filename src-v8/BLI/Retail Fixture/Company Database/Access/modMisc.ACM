Option Compare Database
Option Explicit

Public curPrintMode As Long
Public bolForceCust As Boolean

Public Function SplitPO(txtIn As String) As String

  If InStr(txtIn, "/") Then
    SplitPO = Left(txtIn, InStr(txtIn, "/")) & vbCrLf & Right(txtIn, Len(txtIn) - InStr(txtIn, "/"))
  Else
    SplitPO = txtIn
  End If

End Function

Public Function PrintReports()

Dim fR As New Form_fmuReports, rptView As Integer

Pause fR

If fR.bolCancel Then
    Set fR = Nothing
    Exit Function
End If

If fR.bolPrintPreview Then
    rptView = acViewPreview
Else
    rptView = acViewNormal
End If

' TAB - INVENTORY REPORTS
If fR.chkCurrentInventory Then RunPrint "rptCurrentInventory", rptView
If fR.chkCurrentInventoryAmt Then RunPrint "rptCurrentInventoryAmt", rptView
If fR.chkProductCatalog Then RunPrint "rptProductCatalog", rptView
If fR.chkCurrentBuildSummary Then RunPrint "rptCurrentBuildSummary", rptView

' TAB - SHIPMENT REPORTS
If fR.chkShipmentSchedule Then RunPrint "rptShipmentSchedule", rptView
If fR.chkShipmentScheduleAmt Then RunPrint "rptShipmentScheduleAmt", rptView
If fR.chkShipmentScheduleVia Then RunPrint "rptShipmentScheduleShipVia", rptView
If fR.chkShipmentScheduleWheat Then RunPrint "rptShipmentScheduleWheat", rptView
If fR.chkCustShipmentSchedule Then RunPrint "rptCustShipmentSchedule", rptView
If fR.chkShipmentSummary Then RunPrint "rptShipmentSummary", rptView

' TAB - SALES REPORTS
If fR.chkTotalSalesByClass Then RunPrint "rptTotalSalesByClass", rptView
If fR.chkTotalSalesOverTime Then RunPrint "rptTotalSalesOverTime", rptView
If fR.chkTotalSalesOverTimeGraph Then RunPrint "rptTotalSalesOverTimeGraph", rptView
If fR.chkInvoiceSummary Then RunPrint "rptInvoiceSummary", rptView
If fR.chkWisconsinTaxes Then RunPrint "rptWisconsinTaxes", rptView

' TAB - ORDERS REPORTS
If fR.chkIncompletePOs Then RunPrint "rptIncompletePOs", rptView
If fR.chkMaintOrders Then RunPrint "rptMaintOrders", rptView
If fR.chkHotOrders Then RunPrint "rptHotOrders", rptView
If fR.chkGapOrderConf Then RunPrint "rptGapOrderConf", rptView
If fR.chkPOsByJobNo Then RunPrint "rptPOsByJobNo", rptView
If fR.chkOutstandingPOs Then RunPrint "rptOutstandingPOs", rptView

' TAB - OTHER REPORTS
If fR.chkPOSummary Then
    Dim fCT As New Form_fctPOSummary
    fCT.Visible = True
    Pause fCT
    Set fCT = Nothing
End If
If fR.chkCashwrapShipments Then
    Dim fCT2 As New Form_fctCashwraps
    fCT2.Visible = True
    Pause fCT2
    Set fCT2 = Nothing
End If
If fR.chkCashwrapFisher Then
    Dim fCT3 As New Form_fctCashwrapsFisher
    fCT3.Visible = True
    Pause fCT3
    Set fCT3 = Nothing
End If
If fR.chkBlanketPOSummary Then
  Dim fCT4 As New Form_fctBlanketPOSummary
  Pause fCT4
  Set fCT4 = Nothing
End If
If fR.chkCashwrapShipInfo Then
  Dim fct5 As New Form_fctCashwrapsFisher2
  Pause fct5
  Set fct5 = Nothing
End If
If fR.chkShippingSchedule Then
  Dim fCT6 As New Form_fctShippingSchedule
  Pause fCT6
  Set fCT6 = Nothing
End If

Set fR = Nothing

End Function

Public Function RunPrint(rptName As String, rptView As Integer)
On Error GoTo RunPrint_Err

DoCmd.OpenReport rptName, acViewPreview

If rptView <> acViewNormal Then
  While (SysCmd(acSysCmdGetObjectState, acReport, rptName) = acObjStateOpen)
    DoEvents
  Wend
Else
  DoCmd.RunCommand acCmdPrint
  DoCmd.Close acReport, rptName
End If

Exit Function
RunPrint_Err:
Select Case Err
  Case 2501       'report opening cancelled
    DoCmd.Close acReport, rptName
    Exit Function
  Case Else
    ErrHand "modMisc", "RunPrint - " & rptName
    Exit Function
End Select

End Function

Public Function PrintInvoice(intID As Long, View As Integer) As Boolean
On Error GoTo PrintInvoices_Err

Dim strPrinter As String, strReportName As String

PrintInvoice = False

Call PrivIniRegister("RFC Database", GetDBDir & "database.ini")
strPrinter = PrivGetString("InvoicePrinter", "Panasonic KX-P2124")
strReportName = DLookup("InvoiceReportName", "ztblInvoicePrinters", "PrinterName = '" & strPrinter & "'")
SetSPVar "InvoiceID", intID
DoCmd.OpenReport strReportName, View

PrintInvoice = True
Exit Function

PrintInvoices_Err:
Select Case Err
    Case 2501   'report opening cancelled
        Exit Function
    Case Else
        ErrHand "modMisc", "PrintInvoice"
        Exit Function
End Select

End Function

Public Function OpenFind(Optional txtField As Variant, Optional txtMatch As Variant, Optional txtSetFocus As Variant)
On Error Resume Next

  ' Set focus on txtSetFocus if possible
  If Not IsMissing(txtSetFocus) Then
    Screen.ActiveForm(txtSetFocus).SetFocus
  End If
  
  DoCmd.Close acForm, "fdlgFind"
  DoCmd.OpenForm "fdlgFind"
  
  If Not IsMissing(txtMatch) Then
    Select Case txtMatch
      Case "Whole"
        Forms!fdlgFind!comMatch = "Whole Field"
      Case "Any"
        Forms!fdlgFind!comMatch = "Any Part of Field"
      Case "Start"
        Forms!fdlgFind!comMatch = "Start of Field"
      Case "End"
        Forms!fdlgFind!comMatch = "End of Field"
      Case Else
        MsgBox "The match setting '" & txtMatch & "' was not recognized by OpenFind.", vbExclamation
    End Select
  End If
  
  If Not IsMissing(txtField) Then
    Forms!fdlgFind.Caption = "Find " & txtField
  End If

End Function

Public Function CloseFind()
On Error Resume Next

  DoCmd.Close acForm, "fdlgFind"

End Function