Option Explicit

Function CBToolbarShow(strCBarName As String, _
                        blnVisible As Boolean, _
                        Optional lngPosition As Long = msoBarTop) As Boolean
                        
    ' This procedure displays or hides the command bar specified in the
    ' strCBarName argument according to the value of the blnVisible
    ' argument. The optional lngPosition argument specifies where the
    ' command bar will appear on the screen.
    
    Dim cbrCmdBar As CommandBar
        
    On Error GoTo CBToolbarShow_Err
    
    Set cbrCmdBar = Application.CommandBars(strCBarName)
    
    ' Show only toolbars.
    If cbrCmdBar.Type > msoBarTypeNormal Then
        CBToolbarShow = False
        Exit Function
    End If
    ' If Position argument is invalid, set to the default
    ' msoBarTop position.
    If lngPosition < msoBarLeft Or lngPosition > msoBarMenuBar Then
        lngPosition = msoBarTop
    End If
    
    With cbrCmdBar
        .Visible = blnVisible
        .Position = lngPosition
    End With
    
    CBToolbarShow = True

CBToolbarShow_End:
    Exit Function
CBToolbarShow_Err:
    CBToolbarShow = False
    Resume CBToolbarShow_End
End Function
Function CBMenuBarShow(strCBarName As String) As Boolean
    ' This procedure shows the menu bar specified in the strCBarName
    ' argument. If the command bar specified in strCBarName is not a
    ' menu bar or is not a valid command bar name, the procedure returns
    ' False.
    
    Dim cbrCBarMenu As CommandBar
    
    On Error GoTo CBMenuBarShow_Err
    Set cbrCBarMenu = Application.CommandBars(strCBarName)
    If cbrCBarMenu.Type <> msoBarTypeMenuBar Then
        CBMenuBarShow = False
        Exit Function
    End If
    
    With cbrCBarMenu
        .Visible = True
    End With
    CBMenuBarShow = True
CBMenuBarShow_End:
    Exit Function
CBMenuBarShow_Err:
    CBMenuBarShow = False
    Resume CBMenuBarShow_End
End Function
Function CBDeleteCommandBar(strCBarName As String) As Boolean
    ' Delete the command bar specified by strCBarName. If the
    ' command bar does not exist, an error will occur and that
    ' error is ignored here.
    
    On Error Resume Next
    Application.CommandBars(strCBarName).Delete
End Function
Function CBGetControlID(strCBarName As String, _
                        strControlCaption As String) As Long
                        
    ' This procedure returns the ID property value for the
    ' control specified by strControlCaption located on the
    ' command bar strCBarName.
    
    CBGetControlID = Application.CommandBars(strCBarName) _
        .Controls(strControlCaption).ID
End Function
Function CBCopyCommandBar(strOrigCBName As String, _
                          strNewCBName As String, _
                          Optional blnShowBar As Boolean = False) As Boolean
                        
    ' This procedure copies the command bar named in the strOrigCBName
    ' argument to a new command bar specified in the strNewCBName argument.
    
    Dim cbrOriginal         As CommandBar
    Dim cbrCopy             As CommandBar
    Dim ctlCBarControl      As CommandBarControl
    Dim lngBarType          As Long
    
    On Error GoTo CBCopy_Err
    
    Set cbrOriginal = CommandBars(strOrigCBName)
    
    lngBarType = cbrOriginal.Type
    Select Case lngBarType
        Case msoBarTypeMenuBar
            Set cbrCopy = CommandBars.Add(Name:=strNewCBName, Position:=msoBarMenuBar)
        Case msoBarTypePopup
            Set cbrCopy = CommandBars.Add(Name:=strNewCBName, Position:=msoBarPopup)
        Case Else
            Set cbrCopy = CommandBars.Add(Name:=strNewCBName)
    End Select
        
    ' Copy controls to new command bar.
    For Each ctlCBarControl In cbrOriginal.Controls
        ctlCBarControl.Copy cbrCopy
    Next ctlCBarControl
    
    ' Show new command bar.
    If blnShowBar = True Then
        If cbrCopy.Type = msoBarTypePopup Then
            cbrCopy.ShowPopup
        Else
            cbrCopy.Visible = True
        End If
    End If
    CBCopyCommandBar = True
CBCopy_End:
    Exit Function
CBCopy_Err:
    CBCopyCommandBar = False
    Resume CBCopy_End
End Function
Function CBCreateCommandBar(strCBarName As String, _
                            Optional lngBarType As Long = 0) As CommandBar
                            
    ' This procedure creates a command bar of the type
    ' specified in the lngBarType argument. The default
    ' command bar type is a toolbar.
                            
    Dim cbrCmdBar   As CommandBar
    Dim strBarType  As String
    Dim lngPosition As Long
    
    On Error Resume Next
    Set cbrCmdBar = Application.CommandBars(strCBarName)
    If Err = 0 Then
        ' The command bar already exists.
        If cbrCmdBar.BuiltIn = True Then
            CBCreateCommandBar = False
            Exit Function
        End If
        
        strBarType = CBGetCBType(cbrCmdBar)
        
        If MsgBox("'" & strCBarName & "' is an existing " & strBarType _
            & " type command bar. Are you sure you want to delete it?", vbYesNo, _
            "Replace Existing Command Bar?") = vbNo Then
            CBCreateCommandBar = False
            Exit Function
        Else
            cbrCmdBar.Delete
            Set cbrCmdBar = Nothing
        End If
    Else
        ' The command bar does not exist, so reset the error number to zero
        ' and create the new command bar.
        Err = 0
    End If
    If lngBarType <> msoBarMenuBar And lngBarType <> msoBarPopup Then
        lngBarType = msoBarTypeNormal
    End If
    
    Select Case lngBarType
        Case msoBarTypeNormal
            Set cbrCmdBar = Application.CommandBars.Add(Name:=strCBarName)
        Case msoBarMenuBar
            Set cbrCmdBar = Application.CommandBars.Add(Name:=strCBarName, Position:=msoBarMenuBar) ', , 'True)
        Case msoBarPopup
            Set cbrCmdBar = Application.CommandBars.Add(Name:=strCBarName, Position:=msoBarPopup)
    End Select
    
    Set CBCreateCommandBar = cbrCmdBar
End Function
Function CBPopupBarShow(strBarName As String) As Boolean
    ' This procedure is displays the popup menu
    ' specified by strBarName.
    
    Dim cbrPopup As CommandBar
    
    On Error Resume Next
    
    Set cbrPopup = CommandBars(strBarName)
    
    If cbrPopup.Type <> msoBarTypePopup Then
        CBPopupBarShow = False
        Exit Function
    End If
    
    cbrPopup.ShowPopup
    
    CBPopupBarShow = True
End Function
Function PrintAllCBarInfo()
    ' This procedure prints (to the Debug window)
    ' information about each command bar in the
    ' application and every control on each command bar.
    
    Dim cbrBar As CommandBar
    
    For Each cbrBar In Application.CommandBars
        CBPrintCBarInfo (cbrBar.Name)
    Next cbrBar
End Function
Function CBPrintCBarInfo(strCBarName As String) As Variant
    ' This procedure prints (to the Debug window) information
    ' about the command bar specified in the strCBarName argument
    ' and information about each control on that command bar.
    
    Dim cbrBar                      As CommandBar
    Dim ctlCBarControl              As CommandBarControl
    Const ERR_INVALID_CMDBARNAME    As Long = 5
    
    On Error GoTo CBPrintCBarInfo_Err
    
    Set cbrBar = Application.CommandBars(strCBarName)
    
    Debug.Print "CommandBar: " & cbrBar.Name & vbTab & "(" _
        & CBGetCBType(cbrBar) & ")" & vbTab & "(" _
        & IIf(cbrBar.BuiltIn, "Built-in", "Custom") & ")"
    For Each ctlCBarControl In cbrBar.Controls
        Debug.Print vbTab & ctlCBarControl.Caption & vbTab & "(" _
            & CBGetCBCtlType(ctlCBarControl) & ")"
    Next ctlCBarControl

CBPrintCBarInfo_End:
    Exit Function
CBPrintCBarInfo_Err:
    Select Case Err.Number
        Case ERR_INVALID_CMDBARNAME
            CBPrintCBarInfo = "'" & strCBarName & _
                "' is not a valid command bar name!"
        Case Else
            CBPrintCBarInfo = "Error: " & Err.Number _
                & " - " & Err.Description
    End Select
    Resume CBPrintCBarInfo_End
End Function
Function CBGetCBType(cbrBar As CommandBar) As String
    ' Returns a string representing the command bar type.
    
    Dim strCBType As String
    
    Select Case cbrBar.Type
        Case msoBarTypeNormal
            strCBType = "Toolbar"
        Case msoBarTypeMenuBar
            strCBType = "Menu bar"
        Case msoBarTypePopup
            strCBType = "Popup menu"
    End Select
    CBGetCBType = strCBType
End Function
Function CBGetCBCtlType(ctlCBarControl As CommandBarControl) As String
    ' Returns a string representing the command bar control's type.
    
    Dim strType As String
    
    Select Case ctlCBarControl.Type
        Case msoControlCustom
            strType = "Custom"
        Case msoControlButton
            strType = "Button"
        Case msoControlEdit
            strType = "Edit"
        Case msoControlDropdown
            strType = "Dropdown"
        Case msoControlComboBox
            strType = "Combobox"
        Case msoControlButtonDropdown
            strType = "ButtonDropdown"
        Case msoControlSplitDropdown
            strType = "SplitDropdown"
        Case msoControlOCXDropdown
            strType = "OCXDropdown"
        Case msoControlGenericDropdown
            strType = "GenericDropdown"
        Case msoControlGraphicDropdown
            strType = "GraphicDropdown"
        Case msoControlPopup
            strType = "Popup"
        Case msoControlGraphicPopup
            strType = "GraphicPopup"
        Case msoControlButtonPopup
            strType = "ButtonPopup"
        Case msoControlSplitButtonPopup
            strType = "SplitButtonPopup"
        Case msoControlSplitButtonMRUPopup
            strType = "SplitButtonMRUPopup"
        Case msoControlLabel
            strType = "Label"
        Case msoControlExpandingGrid
            strType = "ExpandingGrid"
        Case msoControlSplitExpandingGrid
            strType = "SplitExpandingGrid"
        Case msoControlGrid
            strType = "Grid"
        Case msoControlGauge
            strType = "Gauge"
        Case msoControlGraphicCombo
            strType = "GraphicCombo"
        Case msoControlPane
            strType = "Pane"
    End Select
    CBGetCBCtlType = strType
End Function
Function CBShowButtonFaceIDs(lngIDStart As Long, _
                             lngIDStop As Long)
    ' This procedure creates a toolbar with buttons that display the
    ' images associated with the values starting at lngIDStart and
    ' ending at lngIDStop.
    
    Dim cbrNewToolbar   As CommandBar
    Dim cmdNewButton    As CommandBarButton
    Dim intCntr         As Integer
    
    ' If the ShowFaceIds toolbar exists then delete it.
    On Error Resume Next
    Application.CommandBars("ShowFaceIds").Delete
    
    ' Create a new toolbar.
    Set cbrNewToolbar = Application.CommandBars.Add _
        (Name:="ShowFaceIds", temporary:=True)
    
    ' Create a new button with an image matching the FaceId property value
    ' indicated by intCntr.
    For intCntr = lngIDStart To lngIDStop
        Set cmdNewButton = cbrNewToolbar.Controls.Add(Type:=msoControlButton)
        With cmdNewButton
            ' Setting the FaceId property value specifies the appearance
            ' but not the functionality of the button.
            .FaceId = intCntr
            .TooltipText = "FaceId = " & intCntr
        End With
    Next intCntr
    
    ' Show the images on the toolbar.
    With cbrNewToolbar
        .Width = 600
        .Left = 100
        .Top = 200
        .Visible = True
    End With
End Function
Function CBCopyControlFace(strCBarName As String, _
                           strCtlCaption As String)
                            
    ' This procedure uses the CopyFace method to copy the image associated
    ' with the control specified in the strCtlCaption argument to the Clipboard.
    
    Dim ctlCBarControl As CommandBarControl
    
    Set ctlCBarControl = CommandBars.FindControl(msoControlButton, _
        CBGetControlID(strCBarName, strCtlCaption))
    ctlCBarControl.CopyFace
End Function
Private Sub CBCopyIconDemo()
    ' This procedure demonstrates how to copy the image associated
    ' with a known toolbar button to a new toolbar button. This example
    ' copies the image associated with the "Contents and Index" control
    ' on the Help menu to a new command bar control.
    
    Dim cbrNew              As CommandBar
    Dim ctlNew              As CommandBarControl
    Const ERR_CMDBAR_EXISTS As Long = 5
    
    On Error Resume Next
    Set cbrNew = CommandBars.Add("TestCopyFaceIcon")
    If Err = ERR_CMDBAR_EXISTS Then
        Call CBDeleteCommandBar("TestCopyFaceIcon")
        Set cbrNew = CommandBars.Add("TestCopyFaceIcon")
    ElseIf Err <> 0 Then
        Exit Sub
    End If
    On Error GoTo 0
    Set ctlNew = cbrNew.Controls.Add(msoControlButton)
    Call CBCopyControlFace("Tools", "Spelling...")
    
    With ctlNew
        .PasteFace
    End With
    cbrNew.Visible = True
End Sub
Function CBAddMenu(strCBarName As String, _
                   strMenuName As String) As CommandBarControl
                    
    ' Add the menu named in strMenuName to the
    ' command bar named in strCBarName.
    
    Dim cbrBar As CommandBar
    Dim ctlCBarControl As CommandBarControl
    
    On Error Resume Next
    Set cbrBar = CommandBars(strCBarName)
    If Err <> 0 Then
        Set cbrBar = CommandBars.Add(strCBarName)
        Err = 0
    End If
    
    With cbrBar
        Set ctlCBarControl = .Controls.Add(msoControlPopup)
        ctlCBarControl.Caption = strMenuName
    End With
    Set CBAddMenu = ctlCBarControl
End Function


Function CBAddMenuControl(cbrMenu As CommandBarControl, _
                          strCaption As String, _
                          strOnAction As String) As Boolean
                          
    ' Add a button control to the menu specified in cbrMenu and set
    ' its Caption and OnAction properties to the values specified in
    ' the strCaption and strOnAction arguments.
    
    Dim ctlCBarControl As CommandBarControl
    
    With cbrMenu
        Set ctlCBarControl = .Controls.Add(msoControlButton)
        With ctlCBarControl
            .Caption = strCaption
            .OnAction = strOnAction
            .Tag = .Caption
        End With
    End With
End Function

Function CBAddComboBox(cbrMenu As CommandBarControl, _
                          strCaption As String, _
                          strOnAction As String) As Boolean
                          
    ' Add a button control to the menu specified in cbrMenu and set
    ' its Caption and OnAction properties to the values specified in
    ' the strCaption and strOnAction arguments.
    
    Dim ctlCBarControl As CommandBarControl
    
    With cbrMenu
        Set ctlCBarControl = .Controls.Add(msoControlEdit)
        With ctlCBarControl
            .Caption = strCaption
            .OnAction = strOnAction
            .Tag = .Caption
        End With
    End With
End Function


Function CBAddBuiltInControl(cbrDestBar As CommandBar, _
                             strCBarSource As String, _
                             strCtlCaption As String) As Boolean
                             
    ' This procedure adds the built-in control specified in
    ' strCtlCaption from the strCBarSource command bar to the
    ' command bar specified by cbrDestBar.
    
    On Error GoTo CBAddBuiltInControl_Err
    
    If CBDoesCBExist(strCBarSource) <> True Then
        CBAddBuiltInControl = False
        Exit Function
    End If
    
    cbrDestBar.Controls.Add ID:=CBGetControlID(strCBarSource, strCtlCaption)
    CBAddBuiltInControl = True
    
CBAddBuiltInControl_End:
    Exit Function
CBAddBuiltInControl_Err:
    CBAddBuiltInControl = False
    Resume CBAddBuiltInControl_End
End Function
Private Sub CBAddBuiltInCtlDemo()
    ' This procedure creates a new command bar and calls the
    ' CBAddBuiltInControl procedure to add the named control
    ' from the named command bar to the new command bar.
    
    Dim ctlCBar As CommandBar
    
    Set ctlCBar = CommandBars.Add("MyTestBar")
    ctlCBar.Visible = True
    
    Call CBAddBuiltInControl(ctlCBar, "Form View", "Save")
    Call CBAddBuiltInControl(ctlCBar, "Form View", "Spelling...")
    Call CBAddBuiltInControl(ctlCBar, "Print Preview", "Database Window")
    Call CBAddBuiltInControl(ctlCBar, "Filter/Sort", "Microsoft Access Help")
    
    ' You should see the specified controls on the MyTestBar
    ' command bar. To contine executing this procedure to remove
    ' the command bar, press F5.
    Stop
    
    Call CBDeleteCommandBar("MyTestBar")
End Sub
Function CBCtlToggleEnabled(strCBarName As String, _
                            strCtlCaption As String) As Boolean
                            
    ' Toggle the Enabled property of the strCtlCaption control
    ' on the strCBarName command bar.
    
    Dim ctlCBarControl As CommandBarControl
    
    On Error Resume Next
    
    Set ctlCBarControl = Application.CommandBars(strCBarName).Controls(strCtlCaption)
    ctlCBarControl.Enabled = Not ctlCBarControl.Enabled
    If Err = 0 Then
        CBCtlToggleEnabled = True
    Else
        CBCtlToggleEnabled = False
    End If
End Function
Function CBCtlToggleVisible(strCBarName As String, _
                            strCtlCaption As String) As Boolean
                            
    ' Toggle the Visible property of the strCtlCaption control
    ' on the strCBarName command bar.
    
    Dim ctlCBarControl As CommandBarControl
    
    On Error Resume Next
    
    Set ctlCBarControl = Application.CommandBars(strCBarName).Controls(strCtlCaption)
    ctlCBarControl.Visible = Not ctlCBarControl.Visible
    If Err = 0 Then
        CBCtlToggleVisible = True
    Else
        CBCtlToggleVisible = False
    End If
End Function
Function CBCtlToggleState(strCBarName As String, _
                          strCtlCaption As String) As Boolean
                            
    ' Toggle the State property of the strCtlCaption control
    ' on the strCBarName command bar. The State property is
    ' read-only for built-in controls, so if strCtlCaption
    ' is a built-in control, return False and exit the procedure.
    
    Dim ctlCBarControl As CommandBarControl
    
    On Error Resume Next
    
    Set ctlCBarControl = Application.CommandBars(strCBarName).Controls(strCtlCaption)
    
    If ctlCBarControl.BuiltIn = True Then
        CBCtlToggleState = False
        Exit Function
    End If
    
    If ctlCBarControl.Type <> msoControlButton Then
        CBCtlToggleState = False
        Exit Function
    End If
    
    ctlCBarControl.State = Not ctlCBarControl.State
    
    If Err = 0 Then
        CBCtlToggleState = True
    Else
        CBCtlToggleState = False
    End If
                            
End Function

Function CBDeleteCBControl(strCBarName As String, _
                           strCtlName As String)
                           
    On Error Resume Next
    Application.CommandBars(strCBarName).Controls(strCtlName).Delete
End Function
Function CBCtlEnabled(ctlCBarControl As CommandBarControl, _
                      blnEnabled As Boolean)
                      
    ctlCBarControl.Enabled = blnEnabled
End Function
Private Sub CBTestAddMenuDemo()
    Dim strCBarName As String
    Dim strMenuName As String
    Dim cbrMenu     As CommandBarControl
    Dim cbrMenuCtl  As CommandBarControl
    
    strCBarName = "MyTestCBar"
    strMenuName = "Menu1"
    Set cbrMenu = CBAddMenu(strCBarName, strMenuName)
    Call CBAddMenuControl(cbrMenu, "Menu1Control1", "=MsgBox('You selected Menu1 Control 1.')")
    Call CBAddMenuControl(cbrMenu, "Menu1Control2", "=MsgBox('You selected Menu1 Control 2.')")
    
    strMenuName = "Menu2"
    Set cbrMenu = CBAddMenu(strCBarName, strMenuName)
    Call CBAddMenuControl(cbrMenu, "Menu2Control1", "=MsgBox('You selected Menu2 Control 1.')")
    Call CBAddMenuControl(cbrMenu, "Menu2Control2", "=MsgBox('You selected Menu2 Control 2.')")
    
    strMenuName = "Menu3"
    Set cbrMenu = CBAddMenu(strCBarName, strMenuName)
    Call CBAddMenuControl(cbrMenu, "Menu3Control1", "=MsgBox('You selected Menu3 Control 1.')")
    Call CBAddMenuControl(cbrMenu, "Menu3Control2", "=MsgBox('You selected Menu3 Control 2.')")
    
    strMenuName = "Menu4"
    Set cbrMenu = CBAddMenu(strCBarName, strMenuName)
    Call CBAddMenuControl(cbrMenu, "Menu4Control1", "=MsgBox('You selected Menu4 Control 1.')")
    Call CBAddMenuControl(cbrMenu, "Menu4Control2", "=MsgBox('You selected Menu4 Control 2.')")
    
    CommandBars(strCBarName).Visible = True
    Stop
    
    ' Disable menus 2 through 3 and Menu1Control2 on Menu1.
    Call CBCtlEnabled(CommandBars(strCBarName).Controls("Menu2"), False)
    Call CBCtlEnabled(CommandBars(strCBarName).Controls("Menu3"), False)
    Call CBCtlEnabled(CommandBars(strCBarName).Controls("Menu4"), False)
    Call CBCtlEnabled(CommandBars(strCBarName).Controls("Menu1").Controls("Menu1Control2"), False)
    Stop
    Call CBDeleteCommandBar(strCBarName)
    Stop
    ' Add a submenu as the last control on the Menu Bar's Edit menu.
    strCBarName = "Edit"
    strMenuName = "MyNewMenuItem"
    Set cbrMenu = CBAddMenu(strCBarName, strMenuName)
    Call CBAddMenuControl(cbrMenu, "Menu1Control1", "=MsgBox('You selected Menu1 Control 1.')")
    Call CBAddMenuControl(cbrMenu, "Menu1Control2", "=MsgBox('You selected Menu1 Control 2.')")
    Stop
    Call CBDeleteCBControl(strCBarName, strMenuName)
End Sub

Function CBDoesCBExist(strCBarName As String) As Boolean

    Dim cbrBar As CommandBar
    
    On Error Resume Next
    
    Set cbrBar = CommandBars(strCBarName)
    If Err = 0 Then
        CBDoesCBExist = True
    Else
        CBDoesCBExist = False
    End If
End Function
Private Sub CBAddMenuDemo()
    ' Illustrates adding a new menu and filling it with controls. Also
    ' illustrates deleting a menu control from a menu bar.
    '
    ' In Microsoft Excel, the main menu bar is named "Worksheet Menu Bar"
    ' rather than "Menu Bar".
    
    Dim strCBarName As String
    Dim strMenuName As String
    Dim cbrMenu     As CommandBarControl
    
    strCBarName = "Menu Bar"
    strMenuName = "Custom Menu Demo"
    
    Set cbrMenu = CBAddMenu(strCBarName, strMenuName)
    
    ' Note: The following use of the MsgBox function in
    ' the OnAction property setting will work only with
    ' command bars in Microsoft Access. In the other Office
    ' applications, you call built-in VBA functions for the
    ' OnAction property setting. To call a built-in VBA
    ' function from a command bar control in the other Office
    ' applications, you must create a custom procedure that
    ' uses the VBA function and call that custom procedure
    ' in the OnAction property setting.
    Call CBAddMenuControl(cbrMenu, "Item 1", _
        "=MsgBox('You selected Menu1 Control 1.')")
    Call CBAddMenuControl(cbrMenu, "Item 2", _
        "=MsgBox('You selected Menu1 Control 2.')")
    Call CBAddMenuControl(cbrMenu, "Item 3", _
        "=MsgBox('You selected Menu1 Control 3.')")
    
    ' The menu should now appear to the right of the
    ' Help menu on the menu bar. To see how to delete
    ' a menu from a menu bar, press F8 to step through
    ' the remaining code.
    Stop
    Call CBDeleteCBControl(strCBarName, strMenuName)
End Sub

Function SetPersonalizedMenuState(blnState As Boolean, _
                                  Optional cbrBar As CommandBar = Nothing)
    ' This procedure sets the AdaptiveMenus property to the value
    ' of the blnState argument. If a CommandBar object is supplied
    ' in the cbrBar argument, the AdaptiveMenu property for that
    ' command bar is set to the value of the blnState argument.
    On Error Resume Next
    If cbrBar Is Nothing Then
        Application.CommandBars.AdaptiveMenus = blnState
    Else
        cbrBar.AdaptiveMenu = blnState
    End If
End Function

Function PromoteMenuItem(cbrBar As CommandBar, _
                         strItemCaption As String)
    ' This procedure changes the Priority property setting for
    ' the cbrBar command bar control whose Caption property setting
    ' matches the value of the the strItemCaption argument.
    Dim ctlMenuItem As CommandBarControl

    On Error Resume Next
    If cbrBar.AdaptiveMenu = False Then Exit Function
    Set ctlMenuItem = cbrBar.Controls(strItemCaption)
    With ctlMenuItem
        If .Priority <> 1 Then
            .Priority = 1
        End If
    End With
End Function

Sub AllowCommandBarCustomization(blnAllowEnabled As Boolean)
    ' This procedure allows or prevents access to the
    ' command bars Customize dialog box according to the
    ' value of the blnAllowEnabled argument.
    CommandBars("Tools").Controls("Customize...").Enabled = blnAllowEnabled
    CommandBars("Toolbar List").Enabled = blnAllowEnabled
End Sub