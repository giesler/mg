<head>
<title>NSIS</title>
</head>
<body>
<h2>NSIS</h2>
<h3>table of contents</h3>
<ul>
<li><a href="#features">NSIS features</a>
<li><a href="#usage">MakeNSIS usage</a>
<li><a href="#script_format">NSIS .nsi script format</a><ul>
    <li><a href="#headconfig">header configuration commands</a>
    <li><a href="#licconfig">license page configuration commands</a>
    <li><a href="#compconfig">component page configuration commands</a>
    <li><a href="#dirconfig">directory page configuration commands</a>
    <li><a href="#instconfig">install page configuration commands</a>
    <li><a href="#execcommands">installation execution commands</a>
    <li><a href="#compilerutil">compiler utility commands</a>
    <li><a href="#CBFuncs">callback functions</a>
    <li><a href="#V">variables</a>
  </ul>
<li><a href="#version">version history</a>
<li><a href="#build">building notes</a>
<li><a href="#license">license</a>
</ul>

<a name="features"><h3>features</h3>
<ul>
<li>SuperPiMP<sup>tm</sup> technology (so advanced, so amazing, we won't even tell you what it is).
<li>Generates self contained, win32 executable installer.
<li>Uninstall support (installer can automagically generate an uninstaller)
<li>Optional installer self-verification (using zlib's adler32)
<li>Robust, efficient zlib-based compression (zlib is a wonderful free compression library by Jean-loup Gailly and Mark Adler)
<li>Approximately 36k overhead over compressed data size.
<li>Experimental ZIP->EXE converter.
<li>Support for external EXE packers to pack the header (see <a href="#packexeheader">!packhdr</a>)
<li>Ability to display a license agreement.
<li>Ability to detect destination directory from the registry, and let the user override (or not let them)
<li>Customizable icon and checkmark bitmaps.
<li>Up to 8 install configurations (usually Minimal, Typical, Full), and custom configuration
<li>Support for user defined functions (in both installer and uninstaller)
<li>Sexy generated installers now with or without the BGBG (Big Gay Blue Gradient).
<li>Installers can be as large as 2GB (theoretically)
<li>No practical limit on number of install sections.
<li>Low memory/resource requirements.
<li>Very fast and efficient.
<li>Easily generated from a script using included compiler
<li>Optional Silent mode for automated installations
<li>Optional installation logging for debug purposes (not compiled in by default, you have to change config.h to enable)
<li>Optional Winamp plug-in directory detection.
<li>Many scriptable install functions including: <ul>
     <li>File extraction (with configurable overwrite parameters)
     <li>ActiveX control registration/deregistration
     <li>Netscape plug-in installation/deinstallation
     <li>File/directory deletion
     <li>Executable execution (shell execute and wait options)
     <li>Registry key setting/deleting
     <li>INI file writing
     <li>Shortcut creation
     <li>Window finding based on class name (for is-application-running detection)
     <li>User interaction with flow control using MessageBox().
     <li>File copying for copying from source media (for large installations)
     <li>Installer behaviour commands (such as show/hide/wait/etc)
     <li>More
   </ul>
<li>Completely free for any use. <A href="#build">Source</a> included. See <a href="#license">license</a>.
</ul>
<a name="usage"><h3>MakeNSIS usage</h3>
NSIS installers are generated by using the 'MakeNSIS' program to compile a <a href="#script_format">NSIS script (.NSI)</a> into an installer executable.
The syntax of the makensis command is:<UL>
<a name="slashdefine">
Makensis [/LICENSE] [/PAUSE] [/NOCONFIG] [/CMDHELP [command]] [/Ddefine ...] [Script.nsi | -]
<ul>
<li>/LICENSE displays you a keen license page.
<li>/PAUSE makes Makensis pause before quitting, which is useful for if you execute it directly from Windows (the auto-installed shell extensions use it).
<li>/NOCONFIG disables inclusion of [path to makensis.exe]\nsisconf.nsi . Without this parameter, installer defaults are set from nsisconf.nsi. See <a href="#nsisconf">NSIS Configuration File</a>.
<li>/CMDHELP prints basic usage information for command (if specified), or all commands (if command is not specified).
<li>Using the /D switch one or more times will let you add to the globally defined list (See <a href="#bangdefine">!define</a>). 
<li>Specifying a dash (-) for the script name will tell Makensis to use the standard input as a source.
</UL>
</ul>
Note that the NSIS development kit installer may have set up your computer so that you can compile a .nsi file by simply right-clicking on it in explorer, and selecting 'compile'.


<a name="script_format"><h3>NSIS .nsi script format</h3>
A NSIS Script File (.nsi) is just a text file with a series of commands.
<ul>
<li>Lines beginning with ; or # are comments.
<li>Non-comment lines are in the form of 'command [parameters]'
<li>Anything after a ; or # that is not in a parameter (i.e. in quotes or part of another string) is treated as a comment. (i.e. "File myfile ; this is the file" would work)
<li>For parameters that are treated as numbers, you can use decimal (the number) or hexadecimal (with 0x prepended to it, i.e. 0x12345AB), or octal (numbers beginning with a 0 and no x).
<li>To represent strings that have spaces, use quotes.<ul>
  <li>quotes only have the property of containing a parameter if they begin the parameter.
  <li>quotes can be either single quotes, double quotes, or the backward single quote.
  </ul>
  Examples:<PRE>
    MessageBox MB_OK "I'll be happy" ; this one puts a ' inside a string
    MessageBox MB_OK 'And he said to me "Hi there!"' ; this one puts a " inside a string
    MessageBox MB_OK `And he said to me "I'll be fucked!"` ; this one puts both ' and "s inside a string:
  </PRE>
It's a little weird, I know, but oh well.
  <li>If you wish to extend a command over multiple lines, use a \ at the end of the line, and the next line will effectively be concatenated the end of it. For example:<PRE>
    CreateShortCut "$SMPROGRAMS\NSIS\ZIP2EXE project workspace.lnk" \
                   "$INSTDIR\source\zip2exe\zip2exe.dsw"
    MessageBox MB_YESNO|MB_ICONQUESTION \
               "Remove all files in your NSIS directory? (If you have anything \
you created that you want to keep, click No)" \
                IDNO NoRemoveLabel
</PRE>
<li>There are eight real categories of commands:
  <ol>
    <li><a href="#headconfig">Header configuration</a> - these let you configure the basic settings of the installer
    <li><a href="#licconfig">License page configuration</a> - these let you configure the license page of the installer
    <li><a href="#compconfig">Component page configuration</a> - these let you configure the component page of the installer
    <li><a href="#dirconfig">Directory page configuration</a> - these let you configure the directory page of the installer
    <li><a href="#instconfig">Installation page configuration</a> - these let you configure the final installation page of the installer
    <li><a href="#execcommands">Installation execution commands</a> - these let you specify how things are installed, etc.
    <li><a href="#compilerutil">Compiler utility commands</a> - these let you have the compiler do more things (such as conditional compilation, file inclusion, executable execution, etc) 
    <li><a href="#CBFuncs">Callback functions</a> - these let you customize the behavior of the installer by having your own (installer) code execute during certain parts of the install.
  </ol>
  Note that some commands are only usable in a particular context. For example, the <a href="#execcommands">installation execution commands</a> are only valid within a <A href="#Section">Section</a> or a <a href="#Function">Function</a>. Likewise, the various header/page configuration commands are not available inside a Section or a Function.
<li><A name="nsisconf">You can also set up a file called "nsisconf.nsi" in the same directory as makensis.exe that will be included by default before your script. 
<li>If you want a template of an .nsi file generated, we made a web page <a href="http://www.firehose.net/free/nsis/makensitemplate.phtml">here</a> that will do it.
</ul>

<a name="headconfig"><h4>Header configuration commands:</h4>
<ul>
<li><b>Name</b> <i>name</i><br>
This setting sets the name of the installer. The name is usually simply the product name such as 'MyApp' or 'CrapSoft MyApp'. 
<li><b>Caption</b> <i>caption</i><br>
This setting sets what the titlebars of the installer will display. By default, it is 'Name Setup', where Name is specified with the Name command. You can, however, override it with 'MyApp Installer' or whatever.
<li><b>Icon</b> <i>path_to_icon.ico</i><br>
This setting changes the icon of the installer. The icon MUST contain a 32x32x16 color icon resource (it can also contain other icons, but they will be discarded).
<li><b>UninstallIcon</b> <i>path_to_icon.ico</i><br>
This setting changes the icon of the uninstaller. Again, the icon MUST contain a 32x32x16 color icon resource (it can also contain other icons, but they will be discarded).
<li><b>OutFile</b> <i>install.exe</i><br>
This setting specifies the output file that the MakeNSIS should write to.
<li><b>SilentInstall</b> <i>normal|silent|silentlog</i><br>
This setting lets you specify whether or not the installer should be silent. If it is 'silent' or 'silentlog', the default configuration is installed and nothing more. MessageBoxes are still displayed on error. 
<li><b>CRCCheck</b> <i>on|off</i><br>
This settings lets you specify whether or not the installerwill perform a CRC check on itself before allowing an install. valid options are 'on'  and 'off'.
<li><b>BGGradient</b> <i>[off] | [top_color bottom_color [textcolor | notext]]</i><br>
The BGGradient setting sets whether or not to use a gradient background window. If 'off', the installer will not, if no parameters are specified, the default black to blue gradient is used. Finally, you can specify the top_color or bottom_color, using the form RRGGBB RRGGBB (in hexadecimal, like the way you do it in HTML, only minus the leading '#', since # can be used for comments). 'textcolor' can be specified as well, or 'notext' can be specified to turn the big background text off.
<li><b>InstallColors</b> <i>foreground background</i><br>
The InstallColors setting sets the colors to use for the install info screen (the default is 00FF00 000000. Use the form RRGGBB RRGGBB (in hexadecimal, like the way you do it in HTML, only minus the leading '#', since # can be used for comments).
<li><b>UninstallText</b> <i>text</i><br>
This setting lets you specify the text on the first page of the uninstaller.
<li><a name="UninstallExeName"><b>UninstallExeName</b> <i>exename.exe</i><br>
This setting lets you change the executable name of the uninstaller. It will be dropped in <a href="#V_INSTDIR">$INSTDIR</a>.
</ul>

<a name="licconfig"><h4>License page configuration commands:</h4>
<ul>
<li><b>LicenseText</b> <i>text</i><br>
This setting lets you specify a string that is above the license text.  Omit this if you do not wish to have a license displayed.
<li><b>LicenseData</b> <i>license_data_file.txt</i><br>
This setting will let you specify a text file to use for the license that the user can read. Omit this if you do not wish to have a license displayed. Note that the file must be in the evil DOS text format (\r\n, yeah!)
</ul>

<a name="compconfig"><h4>Component page configuration commands</h4>
<ul>
<li><b>ComponentText</b> <i>text_goes_here</i><br>
This setting lets you specify a string that is above the component list. This can be something that specifies what it is you are actually installing.
<li><a name="InstType"><b>InstType</b> <i>/NOCUSTOM | install_type_name</i><br>
This command lets you add install types. You can use it up to 8 types, each one specifying the name of the install. The first type is the default (so make it 'Typical'). Each type is numbered, starting at 1. See <a href="#SectionIn">SectionIn</a> for information on how those numbers are used. If you use the /NOCUSTOM switch, then the "custom" install type is disabled, and the user has to choose one of your install types.
<li><b>EnabledBitmap</b> <i>bitmap.bmp</i><br>
This command replaces the enabled state of the listbox for the component page. It MUST be a 16 color bitmap (it can be any size, but 20x20 is preferred -- all others will be resized down... poorly).
<li><b>DisabledBitmap</b> <i>bitmap.bmp</i><br>
This command replaces the disabled state of the listbox for the component page. It MUST be a 16 color bitmap (it can be any size, but 20x20 is preferred -- all others will be resized down... poorly).
</ul>

<a name="dirconfig"><h4>Directory selection page configuration commands</h4>
<ul>
<li><b>DirShow</b> <i>show|hide</i><br>
This setting lets you specify show or hide to let you skip the install directory page.
<li><b>DirText</b> <i>text</i><br>
This setting lets you specify a string that is above the directory selection area.
<li><a name="InstallDir"><b>InstallDir</b> <i>default_install_directory</i><br>
This setting changes what the default installation directory is. See the <a href="#V">variables section</a> for variables you can use to make this string (especially <a href="#V_PROGRAMFILES">$PROGRAMFILES</a>). Note that the part of this string following the last \ will be used if the user selects 'browse', and may be appended back on to the string at install time (to disable this, end your InstallDir with a \ (you will need to enclose the entire parameter with quotes to do this)). If this doesn't make any sense, play around with the browse button a bit.
<li><b>InstallDirRegKey</b> <i>root_key subkey key_name</i><br>
This command checks to see if a string is in the registry, then uses it for the install dir if that key is there. Use this so your programs can detect if they are upgrading and install to the same path.  If this command is present, it will override the <a href="#InstallDir">InstallDir</a> command if the registry key is present and non-empty, otherwise it will fall back to the InstallDir default. When querying the registry, this command will automatically remove any quotes. If the string ends in ".exe", it will automatically remove the filename component of the string (i.e. if the string is "C:\program files\poop\poop.exe", it will know to use "C:\program files\poop")
</ul>

<a name="instconfig"><h4>Install page configuration commands</h4>
<ul>
<li><a name="AutoCloseWindow"><b>AutoCloseWindow</b> <i>true|false</i><br>
Controls whether or not the install window automatically closes when completed. Can be 'false' or 'true'.
<li><b>ShowInstDetails</b> <i>hide|show|nevershow</i><br>
Controls whether or not the details of the install are shown. Can be 'hide' (the default) to hide the details by default, allowing the user to view them, or 'show' to show them by default, or 'nevershow', to prevent the user from ever seeing them.
</ul>

<a name="execcommands"><h4>Installation execution commands</h4>

Following the header commands, you have the installation execution commands. These commands are executed in order by the installer. They are grouped into sections, each of which can be independently installed. Sections are created with the Section command. To close a section, use SectionEnd.
<br><br>
You can also create Functions that can be called from Sections (or Functions). These Functions can be declared anywhere (except inside a Section or Function) using Function and FunctionEnd, and called using Call. There are also special <a href="#CBFuncs">callback functions</A> that you can use for your installer, to customize how it behaves.
<br><br>
Commands that either create sections or change the options for the compiler:
<ul>
<li><a name="Section"><b>Section</b> <i>[section_name]</i><br>
This command creates a new section. If <i>section_name</i> is empty, omitted, or begins with a - then it is a required section and the user will never have the option of disabling it.  If the section name is 'Uninstall', then the installer will generate <a href="#V_INSTDIR">$INSTDIR</a>\nsuninst.exe (or something different if the <a href="#UninstallExeName">UninstallExeName</a> command is used), which, when executed will prompt the user whether or not an uninstall is desired, then execute the commands in the uninstall section. Upon uninstall, <a href="#V_INSTDIR">$INSTDIR</a> is determined by the location of the uninstaller exe.
<li><a name="SectionEnd"><b>SectionEnd</b><BR>
This command closes a section. Note that while you are currently not required to close a section before creating a new one, you really should close your sections. You also are required to close your sections before defining any <a href="#Function">Functions</a>.
<li><b>SectionDivider</b><BR>
This command adds a divider to the section list. Note that this divider is a section, but can't have any instructions in it etc).
<li><a name="Function"><b>Function</b> <i>function_name | un.function_name</i><BR>
The Function command will create a new function for the installer (or the uninstaller if the function name begins with "un."). Functions cannot be declared within a Section, you must first close any open sections using <a href="#SectionEnd">SectionEnd</a> before createing functions. The function must be closed at some point with an <a href="#FunctionEnd">FunctionEnd</a> command. To call a function, you can use the <a href="#Call">Call</a> command. Note: you can also create special <a href="#CBFuncs">Callback Functions</a> with this command.
<li><a name="FunctionEnd"><b>FunctionEnd</b><BR>
Ends a function.
<li><b>SectionIn</b> <i>section_index_list</i><br>
This command specifies which Install Types (see <a href="#InstType">InstType</a>) this section defaults to the enabled state in. You can specify numbers, with any characters (or none) delimiting (i.e. 1258 or 1,2,5,8 or 1-2-5-8 or 1 2 5 8 all do the same thing) Or, you can just use multiple SectionIn commands and they will be combined.
<li><a name="SetOverwrite"><b>SetOverwrite</b> <i>on|off|try|ifnewer</i><br>
This command sets the overwrite flag which is used by the File command to determine whether or not the file should overwrite any existing files that are present. If overwriteflag is 'on', files are overwritten (this is the default). If overwriteflag is 'off', files that are already present are not overwritten. If overwriteflag is 'try', files are overwritten if possible (meaning that if the file is not able to be written to, it is skipped). If overwriteflag is 'ifnewer', then files are only overwritten if the existing file is older than the new file (note that when this is enabled, the destination file's date is set, regardless of what <A href="#SetDateSave">SetDateSave</a> is set to. Note that this isn't  actually an installer command, but just a state modifier in the script compiler. Hence this instruction takes effect even if the section it is in isn't installed.
<li><a name="SetCompress"><b>SetCompress</b> <i>auto|force|off</i><br>
This command sets the compress flag which is used by the installer to determine whether or not data should be compressed. Typically the SetCompress flag will effect the commands after it, and the last SetCompress command in the file also determines whether or not the install info section and uninstall data of the installer is compressed (usually it is a good idea). If compressflag is 'auto', then files are compressed if the compressed size is smaller than the uncompressed size (usually the case). If compressflag is set to 'force', then compression is always used, and if compressflag is 'off' then compression is not used. Note that this isn't actually an installer command, but just a state modifier in the script compiler. Hence this instruction takes effect even if the section it is in isn't installed.
<li><a name="SetDatablockOptimize"><b>SetDatablockOptimize</b> <i>on|off</i><br>
This command tells the compiler whether or not to do datablock optimizations. Datablock optimizations have the compiler check to see if any data being added to the data block is already in it, and if so, it is simply referenced as opposed to added (can save a little bit of size). When adding many small files after adding a large amount of data, it can be pretty slow. off by default. You can turn it on or off at any time (i.e. turn it off when adding a lot of small files). Or, you can put it in an <a href="#bangifdef">!ifdef</a> for debug/release modes.
<li><a name="SetDateSave"><b>SetDateSave</b> <i>on|off</i><br>
This command sets the file date/time saving flag which is used by the File and InstNSPlug commands to determine whether or not to save the creation date and time of the file which is saved, so that it can be restored on installation.  Valid flags are 'on' and 'off'. 'on' is the default. Note that this isn't actually an installer command, but just a state modifier in the script compiler. Hence this instruction takes effect even if the section it is in isn't installed.
</ul>
<a name="execcommands2">Commands that are actually instructions (some may even assemble into multiple instructions):
<ul>
<li><a name="Nop"><b>Nop</b><BR>
Does nothing. :)
<li><a name="Goto"><b>Goto</b> <i>label_to_jump_to</i><BR>
The installer will goto to the label 'label_to_jump_to:'. Gotos can only be within the current section/function.
You should remember that commands 
such as <a href="#SetCompress">SetCompress</a>, 
<a href="#SetOverwrite">SetOverwrite</a>, <a href="#SetDatablockOptimize">SetDatablockOptimize</a>,
<a href="#SetDateSave">SetDateSave</a>, and <A href="#SectionIn">SectionIn</a> aren't real commands, but set compiler flags, so jumping over them has no effect. Use the parameter 0 to not goto anywhere (i.e. behaves as 'Nop').
<BR><a name="Labels">To declare a label, simply use:<PRE>
MyLabel:
</PRE>
Labels cannot begin with a - or 0-9.
<li><a name="Call"><b>Call</b> <i>function_name</i><BR>
The call command calls a <a href="#Function">function</a> named function_name. If in the Uninstall section, Call MUST be used with function names beginning with "un.". The Call command assembles into one instruction (i.e. the function that it calls is not inlined :)
<li><a name="IfErrors"><b>IfErrors</b> <i>jumpto_iferror [jumpto_ifnoerror]</i><br>
This instruction will check and clear the error flag, and if it is set, it will <a href="#Goto>goto/a> to jumpto_iferror, otherwise it will jump to jumpto_ifnoerror. The error flag is set by other instructions when a recoverable error (such as deleting a file that is in use) occurs.
<li><a name="ClearErrors"><b>ClearErrors</b><BR>
This instruction clears the error flag (it is implemented as IfErrors 0 0).
<li><a name="SetOutPath"><b>SetOutPath</b> <i>output_path</i><br>
This command sets the output path for files following that use the <a href="#File">File</a> command. Must be full pathname, usually is just <a href="#V_INSTDIR">$INSTDIR</a> (which can be abbreviated by a single dash, -). This command will create the output path. Use it if you wish to create a new directory somewhere and plan to write files to it etc. The directory creation portion functions just like CreateDirectory.
<li><b>CreateDirectory</b> <i>path_to_create</i><br>
This command creates a directory specified.  You can use <a href="#V">variables</a>, and so on. Note that it recursively creates it, so if you create C:\poop\dir2\dir3, it will create all that it needs to.
<li><a name="File"><b>File</b> <i>([/r] file|wildcard [file|wildcard [...]]) | (/oname=file.dat infile.dat)</i><br>
This command adds a file to be extracted to the current output path specified with <a href="#SetOutPath">SetOutPath</a>.  Note that the file name is output_path\filename_portion_of_file. Wildcards are supported. If the /r switch is used, files and directories are added recursively. If the /r switch is used, and there is no trailing wildcard (i.e. you add C:\whatever\mydir), then the whole tree of mydir will go in <current output path>\mydir. If you want to put it in <current output path>, just do File /r C:\whatever\mydir\*.* . (Note: this command when in recursive mode will create all directories as necessary (it actually assembles to many SetOutPath/File instructions :)). The File command will set the error flag if overwrite mode is set to 'try' and the file could not be overwritten, or if the overwrite mode is set to 'on' and the file could not be overwritten and the user selects ignore.
<li><b>CopyFiles</b> <i>path_of_file_or_wildcard_on_destination_system destination_path size_of_files_in_kb</i><br>
This command copies files from the source to the destination on the installing system. Useful with <a href="#V_EXEDIR">$EXEDIR</a> if you want to copy from installation media, or to copy from one place to another on the system. Uses SHFileOperation, so you might see a status window of the copy operation. The last parameter specifies how big the copy is (in kilobytes), so that the installer can guess at the disk space requirements.
<li><A name="Exec"><b>Exec</b> <i>full_path_of_command_to_execute</i><br>
This command will execute the specfied program and continue.  Note that the file specified must exist on the target system, not the compiling system.  It is recommended that you do something like this '"$INSTDIR\whatever.exe" /PARAMETER /2 ETC whatever.dat' (so that the double quotes ensure correct running, even if <a href="#V_INSTDIR">$INSTDIR</a> has a space in it. The current output directory is used for the working directory (change it with SetOutPath before calling this). The error flag will be set if the process could not be launched.
<li><b>ExecWait</b> <i>full_path_of_command_to_execute</i><br>
This command will execute the specfied program and wait for the executed process to quit. See <a href="#Exec">Exec</a> for more information. ExecWait will also set the error flag if the program executed returns a nonzero error code.
<li><b>ExecShell</b> <i>action full_path_of_command_to_execute [parameters [SW_SHOWNORMAL|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED]]</i><br>
This command will execute the specfied program using ShellExecute. Note that action is usually "open". action can be an empty string, to use the default action. Parameters and the show type are optional. The current output directory is used for the working directory (change it with SetOutPath before calling this). The error flag will be set if the process could not be launched.
<li><b>Rename</b> <i>[/REBOOTOK] source_file dest_file</i><br>
This command will rename the source_file to dest_file. It functions just like the win32 api MoveFile, which means you can move a file from anywhere on the system to anywhere else, and you can move a directory to somewhere else on the same drive. If /REBOOTOK is specified, and the file cannot be overwritten, then the file is moved when the system reboots. If the file cannot be renamed (and /REBOOTOK is not used), or if the file does not exist, the error flag is set.
<li><b>Delete</b> <i>[/REBOOTOK] path_of_file_or_wildcard</i><br>
This command will delete the parameter from the target system. Useful for if you want to drop something off in the temp directory using File, then Exec it with the wait flag, then Delete it. If /REBOOTOK is specified, and the file cannot be deleted, then the file is deleted when the system reboots. If files are found, and cannot be deleted, the error flag will be set.  Note that if you try to delete a file that did not exist, the error flag will not be set.
<li><b>RMDir</b> <i>[/r] full_path_to_directory</i><br>
Attempt to remove a directory. If /r is specified, it will attempt to recursively remove the directory by removing subdirectories and files recursively (read only files will be deleted too). If the directory cannot be removed, the error flag will be set.
<li><b>SetFileAttributes</b> <i>filename attribute1|attribute2|...</i><BR>
Set file attributes of 'filename' (which can contain wildcards). Valid attributes can be combined with | and are:<ul>
<li>NORMAL or FILE_ATTRIBUTE_NORMAL (you can use 0 to abbreviate this)
<li>ARCHIVE or FILE_ATTRIBUTE_ARCHIVE
<li>HIDDEN or FILE_ATTRIBUTE_HIDDEN
<li>OFFLINE or FILE_ATTRIBUTE_OFFLINE
<li>READONLY or FILE_ATTRIBUTE_READONLY
<li>SYSTEM or FILE_ATTRIBUTE_SYSTEM
<li>TEMPORARY or FILE_ATTRIBUTE_TEMPORARY
</ul>
If the file's attributes cannot be set (i.e. the file doesn't exist, or you don't have the right permissions), the error flag will be set.
<li><b>CreateShortCut</b> <i>link.lnk target.file [parameters [icon.file [icon_index_number [start_options [keyboard_shortcut]]]]]</i><BR>
This command will create a shortcut. Everything after target.file is optional (but you must specify parameters ("" is okay) to specify icon.file, and so on). The working directory for the shortcut is set to whatever the current output path is (use SetOutPath before CreateShortCut to change it). start_options should be one of: SW_SHOWNORMAL, SW_SHOWMAXIMIZED, SW_SHOWMINIMIZED, or an empty string (for default). keyboard_shortcut should be in the form of 'flag|c' where flag can be a combination (using |) of: ALT, CONTROL, EXT, or SHIFT. c is the character to use (a-z, A-Z, 0-9, F1-F24, etc). Note that no spaces are allowed in this string. A good example is "ALT|CONTROL|F8". If the shortcut cannot be created (i.e. the path does not exist, or some other error), the error flag is set.

<li><b>RegDLL</b> <i>full_path_to_ActiveX_control_DLL_file [entrypoint_name]</i><br>
Loads the specified DLL and calls entrypoint_name if specified, otherwise DllRegisterServer (the default). If an error occurs (i.e. it can't load the DLL, initialize OLE, or find the entry point), the error flag is set.
<li><b>UnRegDLL</b> <i>full_path_to_ActiveX_control_DLL_file</i><br>
Loads the specified DLL and calls DllUnregisterServer. If an error occurs (i.e. it can't load the DLL, initialize OLE, or find the entry point), the error flag is set.
<li><b>InstNSPlug</b> <i>full_path_to_netscape_plug-in_DLL_on_the_source_system</i><br>
This command installs into all instances of Netscape 3+ the plug-in pointed to by the parameter. The name for the plug-in is retrieved from the file portion of the parameter. If the user cancels one or more of the installations of the netscape plug-ins (because netscape is running), the error flag is set.
<li><b>DeleteNSPlug</b> <i>netscape_plug-in_name_only</i><br>
This command removes from all instances of Netscape 3+ the plug-in pointed to by the parameter. Netscape must not be running. If the user cancels one or more of the deinstallations of the netscape plug-ins (because netscape is running), the error flag is set.
<li><a name="WriteRegStr"><b>WriteRegStr</b> <i>root_key subkey key_name value</i><br>
This command writes a string to the registry. root_key needs to be one of the following:<ul>
<li>HKCR (HKEY_CLASSES_ROOT)
<li>HKLM (HKEY_LOCAL_MACHINE)
<li>HKCU (HKEY_CURRENT_USER)
<li>HKU (HKEY_USERS)
<li>HKCC (HKEY_CURRENT_CONFIG)
<li>HKDD (HKEY_DYN_DATA)
<li>HKPD (HKEY_PERFORMANCE_DATA)
</ul>You may use variable names in value and key_name but not in subkey. If the string could not be written to the registry, the error flag is set.
<li><b>WriteRegDword</b> <i>root_key subkey key_name value</i><br>
This command writes a dword (32 bit integer) to the registry. Valid values for root_key are listed under <a href="#WriteRegStr">WriteRegStr</a>.  You may use variable names in key_name but not in subkey. If the dword could not be written to the registry, the error flag is set.
<li><b>WriteRegBin</b> <i>root_key subkey key_name valuedata</i><br>
This command writes a block of binary data to the registry. Valid values for root_key are listed under <a href="#WriteRegStr">WriteRegStr</a>. Valuedata is in hexadecimal (i.e. DEADBEEF01223211151). You may use variable names in key_name but not in subkey. If the binary data could not be written to the registry, the error flag is set.
<li><b>DeleteRegValue</b> <i>root_key subkey key_name</i><br>
Deletes a registry value. Valid values for root_key are listed under <a href="#WriteRegStr">WriteRegStr</a>.  key_name may contain variables. If the value could not be removed from the registry the error flag is set.
<li><b>DeleteRegKey</b> <i>root_key subkey</i><br>
Deletes a registry key. Valid values for root_key are listed under <a href="#WriteRegStr">WriteRegStr</a>. If the key could not be removed from the registry the error flag is set.
<li><b>WriteINIStr</b> <i>ini_filename section_name entry_name value</i><br>
Writes entry_name=value into ini_filename in [section_name].  All of the parameters can contain variables. If the string could not be written to the ini file, the error flag is set.
<li><b>DeleteINISec</b> <i>ini_filename section_name</i><br>
Deletes the entire section [section_name] from ini_filename. If the section could not be removed from the ini file, the error flag is set.
<li><b>DeleteINIStr</b> <i>ini_filename section_name str_name</i><br>
Deletes the string str_name from section [section_name] from ini_filename. If the string could not be removed from the ini file, the error flag is set.
<li><a name="FindWindow"><b>FindWindow</b> <i>close|closeinstant|prompt|goto:label windowclass [messageboxtext]</i><br>
This command checks for a window named windowclass and does an action based on what mode is set to.  If mode is 'close', this command will attempt to close the window using WM_CLOSE for up to 8 seconds.  If mode is 'closeinstant', this command will send a WM_CLOSE message to the window and continue. If mode is 'prompt', this command will prompt the user with messageboxtext until the window is closed manually. If mode is 'goto:label', the execution will continue regardless, and <a href="#Goto">Goto</a> to label if the window is found.
<li><a name="FindWindowByTitle"><b>FindWindowByTitle</b> <i>close|closeinstant|prompt|goto:label windowtitle [messageboxtext]</i><br>
This command acts just like <a href="#FindWindow">FindWindow</a>, only searches for a window based on title instead of class.
<li><b>IfFileExists</b> <i>file_to_check_for jump_if_present [jump_otherwise]</i><br>
This instruction will check for existence of the file (or directory) file_to_check_for (which can be a wildcard), and will <a href="#Goto">Goto</a> to jump_if_present if the file exists, otherwise it will <a href="#Goto">Goto</a> to jump_otherwise. 
<li><b>MessageBox</b> <i>mb_option_list messagebox_text [return_check [jumpto]]</i><br>
This command will display a messagebox containing messagebox_text. mb_option_list must be one or more of the following (when more, they must be delimited with | and no spaces). <ul>
  <li>MB_OK - Display with an OK button
  <li>MB_OKCANCEL - Display with an OK and a cancel button
  <li>MB_ABORTRETRYIGNORE - Display with abort, retry, ignore buttons
  <li>MB_RETRYCANCEL - Display with retry and cancel buttons
  <li>MB_YESNO - Display with yes and no buttons
  <li>MB_YESNOCANCEL - Display with yes, no, cancel buttons
  <li>MB_ICONEXCLAMATION - Display with exclamation icon
  <li>MB_ICONINFORMATION - Display with information icon
  <li>MB_ICONQUESTION - Display with question mark icon
  <li>MB_ICONSTOP - Display with stop icon
  <li>MB_TOPMOST - Make messagebox topmost
  <li>MB_SETFOREGROUND - Set foreground
  <li>MB_RIGHT - Right align text
  </ul>
  return_check can be 0, or one of the following: <ul>
  <li>IDABORT - Abort button
  <li>IDCANCEL - Cancel button
  <li>IDIGNORE - Ignore button
  <li>IDNO - No button
  <li>IDOK - OK button
  <li>IDRETRY - Retry button
  <li>IDYES - Yes button
  </ul>
  if the return value of the MessageBox is return_check, the installer will <a href="#jump">Goto</a> to jumpto.
<li><b>SetDetailsView</b> <i>show|hide</i><br>
This command will either show or hide the details, depending on which parameter you pass.
<li><b>DetailPrint</b> <i>user_message</i><BR>
This command adds a string (user_message) to the details view of the installer, if available.
<li><a name="Abort"><b>Abort</b> <i>user_message</i><br>
This command tells the installer to cancel the install, and display user_message in the status display. Note: you can use this from <a href="#CBFuncs">Callback Functions</a> to do special things.
<li><b>Sleep</b> <i>sleeptime_in_ms</i><br>
This commands pauses execution in the installer for sleeptime_in_ms milliseconds. 
<li><a name="BringToFront"><b>BringToFront</b><br>
This command brings the installer to the top of the window list (i.e. if you execute a command that shows itself in front of it, you can make the installer come back to the top). If the installer has been hidden (with the <a href="#HideWindow">HideWindow</a> command), the installer is shown.
<li><b>HideWindow</b><BR>
This command hides the installer. Bring it back visible using the <a href="#BringToFront">BringToFront</a> command. Note that if you use this, and <a href="#AutoCloseWindow">AutoCloseWindow</a> is set to false, you MUST use BringToFront, otherwise the installer will still be running and invisible, waiting for the user's input.
<li><a name="StrCpy"><b>StrCpy</b> <i>$(0-9|INSTDIR|OUTDIR) str [maxlen]</i><br>
This command will set the <A href="#V_USER">user variable $x</a> with str. Note that str can contain other variables, or the user variable being set (you can easily concatenate strings this way, etc). If maxlen is specified, the string will be a maximum of maxlen characters (not including null termination).
<li><a name="StrCmp"><b>StrCmp</b> <i>str1 str2 jump_if_equal [jump_if_not_equal]</i><br>
This command will compare (case insensitively) str1 to str2, and if equal, it will <a href="#Goto">Goto</a> to jump_if_equal, otherwise to jump_if_not_equal.
<li><a name="ReadRegStr"><b>ReadRegStr</b> <i>$(0-9|INSTDIR|OUTDIR) root_key sub_key name</i><br>
This command will read from root_key\sub_key\name into the <a href="#V_USER">user variable $x</a>. root_key should be one of: <ul>
<li>HKCR (HKEY_CLASSES_ROOT)
<li>HKLM (HKEY_LOCAL_MACHINE)
<li>HKCU (HKEY_CURRENT_USER)
<li>HKU (HKEY_USERS)
<li>HKCC (HKEY_CURRENT_CONFIG)
<li>HKDD (HKEY_DYN_DATA)
<li>HKPD (HKEY_PERFORMANCE_DATA)
</ul>
Note that if the string is not present, the error flag will be set, and $x will be set with an empty string "".
<li><a name="ReadINIStr"><b>ReadINIStr</b> <i>$(0-9|INSTDIR|OUTDIR) ini_file section entry</i><br>
This command will read from the ini file ini_file, in the section section, the entry entry, and store the value into <a href="#V_USER">user variable $x</a>. If the entry is not in the .ini file, $x will be assigned an empty string, and the error flag will be set.
<li><a name="GetFullDLLPath"><b>GetFullDLLPath</b> <i>$(0-9|INSTDIR|OUTDIR) dll_name</i><BR>
This command will assign to the user variable specified in the first parameter, the full path of the DLL name of the second parameter. If the path cannot be found, the user variable will be empty, and the error flag will be set.
<li><a name="CompareDLLVersions"><b>CompareDLLVersions</b> <i>[/STOREFROM] dll1 dll2 jumpto_dll1newer jumpto_dll2newer</i><BR>
This command will compare the versions of dll1 and dll2, and goto to jumpto_dll1newer if dll1 is newer, and goto to jumpto_dll2newer if dll2 is newer. The /STOREFROM switch tells the compiler that dll1 is a file on the building system, at which the compiler will look to get the version information (if /STOREFROM is not specified, dll1 is a path on the target (installing) system. If the files are the same version, no goto will occur. If there is an error comparing, no goto will occur, and the error flag will be set. Note: this command uses the win32 version resource to do its comparison - if either file lacks a version resource, the function will fail (no goto, error flag set).
<li><a name="CompareFileTimes"><b>CompareFileTimes</b> <i>[/STOREFROM] file1 file2 jumpto_file1_newer jumpto_file2_newer</i><BR>
This command compares the last write times of the files file1 and file2, and gotos jumpto_file1_newer if file1 is newer, jumpto_file2_newer if file 2 is newer, and doesn't goto if the files are the same or if one of the files was not found (the latter case will set the error flag). If /STOREFROM is specified, then file1 is a file on the building system (otherwise, file1 is a file on the target (installing) system).
</ul>

<h4><a name="compilerutil">Compiler utility commands</h4>
These commands aren't compiled into actual instructions for the virtual machine, but they allow you to have the compiler execute whatever you want, include other files, etc. Note: none of these commands allow you to use variables. The leading bang (!) is there to remind you of the context of the command (i.e. that it is a compiler-only command, ala the C preprocessor)<ul>
<li><b>!system</b> <i>command compare comparevalue</i><BR>
This command will execute 'command' using a call to system(), and if the return value compared to 'comparevalue' is true, execution of the script will continue. Otherwise, execution will halt. 'compare' can be '<' or '>' or '<>' or '=' or 'ignore'.
<li><b>!include</b> <i>file</i><BR>
This command will include 'file' as if it was part of the original script. Note that if you include a file in another directory, the current directory is still where you compiled the script from, not where the new script lives.
<li><b>!cd</b> <i>new_path</i><BR>
This command will change the compiler to the new directory, new_path. new_path can be relative or absolute.
<li><a name="bangdefine"><b>!define</b> <i>gflag</i><BR>
This command will add 'gflag' to the global define list. This will have a similar effect as using the <a href="#slashdefine">/D</a> switch on the command line (only the define only becomes effective after the !define command).
<li><a name="bangifdef"><b>!ifdef</b> <i>gflag [bcheck [gflag [...]]]</i><BR>
This command, when paired with an <a href="#bangendif">!endif</a> command, will tell the compiler whether or not to compile the lines in between the two lines. If gflag is globally defined (using <a href="#bangdefine">!define</a> or the <a href="#slashdefine">/D</a> switch), then the contained lines will be compiled. Otherwise, they will not. Note that you can use &amp or | (boolean and or boolean or) for 'bcheck', and specify more gflag's -- Precedence is quite simple, pure left to right (no way around that, either :).
<li><a name="bangifdef"><b>!ifndef</b> <i>gflag [bcheck [gflag [...]]]</i><BR>
This command is the opposite of <A href="#bangifdef">!ifdef</a> (If 'gflag' is not globally defined, the lines contained will be compiled). Note that when using boolean operators (&amp or |), 'gflag' is treated as true if it is undefined. I.e. '!ifndef X | Y' means "if either X or Y is undefined" and '!ifndef X & Y' means "if X and Y are both undefined".
<li><a name="bangendif"><b>!endif</b><BR>
This command closes a block started with <a href="#bangifdef">!ifdef</a> or <a href="#bangifndef">!ifndef</a>.
<li><b>!else</b> <i>[ifdef|ifndef [...]]</i><BR>
This command lets you do !ifdef/!else/!endif, etc. If you use ifdef or ifndef as the first parameter, it behaves as expected. You can do !ifdef/!else ifdef/!else ifndef/.../!else/!endif.
<li><a name="PackEXEHeader"><b>!packhdr</b> <i>temporary_file_name command_to_execute</i><Br>
This option lets you use an external EXE packer (such as <a href="http://www.un4seen.com/petite/">Petite</a> or <a href="http://wildsau.idv.uni-linz.ac.at/mfx/upx.html">UPX</a>) to compress the executable header. To use this, specify a temporary file name (such as "temp.dat") and a command line (such as "C:\program files\upx\upx -9 temp.dat") to compress the header. If you want to run multiple programs on one temp.dat, you can use a batch file. Note: the old command name for this is PackEXEHeader, but is now exclusively !packhdr.
</ul>
<h4><a name="CBFuncs">callback functions</h4>
You can create callback functions which have special names, that will be called by the installer at certain points in the install. Below is a list of currently available callbacks:
<ul>
  <li>.onInit<BR>
      This callback will be called when the installer is nearly finished initializing. If the '.onInit' function calls <a href="#Abort">Abort</A>, the installer will quit instantly. Here are two examples of how you might want to use this:<PRE>
  Function .onInit
    MessageBox MB_YESNO "This will install. Continue?" IDYES NoAbort
      Abort ; causes installer to quit.
    NoAbort:
  FunctionEnd
</PRE>or:<PRE>
  Function .onInit
    ReadINIStr $INSTDIR $WINDIR\wincmd.ini Configuration InstallDir
    StrCmp $INSTDIR "" 0 NoAbort
      MessageBox MB_OK "Windows Commander not found. Unable to get install path."
      Abort ; causes installer to quit.
    NoAbort:
  FunctionEnd
</PRE>
  <li>.onUserAbort<BR>
      This callback is called when the user hits the 'cancel' button, and the install hasn't already failed. If this function calls <a href="#Abort">Abort</a>, the install will not be aborted. Example:<PRE>
  Function .onUserAbort
    MessageBox MB_YESNO "Abort install?" IDYES NoCancelAbort
      Abort ; causes installer to not quit.
    NoCancelAbort:
  FunctionEnd
</PRE>
  <li>.onInstSuccess<BR>
      This callback is called when the install was successful, right before the install window closes (which may be after the user clicks 'Close' if <a href="#AutoCloseWindow">AutoCloseWindow</a> is set to false). Example:<PRE>
  Function .onInstSuccess
    MessageBox MB_YESNO "Congrats, it worked. View readme?" IDNO NoReadme
      Exec notepad.exe ; view readme or whatever, if you want.
    NoReadme:
  FunctionEnd
</PRE>
  <li>.onInstFailed<BR>
      This callback is called when the user hits the 'cancel' button after the install has failed (if it could not extract a file, or the install script used the <a href="#Abort">Abort</a> command. Example:<PRE>
  Function .onInstFailed
    MessageBox MB_OK "Better luck next time."  
  FunctionEnd
</PRE>
  <li>.onVerifyInstDir<BR>
      This callback will let you control whether or not an installation path is valid for your installer. This code will be called every time the user changes the install directory, so it shouldn't do anything crazy with MessageBox or the likes. If this function calls <a href="#Abort">Abort</a>, the installation path in $INSTDIR is deemed invalid. Example:<PRE>
  Function .onVerifyInstDir
    IfFileExists $INSTDIR\Winamp.exe PathGood
      Abort ; if $INSTDIR is not a winamp directory, don't let us install there
    PathGood
  FunctionEnd
</ul>

<h4><a name="V">variables</h4>
The following are variables you can use in <a href="#execcommands2">Execution Commands</a> (and a few of the header/page commands):<ul>
<li><a name="V_INSTDIR">$INSTDIR<br>
The installation directory, as chosen by the user (or defaulted to). (If you really want, you can change $INSTDIR using <a href="#StrCpy">StrCpy</a>, <a href="#ReadRegStr">ReadRegStr</a>, <a href="#ReadINIStr">ReadINIStr</a>, etc. - This could be used, for example, in your <a href="#CBFuncs">.onInit function</a> to do a more advanced detection of install location)
<li><a name="V_OUTDIR">$OUTDIR<br>
The current output directory (set implicitly via <a href="#SetOutPath">SetOutPath</a> or explicitly via <a href="#StrCpy">StrCpy</a>, <a href="#ReadRegStr">ReadRegStr</a>, or <a href="#ReadINIStr">ReadINIStr</a>)
<li><a name="V_USER">$0, $1, $2, $3, $4, $5, $6, $7, $8, $9<br>
User variables (set via <a href="#StrCpy">StrCpy</a>, <a href="#ReadRegStr">ReadRegStr</a>, <a href="#ReadINIStr">ReadINIStr</a>, etc, and use like any other variable)
<li><a name="V_PROGRAMFILES">$PROGRAMFILES<br>
The program files directory (usually C:\Program Files).
<li><a name="V_DESKTOP">$DESKTOP<br>
The windows desktop directory (usually C:\windows\desktop).
<li><a name="V_EXEDIR">$EXEDIR<br>
The location of the installer executable.
<li><a name="V_WINDIR">$WINDIR<br>
The windows directory (usually C:\windows or C:\winnt)
<li><a name="V_SYSDIR">$SYSDIR<br>
The windows system directory (usually C:\windows\system or C:\winnt\system32)
<li><a name="V_TEMP">$TEMP<br>
The system temporary directory (usually C:\windows\temp)
<li><a name="V_STARTMENU">$STARTMENU<br>
The start menu folder (useful in adding start menu items using CreateShortCut)
<li><a name="V_SMPROGRAMS">$SMPROGRAMS<br>
The start menu programs folder (use this whenever you want $STARTMENU\Programs)
<li><a name="V_SMSTARTUP">$SMSTARTUP<br>
The start menu programs / startup folder
<li><a name="V_QUICKLAUNCH">$QUICKLAUNCH<br>
The quick launch folder for IE4 active desktop and above. If quick launch is not available, simply returns the same as $TEMP.
<li><a name="V_HWNDPARENT">$HWNDPARENT<br>
The decimal HWND of the parent window (useful if you want to have an app run as a child window)
<li><a name="V_STRING">$$<br>
Use to represent $.
<li><a name="V_RETURN">$\r<br>
Use to represent a carriage return (\r).
<li><a name="V_NEWLINE">$\n<br>
Use to represent a newline (\n).
</ul>
<BR><BR>
<a name="version"><h3>version history:</h3><ul>
<li>v1.41:<ul>
<li>Added support for version/date storing in CompareDLLVersions and CompareFileTimes (based on ideas of Davison Long)
<li>Made File/InstNSPlug commands use memory mapped files (generally ~20% faster, uses less memory on large adds)
<li>Made the datablock buffer use a memory mapped file when the datablock grows beyond 16MB. This lets you build larger installers without requiring that much physical memory.
</ul>
<li>v1.4:<ul>
<li>Made RegDeleteKey delete recursively, even on win2k. Thanks to Tim Kosse.
<li>Made ExecWait set the error flag if the program executed returns a nonzero return value.
<li>Made ExecWait run message pump for WM_PAINT messages while executing, and no longer show/hide the main window when done.
<li>Fixed one small InstType /NOCUSTOM bug
<li>Made BGBG faster (from Drew Davidson)
<li>Added $HWNDPARENT variable (decimal value of the hwnd of the installer)
<li>Added "Splash" utility (see splash.txt)
<li>Added !cd compiler command
</ul>
<li>v1.4 beta 2:<ul>
<li>Reduced header size by 1k (thx Lado Brisar)
<li>Made compiler recognize # as comments again (at Andras Varga's suggestion)
<li>Made compiler recognize \ at the end of a line as a line joiner (at Andras Varga's suggestion)
<li>Made line parser check that strings are terminated at the end of the line.
<li>Made .onInstSuccess called before status window is destroyed, for appearance.
<li>Reduced size of makensis and zip2exe by tuning project settings.
<li>Updated waplugin.nsi to work with 1.4 :)
</ul>
<li>for complete version history, see <a href="http://www.nullsoft.com/free/nsis/version-history.html">http://www.nullsoft.com/free/nsis/version-history.html</a>.
</ul>
<a name="build"><h3>source code building notes:</h3><ul>
<li>the code for the executable header is in source/exehead
<li>the code for the compiler is in source/ 
<li>when you compile the compiler, the project is set to write to makensis.exe (not in the source directory, but in the main install directory)
<li>the compiler is written in obfuscated C++ (no, really.)
<li>the executable header is written entirely in C.
<li>I've only gotten this to compile using VC++ 6. VC++ 4.2 or lcc is probably possible (though lcc will have a hard time with the C++ of makensis)
<li>be sure you build makensis after building exehead, always. otherwise you won't get to see your changes.
<li>the executable header uses its own mini-libc for small size. So you can't use malloc(), you have to use GlobalAlloc(), you can't use strcpy, you have to use mini_strcpy, etc. (actually if you enable maximize speed, strcpy is usually inlined, but that's another story)
<li>enjoy. don't send me email complaining how much my code sucks. patches are gladly accepted, though- send to justin@nullsoft.com.
<li>peace.  
</ul>

<a name="license"><h3>license:</h3><pre>
 Copyright (C) 1999-2001 Nullsoft, Inc.

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

</pre>

eof (that's end of file for all you people who don't get it).
</body>
</html>
