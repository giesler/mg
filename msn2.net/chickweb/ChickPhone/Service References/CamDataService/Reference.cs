//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace ChickPhone.CamDataService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class LogItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IdField;
        
        private System.DateTime TimestampField;
        
        private string UrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreviousAndNextLogItems", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class PreviousAndNextLogItems : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ChickPhone.CamDataService.LogItem NextItemField;
        
        private ChickPhone.CamDataService.LogItem PreviousItemField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChickPhone.CamDataService.LogItem NextItem {
            get {
                return this.NextItemField;
            }
            set {
                if ((object.ReferenceEquals(this.NextItemField, value) != true)) {
                    this.NextItemField = value;
                    this.RaisePropertyChanged("NextItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChickPhone.CamDataService.LogItem PreviousItem {
            get {
                return this.PreviousItemField;
            }
            set {
                if ((object.ReferenceEquals(this.PreviousItemField, value) != true)) {
                    this.PreviousItemField = value;
                    this.RaisePropertyChanged("PreviousItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VideoItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VideoItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double DurationField;
        
        private string IdField;
        
        private double MotionPercentageField;
        
        private string NameField;
        
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MotionPercentage {
            get {
                return this.MotionPercentageField;
            }
            set {
                if ((this.MotionPercentageField.Equals(value) != true)) {
                    this.MotionPercentageField = value;
                    this.RaisePropertyChanged("MotionPercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CamDataService.ICameraData")]
    public interface ICameraData {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/GetItemFilename", ReplyAction="http://tempuri.org/ICameraData/GetItemFilenameResponse")]
        System.IAsyncResult BeginGetItemFilename(int id, System.AsyncCallback callback, object asyncState);
        
        string EndGetItemFilename(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/GetItems", ReplyAction="http://tempuri.org/ICameraData/GetItemsResponse")]
        System.IAsyncResult BeginGetItems(System.DateTime date, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> EndGetItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/GetItemsUtc", ReplyAction="http://tempuri.org/ICameraData/GetItemsUtcResponse")]
        System.IAsyncResult BeginGetItemsUtc(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> EndGetItemsUtc(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/GetPreviousAndNextLogItems", ReplyAction="http://tempuri.org/ICameraData/GetPreviousAndNextLogItemsResponse")]
        System.IAsyncResult BeginGetPreviousAndNextLogItems(string id, System.AsyncCallback callback, object asyncState);
        
        ChickPhone.CamDataService.PreviousAndNextLogItems EndGetPreviousAndNextLogItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/GetVideoFilename", ReplyAction="http://tempuri.org/ICameraData/GetVideoFilenameResponse")]
        System.IAsyncResult BeginGetVideoFilename(int id, System.AsyncCallback callback, object asyncState);
        
        string EndGetVideoFilename(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/GetVideos", ReplyAction="http://tempuri.org/ICameraData/GetVideosResponse")]
        System.IAsyncResult BeginGetVideos(System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.VideoItem> EndGetVideos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/AddVideo", ReplyAction="http://tempuri.org/ICameraData/AddVideoResponse")]
        System.IAsyncResult BeginAddVideo(System.DateTime timestamp, string fileName, int duration, int motion, int size, System.AsyncCallback callback, object asyncState);
        
        void EndAddVideo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/AddAlert", ReplyAction="http://tempuri.org/ICameraData/AddAlertResponse")]
        System.IAsyncResult BeginAddAlert(System.DateTime timestamp, string fileName, System.DateTime receiveTime, System.AsyncCallback callback, object asyncState);
        
        void EndAddAlert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/GetAlertsBeforeDate", ReplyAction="http://tempuri.org/ICameraData/GetAlertsBeforeDateResponse")]
        System.IAsyncResult BeginGetAlertsBeforeDate(System.DateTime timestamp, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> EndGetAlertsBeforeDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/DeleteAlert", ReplyAction="http://tempuri.org/ICameraData/DeleteAlertResponse")]
        System.IAsyncResult BeginDeleteAlert(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteAlert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICameraData/DeleteVideo", ReplyAction="http://tempuri.org/ICameraData/DeleteVideoResponse")]
        System.IAsyncResult BeginDeleteVideo(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteVideo(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICameraDataChannel : ChickPhone.CamDataService.ICameraData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetItemFilenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetItemFilenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetItemsUtcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetItemsUtcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPreviousAndNextLogItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPreviousAndNextLogItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ChickPhone.CamDataService.PreviousAndNextLogItems Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ChickPhone.CamDataService.PreviousAndNextLogItems)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVideoFilenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVideoFilenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVideosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVideosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.VideoItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.VideoItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlertsBeforeDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlertsBeforeDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CameraDataClient : System.ServiceModel.ClientBase<ChickPhone.CamDataService.ICameraData>, ChickPhone.CamDataService.ICameraData {
        
        private BeginOperationDelegate onBeginGetItemFilenameDelegate;
        
        private EndOperationDelegate onEndGetItemFilenameDelegate;
        
        private System.Threading.SendOrPostCallback onGetItemFilenameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetItemsDelegate;
        
        private EndOperationDelegate onEndGetItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetItemsUtcDelegate;
        
        private EndOperationDelegate onEndGetItemsUtcDelegate;
        
        private System.Threading.SendOrPostCallback onGetItemsUtcCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPreviousAndNextLogItemsDelegate;
        
        private EndOperationDelegate onEndGetPreviousAndNextLogItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPreviousAndNextLogItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVideoFilenameDelegate;
        
        private EndOperationDelegate onEndGetVideoFilenameDelegate;
        
        private System.Threading.SendOrPostCallback onGetVideoFilenameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVideosDelegate;
        
        private EndOperationDelegate onEndGetVideosDelegate;
        
        private System.Threading.SendOrPostCallback onGetVideosCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddVideoDelegate;
        
        private EndOperationDelegate onEndAddVideoDelegate;
        
        private System.Threading.SendOrPostCallback onAddVideoCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAlertDelegate;
        
        private EndOperationDelegate onEndAddAlertDelegate;
        
        private System.Threading.SendOrPostCallback onAddAlertCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlertsBeforeDateDelegate;
        
        private EndOperationDelegate onEndGetAlertsBeforeDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlertsBeforeDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAlertDelegate;
        
        private EndOperationDelegate onEndDeleteAlertDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAlertCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteVideoDelegate;
        
        private EndOperationDelegate onEndDeleteVideoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteVideoCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CameraDataClient() {
        }
        
        public CameraDataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CameraDataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraDataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraDataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetItemFilenameCompletedEventArgs> GetItemFilenameCompleted;
        
        public event System.EventHandler<GetItemsCompletedEventArgs> GetItemsCompleted;
        
        public event System.EventHandler<GetItemsUtcCompletedEventArgs> GetItemsUtcCompleted;
        
        public event System.EventHandler<GetPreviousAndNextLogItemsCompletedEventArgs> GetPreviousAndNextLogItemsCompleted;
        
        public event System.EventHandler<GetVideoFilenameCompletedEventArgs> GetVideoFilenameCompleted;
        
        public event System.EventHandler<GetVideosCompletedEventArgs> GetVideosCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddVideoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddAlertCompleted;
        
        public event System.EventHandler<GetAlertsBeforeDateCompletedEventArgs> GetAlertsBeforeDateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAlertCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteVideoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginGetItemFilename(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetItemFilename(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string ChickPhone.CamDataService.ICameraData.EndGetItemFilename(System.IAsyncResult result) {
            return base.Channel.EndGetItemFilename(result);
        }
        
        private System.IAsyncResult OnBeginGetItemFilename(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginGetItemFilename(id, callback, asyncState);
        }
        
        private object[] OnEndGetItemFilename(System.IAsyncResult result) {
            string retVal = ((ChickPhone.CamDataService.ICameraData)(this)).EndGetItemFilename(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetItemFilenameCompleted(object state) {
            if ((this.GetItemFilenameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetItemFilenameCompleted(this, new GetItemFilenameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetItemFilenameAsync(int id) {
            this.GetItemFilenameAsync(id, null);
        }
        
        public void GetItemFilenameAsync(int id, object userState) {
            if ((this.onBeginGetItemFilenameDelegate == null)) {
                this.onBeginGetItemFilenameDelegate = new BeginOperationDelegate(this.OnBeginGetItemFilename);
            }
            if ((this.onEndGetItemFilenameDelegate == null)) {
                this.onEndGetItemFilenameDelegate = new EndOperationDelegate(this.OnEndGetItemFilename);
            }
            if ((this.onGetItemFilenameCompletedDelegate == null)) {
                this.onGetItemFilenameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetItemFilenameCompleted);
            }
            base.InvokeAsync(this.onBeginGetItemFilenameDelegate, new object[] {
                        id}, this.onEndGetItemFilenameDelegate, this.onGetItemFilenameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginGetItems(System.DateTime date, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetItems(date, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> ChickPhone.CamDataService.ICameraData.EndGetItems(System.IAsyncResult result) {
            return base.Channel.EndGetItems(result);
        }
        
        private System.IAsyncResult OnBeginGetItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime date = ((System.DateTime)(inValues[0]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginGetItems(date, callback, asyncState);
        }
        
        private object[] OnEndGetItems(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> retVal = ((ChickPhone.CamDataService.ICameraData)(this)).EndGetItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetItemsCompleted(object state) {
            if ((this.GetItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetItemsCompleted(this, new GetItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetItemsAsync(System.DateTime date) {
            this.GetItemsAsync(date, null);
        }
        
        public void GetItemsAsync(System.DateTime date, object userState) {
            if ((this.onBeginGetItemsDelegate == null)) {
                this.onBeginGetItemsDelegate = new BeginOperationDelegate(this.OnBeginGetItems);
            }
            if ((this.onEndGetItemsDelegate == null)) {
                this.onEndGetItemsDelegate = new EndOperationDelegate(this.OnEndGetItems);
            }
            if ((this.onGetItemsCompletedDelegate == null)) {
                this.onGetItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetItemsDelegate, new object[] {
                        date}, this.onEndGetItemsDelegate, this.onGetItemsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginGetItemsUtc(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetItemsUtc(dateTimeStartUtc, dateTimeEndUtc, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> ChickPhone.CamDataService.ICameraData.EndGetItemsUtc(System.IAsyncResult result) {
            return base.Channel.EndGetItemsUtc(result);
        }
        
        private System.IAsyncResult OnBeginGetItemsUtc(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dateTimeStartUtc = ((System.DateTime)(inValues[0]));
            System.DateTime dateTimeEndUtc = ((System.DateTime)(inValues[1]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginGetItemsUtc(dateTimeStartUtc, dateTimeEndUtc, callback, asyncState);
        }
        
        private object[] OnEndGetItemsUtc(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> retVal = ((ChickPhone.CamDataService.ICameraData)(this)).EndGetItemsUtc(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetItemsUtcCompleted(object state) {
            if ((this.GetItemsUtcCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetItemsUtcCompleted(this, new GetItemsUtcCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetItemsUtcAsync(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc) {
            this.GetItemsUtcAsync(dateTimeStartUtc, dateTimeEndUtc, null);
        }
        
        public void GetItemsUtcAsync(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc, object userState) {
            if ((this.onBeginGetItemsUtcDelegate == null)) {
                this.onBeginGetItemsUtcDelegate = new BeginOperationDelegate(this.OnBeginGetItemsUtc);
            }
            if ((this.onEndGetItemsUtcDelegate == null)) {
                this.onEndGetItemsUtcDelegate = new EndOperationDelegate(this.OnEndGetItemsUtc);
            }
            if ((this.onGetItemsUtcCompletedDelegate == null)) {
                this.onGetItemsUtcCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetItemsUtcCompleted);
            }
            base.InvokeAsync(this.onBeginGetItemsUtcDelegate, new object[] {
                        dateTimeStartUtc,
                        dateTimeEndUtc}, this.onEndGetItemsUtcDelegate, this.onGetItemsUtcCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginGetPreviousAndNextLogItems(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPreviousAndNextLogItems(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ChickPhone.CamDataService.PreviousAndNextLogItems ChickPhone.CamDataService.ICameraData.EndGetPreviousAndNextLogItems(System.IAsyncResult result) {
            return base.Channel.EndGetPreviousAndNextLogItems(result);
        }
        
        private System.IAsyncResult OnBeginGetPreviousAndNextLogItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginGetPreviousAndNextLogItems(id, callback, asyncState);
        }
        
        private object[] OnEndGetPreviousAndNextLogItems(System.IAsyncResult result) {
            ChickPhone.CamDataService.PreviousAndNextLogItems retVal = ((ChickPhone.CamDataService.ICameraData)(this)).EndGetPreviousAndNextLogItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPreviousAndNextLogItemsCompleted(object state) {
            if ((this.GetPreviousAndNextLogItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPreviousAndNextLogItemsCompleted(this, new GetPreviousAndNextLogItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPreviousAndNextLogItemsAsync(string id) {
            this.GetPreviousAndNextLogItemsAsync(id, null);
        }
        
        public void GetPreviousAndNextLogItemsAsync(string id, object userState) {
            if ((this.onBeginGetPreviousAndNextLogItemsDelegate == null)) {
                this.onBeginGetPreviousAndNextLogItemsDelegate = new BeginOperationDelegate(this.OnBeginGetPreviousAndNextLogItems);
            }
            if ((this.onEndGetPreviousAndNextLogItemsDelegate == null)) {
                this.onEndGetPreviousAndNextLogItemsDelegate = new EndOperationDelegate(this.OnEndGetPreviousAndNextLogItems);
            }
            if ((this.onGetPreviousAndNextLogItemsCompletedDelegate == null)) {
                this.onGetPreviousAndNextLogItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPreviousAndNextLogItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPreviousAndNextLogItemsDelegate, new object[] {
                        id}, this.onEndGetPreviousAndNextLogItemsDelegate, this.onGetPreviousAndNextLogItemsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginGetVideoFilename(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVideoFilename(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string ChickPhone.CamDataService.ICameraData.EndGetVideoFilename(System.IAsyncResult result) {
            return base.Channel.EndGetVideoFilename(result);
        }
        
        private System.IAsyncResult OnBeginGetVideoFilename(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginGetVideoFilename(id, callback, asyncState);
        }
        
        private object[] OnEndGetVideoFilename(System.IAsyncResult result) {
            string retVal = ((ChickPhone.CamDataService.ICameraData)(this)).EndGetVideoFilename(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVideoFilenameCompleted(object state) {
            if ((this.GetVideoFilenameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVideoFilenameCompleted(this, new GetVideoFilenameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVideoFilenameAsync(int id) {
            this.GetVideoFilenameAsync(id, null);
        }
        
        public void GetVideoFilenameAsync(int id, object userState) {
            if ((this.onBeginGetVideoFilenameDelegate == null)) {
                this.onBeginGetVideoFilenameDelegate = new BeginOperationDelegate(this.OnBeginGetVideoFilename);
            }
            if ((this.onEndGetVideoFilenameDelegate == null)) {
                this.onEndGetVideoFilenameDelegate = new EndOperationDelegate(this.OnEndGetVideoFilename);
            }
            if ((this.onGetVideoFilenameCompletedDelegate == null)) {
                this.onGetVideoFilenameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVideoFilenameCompleted);
            }
            base.InvokeAsync(this.onBeginGetVideoFilenameDelegate, new object[] {
                        id}, this.onEndGetVideoFilenameDelegate, this.onGetVideoFilenameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginGetVideos(System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVideos(startTime, endTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.VideoItem> ChickPhone.CamDataService.ICameraData.EndGetVideos(System.IAsyncResult result) {
            return base.Channel.EndGetVideos(result);
        }
        
        private System.IAsyncResult OnBeginGetVideos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime startTime = ((System.DateTime)(inValues[0]));
            System.DateTime endTime = ((System.DateTime)(inValues[1]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginGetVideos(startTime, endTime, callback, asyncState);
        }
        
        private object[] OnEndGetVideos(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.VideoItem> retVal = ((ChickPhone.CamDataService.ICameraData)(this)).EndGetVideos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVideosCompleted(object state) {
            if ((this.GetVideosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVideosCompleted(this, new GetVideosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVideosAsync(System.DateTime startTime, System.DateTime endTime) {
            this.GetVideosAsync(startTime, endTime, null);
        }
        
        public void GetVideosAsync(System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.onBeginGetVideosDelegate == null)) {
                this.onBeginGetVideosDelegate = new BeginOperationDelegate(this.OnBeginGetVideos);
            }
            if ((this.onEndGetVideosDelegate == null)) {
                this.onEndGetVideosDelegate = new EndOperationDelegate(this.OnEndGetVideos);
            }
            if ((this.onGetVideosCompletedDelegate == null)) {
                this.onGetVideosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVideosCompleted);
            }
            base.InvokeAsync(this.onBeginGetVideosDelegate, new object[] {
                        startTime,
                        endTime}, this.onEndGetVideosDelegate, this.onGetVideosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginAddVideo(System.DateTime timestamp, string fileName, int duration, int motion, int size, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddVideo(timestamp, fileName, duration, motion, size, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ChickPhone.CamDataService.ICameraData.EndAddVideo(System.IAsyncResult result) {
            base.Channel.EndAddVideo(result);
        }
        
        private System.IAsyncResult OnBeginAddVideo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime timestamp = ((System.DateTime)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            int duration = ((int)(inValues[2]));
            int motion = ((int)(inValues[3]));
            int size = ((int)(inValues[4]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginAddVideo(timestamp, fileName, duration, motion, size, callback, asyncState);
        }
        
        private object[] OnEndAddVideo(System.IAsyncResult result) {
            ((ChickPhone.CamDataService.ICameraData)(this)).EndAddVideo(result);
            return null;
        }
        
        private void OnAddVideoCompleted(object state) {
            if ((this.AddVideoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddVideoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddVideoAsync(System.DateTime timestamp, string fileName, int duration, int motion, int size) {
            this.AddVideoAsync(timestamp, fileName, duration, motion, size, null);
        }
        
        public void AddVideoAsync(System.DateTime timestamp, string fileName, int duration, int motion, int size, object userState) {
            if ((this.onBeginAddVideoDelegate == null)) {
                this.onBeginAddVideoDelegate = new BeginOperationDelegate(this.OnBeginAddVideo);
            }
            if ((this.onEndAddVideoDelegate == null)) {
                this.onEndAddVideoDelegate = new EndOperationDelegate(this.OnEndAddVideo);
            }
            if ((this.onAddVideoCompletedDelegate == null)) {
                this.onAddVideoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddVideoCompleted);
            }
            base.InvokeAsync(this.onBeginAddVideoDelegate, new object[] {
                        timestamp,
                        fileName,
                        duration,
                        motion,
                        size}, this.onEndAddVideoDelegate, this.onAddVideoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginAddAlert(System.DateTime timestamp, string fileName, System.DateTime receiveTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAlert(timestamp, fileName, receiveTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ChickPhone.CamDataService.ICameraData.EndAddAlert(System.IAsyncResult result) {
            base.Channel.EndAddAlert(result);
        }
        
        private System.IAsyncResult OnBeginAddAlert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime timestamp = ((System.DateTime)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            System.DateTime receiveTime = ((System.DateTime)(inValues[2]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginAddAlert(timestamp, fileName, receiveTime, callback, asyncState);
        }
        
        private object[] OnEndAddAlert(System.IAsyncResult result) {
            ((ChickPhone.CamDataService.ICameraData)(this)).EndAddAlert(result);
            return null;
        }
        
        private void OnAddAlertCompleted(object state) {
            if ((this.AddAlertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAlertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAlertAsync(System.DateTime timestamp, string fileName, System.DateTime receiveTime) {
            this.AddAlertAsync(timestamp, fileName, receiveTime, null);
        }
        
        public void AddAlertAsync(System.DateTime timestamp, string fileName, System.DateTime receiveTime, object userState) {
            if ((this.onBeginAddAlertDelegate == null)) {
                this.onBeginAddAlertDelegate = new BeginOperationDelegate(this.OnBeginAddAlert);
            }
            if ((this.onEndAddAlertDelegate == null)) {
                this.onEndAddAlertDelegate = new EndOperationDelegate(this.OnEndAddAlert);
            }
            if ((this.onAddAlertCompletedDelegate == null)) {
                this.onAddAlertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAlertCompleted);
            }
            base.InvokeAsync(this.onBeginAddAlertDelegate, new object[] {
                        timestamp,
                        fileName,
                        receiveTime}, this.onEndAddAlertDelegate, this.onAddAlertCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginGetAlertsBeforeDate(System.DateTime timestamp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlertsBeforeDate(timestamp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> ChickPhone.CamDataService.ICameraData.EndGetAlertsBeforeDate(System.IAsyncResult result) {
            return base.Channel.EndGetAlertsBeforeDate(result);
        }
        
        private System.IAsyncResult OnBeginGetAlertsBeforeDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime timestamp = ((System.DateTime)(inValues[0]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginGetAlertsBeforeDate(timestamp, callback, asyncState);
        }
        
        private object[] OnEndGetAlertsBeforeDate(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> retVal = ((ChickPhone.CamDataService.ICameraData)(this)).EndGetAlertsBeforeDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlertsBeforeDateCompleted(object state) {
            if ((this.GetAlertsBeforeDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlertsBeforeDateCompleted(this, new GetAlertsBeforeDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlertsBeforeDateAsync(System.DateTime timestamp) {
            this.GetAlertsBeforeDateAsync(timestamp, null);
        }
        
        public void GetAlertsBeforeDateAsync(System.DateTime timestamp, object userState) {
            if ((this.onBeginGetAlertsBeforeDateDelegate == null)) {
                this.onBeginGetAlertsBeforeDateDelegate = new BeginOperationDelegate(this.OnBeginGetAlertsBeforeDate);
            }
            if ((this.onEndGetAlertsBeforeDateDelegate == null)) {
                this.onEndGetAlertsBeforeDateDelegate = new EndOperationDelegate(this.OnEndGetAlertsBeforeDate);
            }
            if ((this.onGetAlertsBeforeDateCompletedDelegate == null)) {
                this.onGetAlertsBeforeDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlertsBeforeDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlertsBeforeDateDelegate, new object[] {
                        timestamp}, this.onEndGetAlertsBeforeDateDelegate, this.onGetAlertsBeforeDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginDeleteAlert(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAlert(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ChickPhone.CamDataService.ICameraData.EndDeleteAlert(System.IAsyncResult result) {
            base.Channel.EndDeleteAlert(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAlert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginDeleteAlert(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteAlert(System.IAsyncResult result) {
            ((ChickPhone.CamDataService.ICameraData)(this)).EndDeleteAlert(result);
            return null;
        }
        
        private void OnDeleteAlertCompleted(object state) {
            if ((this.DeleteAlertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAlertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAlertAsync(int id) {
            this.DeleteAlertAsync(id, null);
        }
        
        public void DeleteAlertAsync(int id, object userState) {
            if ((this.onBeginDeleteAlertDelegate == null)) {
                this.onBeginDeleteAlertDelegate = new BeginOperationDelegate(this.OnBeginDeleteAlert);
            }
            if ((this.onEndDeleteAlertDelegate == null)) {
                this.onEndDeleteAlertDelegate = new EndOperationDelegate(this.OnEndDeleteAlert);
            }
            if ((this.onDeleteAlertCompletedDelegate == null)) {
                this.onDeleteAlertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAlertCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAlertDelegate, new object[] {
                        id}, this.onEndDeleteAlertDelegate, this.onDeleteAlertCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ChickPhone.CamDataService.ICameraData.BeginDeleteVideo(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteVideo(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ChickPhone.CamDataService.ICameraData.EndDeleteVideo(System.IAsyncResult result) {
            base.Channel.EndDeleteVideo(result);
        }
        
        private System.IAsyncResult OnBeginDeleteVideo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((ChickPhone.CamDataService.ICameraData)(this)).BeginDeleteVideo(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteVideo(System.IAsyncResult result) {
            ((ChickPhone.CamDataService.ICameraData)(this)).EndDeleteVideo(result);
            return null;
        }
        
        private void OnDeleteVideoCompleted(object state) {
            if ((this.DeleteVideoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteVideoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteVideoAsync(int id) {
            this.DeleteVideoAsync(id, null);
        }
        
        public void DeleteVideoAsync(int id, object userState) {
            if ((this.onBeginDeleteVideoDelegate == null)) {
                this.onBeginDeleteVideoDelegate = new BeginOperationDelegate(this.OnBeginDeleteVideo);
            }
            if ((this.onEndDeleteVideoDelegate == null)) {
                this.onEndDeleteVideoDelegate = new EndOperationDelegate(this.OnEndDeleteVideo);
            }
            if ((this.onDeleteVideoCompletedDelegate == null)) {
                this.onDeleteVideoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteVideoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteVideoDelegate, new object[] {
                        id}, this.onEndDeleteVideoDelegate, this.onDeleteVideoCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ChickPhone.CamDataService.ICameraData CreateChannel() {
            return new CameraDataClientChannel(this);
        }
        
        private class CameraDataClientChannel : ChannelBase<ChickPhone.CamDataService.ICameraData>, ChickPhone.CamDataService.ICameraData {
            
            public CameraDataClientChannel(System.ServiceModel.ClientBase<ChickPhone.CamDataService.ICameraData> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetItemFilename(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetItemFilename", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetItemFilename(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetItemFilename", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetItems(System.DateTime date, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = date;
                System.IAsyncResult _result = base.BeginInvoke("GetItems", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> EndGetItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> _result = ((System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem>)(base.EndInvoke("GetItems", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetItemsUtc(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dateTimeStartUtc;
                _args[1] = dateTimeEndUtc;
                System.IAsyncResult _result = base.BeginInvoke("GetItemsUtc", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> EndGetItemsUtc(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> _result = ((System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem>)(base.EndInvoke("GetItemsUtc", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPreviousAndNextLogItems(string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetPreviousAndNextLogItems", _args, callback, asyncState);
                return _result;
            }
            
            public ChickPhone.CamDataService.PreviousAndNextLogItems EndGetPreviousAndNextLogItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                ChickPhone.CamDataService.PreviousAndNextLogItems _result = ((ChickPhone.CamDataService.PreviousAndNextLogItems)(base.EndInvoke("GetPreviousAndNextLogItems", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVideoFilename(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetVideoFilename", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetVideoFilename(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetVideoFilename", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVideos(System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = startTime;
                _args[1] = endTime;
                System.IAsyncResult _result = base.BeginInvoke("GetVideos", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.VideoItem> EndGetVideos(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.VideoItem> _result = ((System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.VideoItem>)(base.EndInvoke("GetVideos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddVideo(System.DateTime timestamp, string fileName, int duration, int motion, int size, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = timestamp;
                _args[1] = fileName;
                _args[2] = duration;
                _args[3] = motion;
                _args[4] = size;
                System.IAsyncResult _result = base.BeginInvoke("AddVideo", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddVideo(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddVideo", _args, result);
            }
            
            public System.IAsyncResult BeginAddAlert(System.DateTime timestamp, string fileName, System.DateTime receiveTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = timestamp;
                _args[1] = fileName;
                _args[2] = receiveTime;
                System.IAsyncResult _result = base.BeginInvoke("AddAlert", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddAlert(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddAlert", _args, result);
            }
            
            public System.IAsyncResult BeginGetAlertsBeforeDate(System.DateTime timestamp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = timestamp;
                System.IAsyncResult _result = base.BeginInvoke("GetAlertsBeforeDate", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> EndGetAlertsBeforeDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem> _result = ((System.Collections.ObjectModel.ObservableCollection<ChickPhone.CamDataService.LogItem>)(base.EndInvoke("GetAlertsBeforeDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAlert(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAlert", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteAlert(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteAlert", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteVideo(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteVideo", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteVideo(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteVideo", _args, result);
            }
        }
    }
}
