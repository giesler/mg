//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace msn2.net.QueuePlayer.Shared {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetPlaylist : DataSet {
        
        private PlaylistDataTable tablePlaylist;
        
        public DataSetPlaylist() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetPlaylist(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Playlist"] != null)) {
                    this.Tables.Add(new PlaylistDataTable(ds.Tables["Playlist"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlaylistDataTable Playlist {
            get {
                return this.tablePlaylist;
            }
        }
        
        public override DataSet Clone() {
            DataSetPlaylist cln = ((DataSetPlaylist)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Playlist"] != null)) {
                this.Tables.Add(new PlaylistDataTable(ds.Tables["Playlist"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePlaylist = ((PlaylistDataTable)(this.Tables["Playlist"]));
            if ((this.tablePlaylist != null)) {
                this.tablePlaylist.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetPlaylist";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetPlaylist.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePlaylist = new PlaylistDataTable();
            this.Tables.Add(this.tablePlaylist);
        }
        
        private bool ShouldSerializePlaylist() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PlaylistRowChangeEventHandler(object sender, PlaylistRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlaylistDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPlaylistId;
            
            private DataColumn columnPlaylistName;
            
            private DataColumn columnPlaylistCreated;
            
            private DataColumn columnPlaylistUpdated;
            
            private DataColumn columnTotalSongs;
            
            private DataColumn columnTotalDuration;
            
            internal PlaylistDataTable() : 
                    base("Playlist") {
                this.InitClass();
            }
            
            internal PlaylistDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PlaylistIdColumn {
                get {
                    return this.columnPlaylistId;
                }
            }
            
            internal DataColumn PlaylistNameColumn {
                get {
                    return this.columnPlaylistName;
                }
            }
            
            internal DataColumn PlaylistCreatedColumn {
                get {
                    return this.columnPlaylistCreated;
                }
            }
            
            internal DataColumn PlaylistUpdatedColumn {
                get {
                    return this.columnPlaylistUpdated;
                }
            }
            
            internal DataColumn TotalSongsColumn {
                get {
                    return this.columnTotalSongs;
                }
            }
            
            internal DataColumn TotalDurationColumn {
                get {
                    return this.columnTotalDuration;
                }
            }
            
            public PlaylistRow this[int index] {
                get {
                    return ((PlaylistRow)(this.Rows[index]));
                }
            }
            
            public event PlaylistRowChangeEventHandler PlaylistRowChanged;
            
            public event PlaylistRowChangeEventHandler PlaylistRowChanging;
            
            public event PlaylistRowChangeEventHandler PlaylistRowDeleted;
            
            public event PlaylistRowChangeEventHandler PlaylistRowDeleting;
            
            public void AddPlaylistRow(PlaylistRow row) {
                this.Rows.Add(row);
            }
            
            public PlaylistRow AddPlaylistRow(string PlaylistName, System.DateTime PlaylistCreated, System.DateTime PlaylistUpdated, int TotalSongs, System.Double TotalDuration) {
                PlaylistRow rowPlaylistRow = ((PlaylistRow)(this.NewRow()));
                rowPlaylistRow.ItemArray = new object[] {
                        null,
                        PlaylistName,
                        PlaylistCreated,
                        PlaylistUpdated,
                        TotalSongs,
                        TotalDuration};
                this.Rows.Add(rowPlaylistRow);
                return rowPlaylistRow;
            }
            
            public PlaylistRow FindByPlaylistId(int PlaylistId) {
                return ((PlaylistRow)(this.Rows.Find(new object[] {
                            PlaylistId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PlaylistDataTable cln = ((PlaylistDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PlaylistDataTable();
            }
            
            internal void InitVars() {
                this.columnPlaylistId = this.Columns["PlaylistId"];
                this.columnPlaylistName = this.Columns["PlaylistName"];
                this.columnPlaylistCreated = this.Columns["PlaylistCreated"];
                this.columnPlaylistUpdated = this.Columns["PlaylistUpdated"];
                this.columnTotalSongs = this.Columns["TotalSongs"];
                this.columnTotalDuration = this.Columns["TotalDuration"];
            }
            
            private void InitClass() {
                this.columnPlaylistId = new DataColumn("PlaylistId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlaylistId);
                this.columnPlaylistName = new DataColumn("PlaylistName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlaylistName);
                this.columnPlaylistCreated = new DataColumn("PlaylistCreated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlaylistCreated);
                this.columnPlaylistUpdated = new DataColumn("PlaylistUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlaylistUpdated);
                this.columnTotalSongs = new DataColumn("TotalSongs", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalSongs);
                this.columnTotalDuration = new DataColumn("TotalDuration", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalDuration);
                this.Constraints.Add(new UniqueConstraint("DataSetPlaylistKey1", new DataColumn[] {
                                this.columnPlaylistId}, true));
                this.columnPlaylistId.AutoIncrement = true;
                this.columnPlaylistId.AllowDBNull = false;
                this.columnPlaylistId.ReadOnly = true;
                this.columnPlaylistId.Unique = true;
            }
            
            public PlaylistRow NewPlaylistRow() {
                return ((PlaylistRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PlaylistRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PlaylistRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlaylistRowChanged != null)) {
                    this.PlaylistRowChanged(this, new PlaylistRowChangeEvent(((PlaylistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlaylistRowChanging != null)) {
                    this.PlaylistRowChanging(this, new PlaylistRowChangeEvent(((PlaylistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlaylistRowDeleted != null)) {
                    this.PlaylistRowDeleted(this, new PlaylistRowChangeEvent(((PlaylistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlaylistRowDeleting != null)) {
                    this.PlaylistRowDeleting(this, new PlaylistRowChangeEvent(((PlaylistRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePlaylistRow(PlaylistRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlaylistRow : DataRow {
            
            private PlaylistDataTable tablePlaylist;
            
            internal PlaylistRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlaylist = ((PlaylistDataTable)(this.Table));
            }
            
            public int PlaylistId {
                get {
                    return ((int)(this[this.tablePlaylist.PlaylistIdColumn]));
                }
                set {
                    this[this.tablePlaylist.PlaylistIdColumn] = value;
                }
            }
            
            public string PlaylistName {
                get {
                    try {
                        return ((string)(this[this.tablePlaylist.PlaylistNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaylist.PlaylistNameColumn] = value;
                }
            }
            
            public System.DateTime PlaylistCreated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePlaylist.PlaylistCreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaylist.PlaylistCreatedColumn] = value;
                }
            }
            
            public System.DateTime PlaylistUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePlaylist.PlaylistUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaylist.PlaylistUpdatedColumn] = value;
                }
            }
            
            public int TotalSongs {
                get {
                    try {
                        return ((int)(this[this.tablePlaylist.TotalSongsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaylist.TotalSongsColumn] = value;
                }
            }
            
            public System.Double TotalDuration {
                get {
                    try {
                        return ((System.Double)(this[this.tablePlaylist.TotalDurationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaylist.TotalDurationColumn] = value;
                }
            }
            
            public bool IsPlaylistNameNull() {
                return this.IsNull(this.tablePlaylist.PlaylistNameColumn);
            }
            
            public void SetPlaylistNameNull() {
                this[this.tablePlaylist.PlaylistNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlaylistCreatedNull() {
                return this.IsNull(this.tablePlaylist.PlaylistCreatedColumn);
            }
            
            public void SetPlaylistCreatedNull() {
                this[this.tablePlaylist.PlaylistCreatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlaylistUpdatedNull() {
                return this.IsNull(this.tablePlaylist.PlaylistUpdatedColumn);
            }
            
            public void SetPlaylistUpdatedNull() {
                this[this.tablePlaylist.PlaylistUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalSongsNull() {
                return this.IsNull(this.tablePlaylist.TotalSongsColumn);
            }
            
            public void SetTotalSongsNull() {
                this[this.tablePlaylist.TotalSongsColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalDurationNull() {
                return this.IsNull(this.tablePlaylist.TotalDurationColumn);
            }
            
            public void SetTotalDurationNull() {
                this[this.tablePlaylist.TotalDurationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlaylistRowChangeEvent : EventArgs {
            
            private PlaylistRow eventRow;
            
            private DataRowAction eventAction;
            
            public PlaylistRowChangeEvent(PlaylistRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PlaylistRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
