//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace msn2.net.Common {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetCategory : DataSet {
        
        private FavoritesCategoryDataTable tableFavoritesCategory;
        
        public DataSetCategory() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetCategory(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FavoritesCategory"] != null)) {
                    this.Tables.Add(new FavoritesCategoryDataTable(ds.Tables["FavoritesCategory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FavoritesCategoryDataTable FavoritesCategory {
            get {
                return this.tableFavoritesCategory;
            }
        }
        
        public override DataSet Clone() {
            DataSetCategory cln = ((DataSetCategory)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FavoritesCategory"] != null)) {
                this.Tables.Add(new FavoritesCategoryDataTable(ds.Tables["FavoritesCategory"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFavoritesCategory = ((FavoritesCategoryDataTable)(this.Tables["FavoritesCategory"]));
            if ((this.tableFavoritesCategory != null)) {
                this.tableFavoritesCategory.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetCategory";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetCategory.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFavoritesCategory = new FavoritesCategoryDataTable();
            this.Tables.Add(this.tableFavoritesCategory);
        }
        
        private bool ShouldSerializeFavoritesCategory() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FavoritesCategoryRowChangeEventHandler(object sender, FavoritesCategoryRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FavoritesCategoryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCategoryId;
            
            private DataColumn columnCategoryName;
            
            private DataColumn columnParentId;
            
            private DataColumn columnUserId;
            
            private DataColumn columnItemType;
            
            private DataColumn columnItemUrl;
            
            private DataColumn columnItemContents;
            
            internal FavoritesCategoryDataTable() : 
                    base("FavoritesCategory") {
                this.InitClass();
            }
            
            internal FavoritesCategoryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CategoryIdColumn {
                get {
                    return this.columnCategoryId;
                }
            }
            
            internal DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            internal DataColumn ParentIdColumn {
                get {
                    return this.columnParentId;
                }
            }
            
            internal DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            internal DataColumn ItemTypeColumn {
                get {
                    return this.columnItemType;
                }
            }
            
            internal DataColumn ItemUrlColumn {
                get {
                    return this.columnItemUrl;
                }
            }
            
            internal DataColumn ItemContentsColumn {
                get {
                    return this.columnItemContents;
                }
            }
            
            public FavoritesCategoryRow this[int index] {
                get {
                    return ((FavoritesCategoryRow)(this.Rows[index]));
                }
            }
            
            public event FavoritesCategoryRowChangeEventHandler FavoritesCategoryRowChanged;
            
            public event FavoritesCategoryRowChangeEventHandler FavoritesCategoryRowChanging;
            
            public event FavoritesCategoryRowChangeEventHandler FavoritesCategoryRowDeleted;
            
            public event FavoritesCategoryRowChangeEventHandler FavoritesCategoryRowDeleting;
            
            public void AddFavoritesCategoryRow(FavoritesCategoryRow row) {
                this.Rows.Add(row);
            }
            
            public FavoritesCategoryRow AddFavoritesCategoryRow(System.Guid CategoryId, string CategoryName, System.Guid ParentId, System.Guid UserId, string ItemType, string ItemUrl, string ItemContents) {
                FavoritesCategoryRow rowFavoritesCategoryRow = ((FavoritesCategoryRow)(this.NewRow()));
                rowFavoritesCategoryRow.ItemArray = new object[] {
                        CategoryId,
                        CategoryName,
                        ParentId,
                        UserId,
                        ItemType,
                        ItemUrl,
                        ItemContents};
                this.Rows.Add(rowFavoritesCategoryRow);
                return rowFavoritesCategoryRow;
            }
            
            public FavoritesCategoryRow FindByCategoryId(System.Guid CategoryId) {
                return ((FavoritesCategoryRow)(this.Rows.Find(new object[] {
                            CategoryId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FavoritesCategoryDataTable cln = ((FavoritesCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FavoritesCategoryDataTable();
            }
            
            internal void InitVars() {
                this.columnCategoryId = this.Columns["CategoryId"];
                this.columnCategoryName = this.Columns["CategoryName"];
                this.columnParentId = this.Columns["ParentId"];
                this.columnUserId = this.Columns["UserId"];
                this.columnItemType = this.Columns["ItemType"];
                this.columnItemUrl = this.Columns["ItemUrl"];
                this.columnItemContents = this.Columns["ItemContents"];
            }
            
            private void InitClass() {
                this.columnCategoryId = new DataColumn("CategoryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCategoryId);
                this.columnCategoryName = new DataColumn("CategoryName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCategoryName);
                this.columnParentId = new DataColumn("ParentId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentId);
                this.columnUserId = new DataColumn("UserId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserId);
                this.columnItemType = new DataColumn("ItemType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemType);
                this.columnItemUrl = new DataColumn("ItemUrl", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemUrl);
                this.columnItemContents = new DataColumn("ItemContents", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemContents);
                this.Constraints.Add(new UniqueConstraint("DataSetCategoryKey1", new DataColumn[] {
                                this.columnCategoryId}, true));
                this.columnCategoryId.AllowDBNull = false;
                this.columnCategoryId.Unique = true;
            }
            
            public FavoritesCategoryRow NewFavoritesCategoryRow() {
                return ((FavoritesCategoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FavoritesCategoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FavoritesCategoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FavoritesCategoryRowChanged != null)) {
                    this.FavoritesCategoryRowChanged(this, new FavoritesCategoryRowChangeEvent(((FavoritesCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FavoritesCategoryRowChanging != null)) {
                    this.FavoritesCategoryRowChanging(this, new FavoritesCategoryRowChangeEvent(((FavoritesCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FavoritesCategoryRowDeleted != null)) {
                    this.FavoritesCategoryRowDeleted(this, new FavoritesCategoryRowChangeEvent(((FavoritesCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FavoritesCategoryRowDeleting != null)) {
                    this.FavoritesCategoryRowDeleting(this, new FavoritesCategoryRowChangeEvent(((FavoritesCategoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFavoritesCategoryRow(FavoritesCategoryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FavoritesCategoryRow : DataRow {
            
            private FavoritesCategoryDataTable tableFavoritesCategory;
            
            internal FavoritesCategoryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFavoritesCategory = ((FavoritesCategoryDataTable)(this.Table));
            }
            
            public System.Guid CategoryId {
                get {
                    return ((System.Guid)(this[this.tableFavoritesCategory.CategoryIdColumn]));
                }
                set {
                    this[this.tableFavoritesCategory.CategoryIdColumn] = value;
                }
            }
            
            public string CategoryName {
                get {
                    try {
                        return ((string)(this[this.tableFavoritesCategory.CategoryNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavoritesCategory.CategoryNameColumn] = value;
                }
            }
            
            public System.Guid ParentId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableFavoritesCategory.ParentIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavoritesCategory.ParentIdColumn] = value;
                }
            }
            
            public System.Guid UserId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableFavoritesCategory.UserIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavoritesCategory.UserIdColumn] = value;
                }
            }
            
            public string ItemType {
                get {
                    try {
                        return ((string)(this[this.tableFavoritesCategory.ItemTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavoritesCategory.ItemTypeColumn] = value;
                }
            }
            
            public string ItemUrl {
                get {
                    try {
                        return ((string)(this[this.tableFavoritesCategory.ItemUrlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavoritesCategory.ItemUrlColumn] = value;
                }
            }
            
            public string ItemContents {
                get {
                    try {
                        return ((string)(this[this.tableFavoritesCategory.ItemContentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavoritesCategory.ItemContentsColumn] = value;
                }
            }
            
            public bool IsCategoryNameNull() {
                return this.IsNull(this.tableFavoritesCategory.CategoryNameColumn);
            }
            
            public void SetCategoryNameNull() {
                this[this.tableFavoritesCategory.CategoryNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentIdNull() {
                return this.IsNull(this.tableFavoritesCategory.ParentIdColumn);
            }
            
            public void SetParentIdNull() {
                this[this.tableFavoritesCategory.ParentIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIdNull() {
                return this.IsNull(this.tableFavoritesCategory.UserIdColumn);
            }
            
            public void SetUserIdNull() {
                this[this.tableFavoritesCategory.UserIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemTypeNull() {
                return this.IsNull(this.tableFavoritesCategory.ItemTypeColumn);
            }
            
            public void SetItemTypeNull() {
                this[this.tableFavoritesCategory.ItemTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemUrlNull() {
                return this.IsNull(this.tableFavoritesCategory.ItemUrlColumn);
            }
            
            public void SetItemUrlNull() {
                this[this.tableFavoritesCategory.ItemUrlColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemContentsNull() {
                return this.IsNull(this.tableFavoritesCategory.ItemContentsColumn);
            }
            
            public void SetItemContentsNull() {
                this[this.tableFavoritesCategory.ItemContentsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FavoritesCategoryRowChangeEvent : EventArgs {
            
            private FavoritesCategoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public FavoritesCategoryRowChangeEvent(FavoritesCategoryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FavoritesCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
