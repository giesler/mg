//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace msn2.net.Common {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetItem : DataSet {
        
        private FavItemDataTable tableFavItem;
        
        public DataSetItem() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetItem(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FavItem"] != null)) {
                    this.Tables.Add(new FavItemDataTable(ds.Tables["FavItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FavItemDataTable FavItem {
            get {
                return this.tableFavItem;
            }
        }
        
        public override DataSet Clone() {
            DataSetItem cln = ((DataSetItem)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FavItem"] != null)) {
                this.Tables.Add(new FavItemDataTable(ds.Tables["FavItem"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFavItem = ((FavItemDataTable)(this.Tables["FavItem"]));
            if ((this.tableFavItem != null)) {
                this.tableFavItem.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetItem";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetItem.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFavItem = new FavItemDataTable();
            this.Tables.Add(this.tableFavItem);
        }
        
        private bool ShouldSerializeFavItem() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FavItemRowChangeEventHandler(object sender, FavItemRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FavItemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFavItemId;
            
            private DataColumn columnFavGroupId;
            
            private DataColumn columnFavItemName;
            
            private DataColumn columnFavItemUrl;
            
            internal FavItemDataTable() : 
                    base("FavItem") {
                this.InitClass();
            }
            
            internal FavItemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FavItemIdColumn {
                get {
                    return this.columnFavItemId;
                }
            }
            
            internal DataColumn FavGroupIdColumn {
                get {
                    return this.columnFavGroupId;
                }
            }
            
            internal DataColumn FavItemNameColumn {
                get {
                    return this.columnFavItemName;
                }
            }
            
            internal DataColumn FavItemUrlColumn {
                get {
                    return this.columnFavItemUrl;
                }
            }
            
            public FavItemRow this[int index] {
                get {
                    return ((FavItemRow)(this.Rows[index]));
                }
            }
            
            public event FavItemRowChangeEventHandler FavItemRowChanged;
            
            public event FavItemRowChangeEventHandler FavItemRowChanging;
            
            public event FavItemRowChangeEventHandler FavItemRowDeleted;
            
            public event FavItemRowChangeEventHandler FavItemRowDeleting;
            
            public void AddFavItemRow(FavItemRow row) {
                this.Rows.Add(row);
            }
            
            public FavItemRow AddFavItemRow(int FavGroupId, string FavItemName, string FavItemUrl) {
                FavItemRow rowFavItemRow = ((FavItemRow)(this.NewRow()));
                rowFavItemRow.ItemArray = new object[] {
                        null,
                        FavGroupId,
                        FavItemName,
                        FavItemUrl};
                this.Rows.Add(rowFavItemRow);
                return rowFavItemRow;
            }
            
            public FavItemRow FindByFavItemId(int FavItemId) {
                return ((FavItemRow)(this.Rows.Find(new object[] {
                            FavItemId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FavItemDataTable cln = ((FavItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FavItemDataTable();
            }
            
            internal void InitVars() {
                this.columnFavItemId = this.Columns["FavItemId"];
                this.columnFavGroupId = this.Columns["FavGroupId"];
                this.columnFavItemName = this.Columns["FavItemName"];
                this.columnFavItemUrl = this.Columns["FavItemUrl"];
            }
            
            private void InitClass() {
                this.columnFavItemId = new DataColumn("FavItemId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFavItemId);
                this.columnFavGroupId = new DataColumn("FavGroupId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFavGroupId);
                this.columnFavItemName = new DataColumn("FavItemName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFavItemName);
                this.columnFavItemUrl = new DataColumn("FavItemUrl", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFavItemUrl);
                this.Constraints.Add(new UniqueConstraint("DataSetItemKey1", new DataColumn[] {
                                this.columnFavItemId}, true));
                this.columnFavItemId.AutoIncrement = true;
                this.columnFavItemId.AllowDBNull = false;
                this.columnFavItemId.ReadOnly = true;
                this.columnFavItemId.Unique = true;
            }
            
            public FavItemRow NewFavItemRow() {
                return ((FavItemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FavItemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FavItemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FavItemRowChanged != null)) {
                    this.FavItemRowChanged(this, new FavItemRowChangeEvent(((FavItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FavItemRowChanging != null)) {
                    this.FavItemRowChanging(this, new FavItemRowChangeEvent(((FavItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FavItemRowDeleted != null)) {
                    this.FavItemRowDeleted(this, new FavItemRowChangeEvent(((FavItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FavItemRowDeleting != null)) {
                    this.FavItemRowDeleting(this, new FavItemRowChangeEvent(((FavItemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFavItemRow(FavItemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FavItemRow : DataRow {
            
            private FavItemDataTable tableFavItem;
            
            internal FavItemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFavItem = ((FavItemDataTable)(this.Table));
            }
            
            public int FavItemId {
                get {
                    return ((int)(this[this.tableFavItem.FavItemIdColumn]));
                }
                set {
                    this[this.tableFavItem.FavItemIdColumn] = value;
                }
            }
            
            public int FavGroupId {
                get {
                    try {
                        return ((int)(this[this.tableFavItem.FavGroupIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavItem.FavGroupIdColumn] = value;
                }
            }
            
            public string FavItemName {
                get {
                    try {
                        return ((string)(this[this.tableFavItem.FavItemNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavItem.FavItemNameColumn] = value;
                }
            }
            
            public string FavItemUrl {
                get {
                    try {
                        return ((string)(this[this.tableFavItem.FavItemUrlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFavItem.FavItemUrlColumn] = value;
                }
            }
            
            public bool IsFavGroupIdNull() {
                return this.IsNull(this.tableFavItem.FavGroupIdColumn);
            }
            
            public void SetFavGroupIdNull() {
                this[this.tableFavItem.FavGroupIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsFavItemNameNull() {
                return this.IsNull(this.tableFavItem.FavItemNameColumn);
            }
            
            public void SetFavItemNameNull() {
                this[this.tableFavItem.FavItemNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFavItemUrlNull() {
                return this.IsNull(this.tableFavItem.FavItemUrlColumn);
            }
            
            public void SetFavItemUrlNull() {
                this[this.tableFavItem.FavItemUrlColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FavItemRowChangeEvent : EventArgs {
            
            private FavItemRow eventRow;
            
            private DataRowAction eventAction;
            
            public FavItemRowChangeEvent(FavItemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FavItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
