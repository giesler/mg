//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace msn2.net.Configuration {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetLogin : DataSet {
        
        private LoginDataTable tableLogin;
        
        public DataSetLogin() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetLogin(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Login"] != null)) {
                    this.Tables.Add(new LoginDataTable(ds.Tables["Login"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LoginDataTable Login {
            get {
                return this.tableLogin;
            }
        }
        
        public override DataSet Clone() {
            DataSetLogin cln = ((DataSetLogin)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Login"] != null)) {
                this.Tables.Add(new LoginDataTable(ds.Tables["Login"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableLogin = ((LoginDataTable)(this.Tables["Login"]));
            if ((this.tableLogin != null)) {
                this.tableLogin.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetLogin";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetLogin.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableLogin = new LoginDataTable();
            this.Tables.Add(this.tableLogin);
        }
        
        private bool ShouldSerializeLogin() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void LoginRowChangeEventHandler(object sender, LoginRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LoginDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMachineId;
            
            private DataColumn columnMachineName;
            
            private DataColumn columnSigninId;
            
            private DataColumn columnSigninName;
            
            internal LoginDataTable() : 
                    base("Login") {
                this.InitClass();
            }
            
            internal LoginDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MachineIdColumn {
                get {
                    return this.columnMachineId;
                }
            }
            
            internal DataColumn MachineNameColumn {
                get {
                    return this.columnMachineName;
                }
            }
            
            internal DataColumn SigninIdColumn {
                get {
                    return this.columnSigninId;
                }
            }
            
            internal DataColumn SigninNameColumn {
                get {
                    return this.columnSigninName;
                }
            }
            
            public LoginRow this[int index] {
                get {
                    return ((LoginRow)(this.Rows[index]));
                }
            }
            
            public event LoginRowChangeEventHandler LoginRowChanged;
            
            public event LoginRowChangeEventHandler LoginRowChanging;
            
            public event LoginRowChangeEventHandler LoginRowDeleted;
            
            public event LoginRowChangeEventHandler LoginRowDeleting;
            
            public void AddLoginRow(LoginRow row) {
                this.Rows.Add(row);
            }
            
            public LoginRow AddLoginRow(System.Guid MachineId, string MachineName, System.Guid SigninId, string SigninName) {
                LoginRow rowLoginRow = ((LoginRow)(this.NewRow()));
                rowLoginRow.ItemArray = new object[] {
                        MachineId,
                        MachineName,
                        SigninId,
                        SigninName};
                this.Rows.Add(rowLoginRow);
                return rowLoginRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LoginDataTable cln = ((LoginDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LoginDataTable();
            }
            
            internal void InitVars() {
                this.columnMachineId = this.Columns["MachineId"];
                this.columnMachineName = this.Columns["MachineName"];
                this.columnSigninId = this.Columns["SigninId"];
                this.columnSigninName = this.Columns["SigninName"];
            }
            
            private void InitClass() {
                this.columnMachineId = new DataColumn("MachineId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMachineId);
                this.columnMachineName = new DataColumn("MachineName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMachineName);
                this.columnSigninId = new DataColumn("SigninId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSigninId);
                this.columnSigninName = new DataColumn("SigninName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSigninName);
                this.Constraints.Add(new UniqueConstraint("DataSetLoginKey1", new DataColumn[] {
                                this.columnMachineName,
                                this.columnSigninName}, false));
                this.columnMachineId.AllowDBNull = false;
                this.columnSigninId.AllowDBNull = false;
            }
            
            public LoginRow NewLoginRow() {
                return ((LoginRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LoginRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LoginRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoginRowChanged != null)) {
                    this.LoginRowChanged(this, new LoginRowChangeEvent(((LoginRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoginRowChanging != null)) {
                    this.LoginRowChanging(this, new LoginRowChangeEvent(((LoginRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoginRowDeleted != null)) {
                    this.LoginRowDeleted(this, new LoginRowChangeEvent(((LoginRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoginRowDeleting != null)) {
                    this.LoginRowDeleting(this, new LoginRowChangeEvent(((LoginRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLoginRow(LoginRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LoginRow : DataRow {
            
            private LoginDataTable tableLogin;
            
            internal LoginRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLogin = ((LoginDataTable)(this.Table));
            }
            
            public System.Guid MachineId {
                get {
                    return ((System.Guid)(this[this.tableLogin.MachineIdColumn]));
                }
                set {
                    this[this.tableLogin.MachineIdColumn] = value;
                }
            }
            
            public string MachineName {
                get {
                    try {
                        return ((string)(this[this.tableLogin.MachineNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogin.MachineNameColumn] = value;
                }
            }
            
            public System.Guid SigninId {
                get {
                    return ((System.Guid)(this[this.tableLogin.SigninIdColumn]));
                }
                set {
                    this[this.tableLogin.SigninIdColumn] = value;
                }
            }
            
            public string SigninName {
                get {
                    try {
                        return ((string)(this[this.tableLogin.SigninNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogin.SigninNameColumn] = value;
                }
            }
            
            public bool IsMachineNameNull() {
                return this.IsNull(this.tableLogin.MachineNameColumn);
            }
            
            public void SetMachineNameNull() {
                this[this.tableLogin.MachineNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSigninNameNull() {
                return this.IsNull(this.tableLogin.SigninNameColumn);
            }
            
            public void SetSigninNameNull() {
                this[this.tableLogin.SigninNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LoginRowChangeEvent : EventArgs {
            
            private LoginRow eventRow;
            
            private DataRowAction eventAction;
            
            public LoginRowChangeEvent(LoginRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LoginRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
