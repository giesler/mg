//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomeServices.CamData {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class LogItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreviousAndNextLogItems", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class PreviousAndNextLogItems : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HomeServices.CamData.LogItem NextItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HomeServices.CamData.LogItem PreviousItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HomeServices.CamData.LogItem NextItem {
            get {
                return this.NextItemField;
            }
            set {
                if ((object.ReferenceEquals(this.NextItemField, value) != true)) {
                    this.NextItemField = value;
                    this.RaisePropertyChanged("NextItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HomeServices.CamData.LogItem PreviousItem {
            get {
                return this.PreviousItemField;
            }
            set {
                if ((object.ReferenceEquals(this.PreviousItemField, value) != true)) {
                    this.PreviousItemField = value;
                    this.RaisePropertyChanged("PreviousItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VideoItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class VideoItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MotionPercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MotionPercentage {
            get {
                return this.MotionPercentageField;
            }
            set {
                if ((this.MotionPercentageField.Equals(value) != true)) {
                    this.MotionPercentageField = value;
                    this.RaisePropertyChanged("MotionPercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CamData.ICameraData")]
    public interface ICameraData {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetItemFilename", ReplyAction="http://tempuri.org/ICameraData/GetItemFilenameResponse")]
        string GetItemFilename(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetItemFilename", ReplyAction="http://tempuri.org/ICameraData/GetItemFilenameResponse")]
        System.Threading.Tasks.Task<string> GetItemFilenameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetItems", ReplyAction="http://tempuri.org/ICameraData/GetItemsResponse")]
        HomeServices.CamData.LogItem[] GetItems(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetItems", ReplyAction="http://tempuri.org/ICameraData/GetItemsResponse")]
        System.Threading.Tasks.Task<HomeServices.CamData.LogItem[]> GetItemsAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetItemsUtc", ReplyAction="http://tempuri.org/ICameraData/GetItemsUtcResponse")]
        HomeServices.CamData.LogItem[] GetItemsUtc(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetItemsUtc", ReplyAction="http://tempuri.org/ICameraData/GetItemsUtcResponse")]
        System.Threading.Tasks.Task<HomeServices.CamData.LogItem[]> GetItemsUtcAsync(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetPreviousAndNextLogItems", ReplyAction="http://tempuri.org/ICameraData/GetPreviousAndNextLogItemsResponse")]
        HomeServices.CamData.PreviousAndNextLogItems GetPreviousAndNextLogItems(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetPreviousAndNextLogItems", ReplyAction="http://tempuri.org/ICameraData/GetPreviousAndNextLogItemsResponse")]
        System.Threading.Tasks.Task<HomeServices.CamData.PreviousAndNextLogItems> GetPreviousAndNextLogItemsAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetVideoFilename", ReplyAction="http://tempuri.org/ICameraData/GetVideoFilenameResponse")]
        string GetVideoFilename(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetVideoFilename", ReplyAction="http://tempuri.org/ICameraData/GetVideoFilenameResponse")]
        System.Threading.Tasks.Task<string> GetVideoFilenameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetVideos", ReplyAction="http://tempuri.org/ICameraData/GetVideosResponse")]
        HomeServices.CamData.VideoItem[] GetVideos(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetVideos", ReplyAction="http://tempuri.org/ICameraData/GetVideosResponse")]
        System.Threading.Tasks.Task<HomeServices.CamData.VideoItem[]> GetVideosAsync(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/AddVideo", ReplyAction="http://tempuri.org/ICameraData/AddVideoResponse")]
        void AddVideo(System.DateTime timestamp, string fileName, int duration, int motion, int size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/AddVideo", ReplyAction="http://tempuri.org/ICameraData/AddVideoResponse")]
        System.Threading.Tasks.Task AddVideoAsync(System.DateTime timestamp, string fileName, int duration, int motion, int size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/AddAlert", ReplyAction="http://tempuri.org/ICameraData/AddAlertResponse")]
        void AddAlert(System.DateTime timestamp, string fileName, System.DateTime receiveTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/AddAlert", ReplyAction="http://tempuri.org/ICameraData/AddAlertResponse")]
        System.Threading.Tasks.Task AddAlertAsync(System.DateTime timestamp, string fileName, System.DateTime receiveTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetAlertsBeforeDate", ReplyAction="http://tempuri.org/ICameraData/GetAlertsBeforeDateResponse")]
        HomeServices.CamData.LogItem[] GetAlertsBeforeDate(System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/GetAlertsBeforeDate", ReplyAction="http://tempuri.org/ICameraData/GetAlertsBeforeDateResponse")]
        System.Threading.Tasks.Task<HomeServices.CamData.LogItem[]> GetAlertsBeforeDateAsync(System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/DeleteAlert", ReplyAction="http://tempuri.org/ICameraData/DeleteAlertResponse")]
        void DeleteAlert(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/DeleteAlert", ReplyAction="http://tempuri.org/ICameraData/DeleteAlertResponse")]
        System.Threading.Tasks.Task DeleteAlertAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/DeleteVideo", ReplyAction="http://tempuri.org/ICameraData/DeleteVideoResponse")]
        void DeleteVideo(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraData/DeleteVideo", ReplyAction="http://tempuri.org/ICameraData/DeleteVideoResponse")]
        System.Threading.Tasks.Task DeleteVideoAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICameraDataChannel : HomeServices.CamData.ICameraData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CameraDataClient : System.ServiceModel.ClientBase<HomeServices.CamData.ICameraData>, HomeServices.CamData.ICameraData {
        
        public CameraDataClient() {
        }
        
        public CameraDataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CameraDataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraDataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraDataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetItemFilename(int id) {
            return base.Channel.GetItemFilename(id);
        }
        
        public System.Threading.Tasks.Task<string> GetItemFilenameAsync(int id) {
            return base.Channel.GetItemFilenameAsync(id);
        }
        
        public HomeServices.CamData.LogItem[] GetItems(System.DateTime date) {
            return base.Channel.GetItems(date);
        }
        
        public System.Threading.Tasks.Task<HomeServices.CamData.LogItem[]> GetItemsAsync(System.DateTime date) {
            return base.Channel.GetItemsAsync(date);
        }
        
        public HomeServices.CamData.LogItem[] GetItemsUtc(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc) {
            return base.Channel.GetItemsUtc(dateTimeStartUtc, dateTimeEndUtc);
        }
        
        public System.Threading.Tasks.Task<HomeServices.CamData.LogItem[]> GetItemsUtcAsync(System.DateTime dateTimeStartUtc, System.DateTime dateTimeEndUtc) {
            return base.Channel.GetItemsUtcAsync(dateTimeStartUtc, dateTimeEndUtc);
        }
        
        public HomeServices.CamData.PreviousAndNextLogItems GetPreviousAndNextLogItems(string id) {
            return base.Channel.GetPreviousAndNextLogItems(id);
        }
        
        public System.Threading.Tasks.Task<HomeServices.CamData.PreviousAndNextLogItems> GetPreviousAndNextLogItemsAsync(string id) {
            return base.Channel.GetPreviousAndNextLogItemsAsync(id);
        }
        
        public string GetVideoFilename(int id) {
            return base.Channel.GetVideoFilename(id);
        }
        
        public System.Threading.Tasks.Task<string> GetVideoFilenameAsync(int id) {
            return base.Channel.GetVideoFilenameAsync(id);
        }
        
        public HomeServices.CamData.VideoItem[] GetVideos(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetVideos(startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<HomeServices.CamData.VideoItem[]> GetVideosAsync(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetVideosAsync(startTime, endTime);
        }
        
        public void AddVideo(System.DateTime timestamp, string fileName, int duration, int motion, int size) {
            base.Channel.AddVideo(timestamp, fileName, duration, motion, size);
        }
        
        public System.Threading.Tasks.Task AddVideoAsync(System.DateTime timestamp, string fileName, int duration, int motion, int size) {
            return base.Channel.AddVideoAsync(timestamp, fileName, duration, motion, size);
        }
        
        public void AddAlert(System.DateTime timestamp, string fileName, System.DateTime receiveTime) {
            base.Channel.AddAlert(timestamp, fileName, receiveTime);
        }
        
        public System.Threading.Tasks.Task AddAlertAsync(System.DateTime timestamp, string fileName, System.DateTime receiveTime) {
            return base.Channel.AddAlertAsync(timestamp, fileName, receiveTime);
        }
        
        public HomeServices.CamData.LogItem[] GetAlertsBeforeDate(System.DateTime timestamp) {
            return base.Channel.GetAlertsBeforeDate(timestamp);
        }
        
        public System.Threading.Tasks.Task<HomeServices.CamData.LogItem[]> GetAlertsBeforeDateAsync(System.DateTime timestamp) {
            return base.Channel.GetAlertsBeforeDateAsync(timestamp);
        }
        
        public void DeleteAlert(int id) {
            base.Channel.DeleteAlert(id);
        }
        
        public System.Threading.Tasks.Task DeleteAlertAsync(int id) {
            return base.Channel.DeleteAlertAsync(id);
        }
        
        public void DeleteVideo(int id) {
            base.Channel.DeleteVideo(id);
        }
        
        public System.Threading.Tasks.Task DeleteVideoAsync(int id) {
            return base.Channel.DeleteVideoAsync(id);
        }
    }
}
