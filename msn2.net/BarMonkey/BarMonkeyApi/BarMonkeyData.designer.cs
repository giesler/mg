//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace msn2.net.BarMonkey
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="BarMonkey")]
	public partial class BarMonkeyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDrink(Drink instance);
    partial void UpdateDrink(Drink instance);
    partial void DeleteDrink(Drink instance);
    partial void InsertUserFavorite(UserFavorite instance);
    partial void UpdateUserFavorite(UserFavorite instance);
    partial void DeleteUserFavorite(UserFavorite instance);
    partial void InsertDrinkIngredient(DrinkIngredient instance);
    partial void UpdateDrinkIngredient(DrinkIngredient instance);
    partial void DeleteDrinkIngredient(DrinkIngredient instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertIngredientSubstitute(IngredientSubstitute instance);
    partial void UpdateIngredientSubstitute(IngredientSubstitute instance);
    partial void DeleteIngredientSubstitute(IngredientSubstitute instance);
    partial void InsertRelay(Relay instance);
    partial void UpdateRelay(Relay instance);
    partial void DeleteRelay(Relay instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserDrinkHistory(UserDrinkHistory instance);
    partial void UpdateUserDrinkHistory(UserDrinkHistory instance);
    partial void DeleteUserDrinkHistory(UserDrinkHistory instance);
    partial void InsertUserDrinkIngredientHistory(UserDrinkIngredientHistory instance);
    partial void UpdateUserDrinkIngredientHistory(UserDrinkIngredientHistory instance);
    partial void DeleteUserDrinkIngredientHistory(UserDrinkIngredientHistory instance);
    partial void InsertContainer(Container instance);
    partial void UpdateContainer(Container instance);
    partial void DeleteContainer(Container instance);
    #endregion
		
		static BarMonkeyDataContext()
		{
		}
		
		public BarMonkeyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BarMonkeyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BarMonkeyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BarMonkeyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BarMonkeyDataContext() : 
				base(global::msn2.net.BarMonkey.Properties.Settings.Default.BarMonkeyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Drink> Drinks
		{
			get
			{
				return this.GetTable<Drink>();
			}
		}
		
		public System.Data.Linq.Table<UserFavorite> UserFavorites
		{
			get
			{
				return this.GetTable<UserFavorite>();
			}
		}
		
		public System.Data.Linq.Table<DrinkIngredient> DrinkIngredients
		{
			get
			{
				return this.GetTable<DrinkIngredient>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<IngredientSubstitute> IngredientSubstitutes
		{
			get
			{
				return this.GetTable<IngredientSubstitute>();
			}
		}
		
		public System.Data.Linq.Table<Relay> Relays
		{
			get
			{
				return this.GetTable<Relay>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserDrinkHistory> UserDrinkHistories
		{
			get
			{
				return this.GetTable<UserDrinkHistory>();
			}
		}
		
		public System.Data.Linq.Table<UserDrinkIngredientHistory> UserDrinkIngredientHistories
		{
			get
			{
				return this.GetTable<UserDrinkIngredientHistory>();
			}
		}
		
		public System.Data.Linq.Table<Container> Containers
		{
			get
			{
				return this.GetTable<Container>();
			}
		}
		
		[Function(Name="dbo.GetUsersFavoriteDrinks")]
		public ISingleResult<GetUsersFavoriteDrinksResult> GetUsersFavoriteDrinks([Parameter(DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<GetUsersFavoriteDrinksResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Drink")]
	public partial class Drink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private bool _IsPublished;
		
		private string _ImageUrl;
		
		private EntitySet<UserFavorite> _UserFavorites;
		
		private EntitySet<DrinkIngredient> _DrinkIngredients;
		
		private EntitySet<UserDrinkHistory> _UserDrinkHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnIsPublishedChanging(bool value);
    partial void OnIsPublishedChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    #endregion
		
		public Drink()
		{
			OnCreated();
			this._UserFavorites = new EntitySet<UserFavorite>(new Action<UserFavorite>(this.attach_UserFavorites), new Action<UserFavorite>(this.detach_UserFavorites));
			this._DrinkIngredients = new EntitySet<DrinkIngredient>(new Action<DrinkIngredient>(this.attach_DrinkIngredients), new Action<DrinkIngredient>(this.detach_DrinkIngredients));
			this._UserDrinkHistories = new EntitySet<UserDrinkHistory>(new Action<UserDrinkHistory>(this.attach_UserDrinkHistories), new Action<UserDrinkHistory>(this.detach_UserDrinkHistories));
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(512)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublished", DbType="Bit NOT NULL")]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Association(Name="Drink_UserFavorite", Storage="_UserFavorites", OtherKey="DrinkId")]
		public EntitySet<UserFavorite> UserFavorites
		{
			get
			{
				return this._UserFavorites;
			}
			set
			{
				this._UserFavorites.Assign(value);
			}
		}
		
		[Association(Name="Drink_DrinkIngredient", Storage="_DrinkIngredients", OtherKey="DrinkId")]
		public EntitySet<DrinkIngredient> DrinkIngredients
		{
			get
			{
				return this._DrinkIngredients;
			}
			set
			{
				this._DrinkIngredients.Assign(value);
			}
		}
		
		[Association(Name="Drink_UserDrinkHistory", Storage="_UserDrinkHistories", OtherKey="DrinkId")]
		public EntitySet<UserDrinkHistory> UserDrinkHistories
		{
			get
			{
				return this._UserDrinkHistories;
			}
			set
			{
				this._UserDrinkHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFavorites(UserFavorite entity)
		{
			this.SendPropertyChanging();
			entity.Drink = this;
			this.SendPropertyChanged("UserFavorites");
		}
		
		private void detach_UserFavorites(UserFavorite entity)
		{
			this.SendPropertyChanging();
			entity.Drink = null;
			this.SendPropertyChanged("UserFavorites");
		}
		
		private void attach_DrinkIngredients(DrinkIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Drink = this;
			this.SendPropertyChanged("DrinkIngredients");
		}
		
		private void detach_DrinkIngredients(DrinkIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Drink = null;
			this.SendPropertyChanged("DrinkIngredients");
		}
		
		private void attach_UserDrinkHistories(UserDrinkHistory entity)
		{
			this.SendPropertyChanging();
			entity.Drink = this;
			this.SendPropertyChanged("UserDrinkHistories");
		}
		
		private void detach_UserDrinkHistories(UserDrinkHistory entity)
		{
			this.SendPropertyChanging();
			entity.Drink = null;
			this.SendPropertyChanged("UserDrinkHistories");
		}
	}
	
	[Table(Name="dbo.UserFavorite")]
	public partial class UserFavorite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _DrinkId;
		
		private EntityRef<Drink> _Drink;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDrinkIdChanging(int value);
    partial void OnDrinkIdChanged();
    #endregion
		
		public UserFavorite()
		{
			OnCreated();
			this._Drink = default(EntityRef<Drink>);
			this._User = default(EntityRef<User>);
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_DrinkId", DbType="Int NOT NULL")]
		public int DrinkId
		{
			get
			{
				return this._DrinkId;
			}
			set
			{
				if ((this._DrinkId != value))
				{
					if (this._Drink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrinkIdChanging(value);
					this.SendPropertyChanging();
					this._DrinkId = value;
					this.SendPropertyChanged("DrinkId");
					this.OnDrinkIdChanged();
				}
			}
		}
		
		[Association(Name="Drink_UserFavorite", Storage="_Drink", ThisKey="DrinkId", IsForeignKey=true)]
		public Drink Drink
		{
			get
			{
				return this._Drink.Entity;
			}
			set
			{
				Drink previousValue = this._Drink.Entity;
				if (((previousValue != value) 
							|| (this._Drink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drink.Entity = null;
						previousValue.UserFavorites.Remove(this);
					}
					this._Drink.Entity = value;
					if ((value != null))
					{
						value.UserFavorites.Add(this);
						this._DrinkId = value.Id;
					}
					else
					{
						this._DrinkId = default(int);
					}
					this.SendPropertyChanged("Drink");
				}
			}
		}
		
		[Association(Name="User_UserFavorite", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserFavorites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserFavorites.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DrinkIngredient")]
	public partial class DrinkIngredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DrinkId;
		
		private int _IngredientId;
		
		private int _Sequence;
		
		private int _Group;
		
		private decimal _AmountOunces;
		
		private EntityRef<Drink> _Drink;
		
		private EntityRef<Ingredient> _Ingredient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrinkIdChanging(int value);
    partial void OnDrinkIdChanged();
    partial void OnIngredientIdChanging(int value);
    partial void OnIngredientIdChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    partial void OnGroupChanging(int value);
    partial void OnGroupChanged();
    partial void OnAmountOuncesChanging(decimal value);
    partial void OnAmountOuncesChanged();
    #endregion
		
		public DrinkIngredient()
		{
			OnCreated();
			this._Drink = default(EntityRef<Drink>);
			this._Ingredient = default(EntityRef<Ingredient>);
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DrinkId", DbType="Int NOT NULL")]
		public int DrinkId
		{
			get
			{
				return this._DrinkId;
			}
			set
			{
				if ((this._DrinkId != value))
				{
					if (this._Drink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrinkIdChanging(value);
					this.SendPropertyChanging();
					this._DrinkId = value;
					this.SendPropertyChanged("DrinkId");
					this.OnDrinkIdChanged();
				}
			}
		}
		
		[Column(Storage="_IngredientId", DbType="Int NOT NULL")]
		public int IngredientId
		{
			get
			{
				return this._IngredientId;
			}
			set
			{
				if ((this._IngredientId != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._IngredientId = value;
					this.SendPropertyChanged("IngredientId");
					this.OnIngredientIdChanged();
				}
			}
		}
		
		[Column(Storage="_Sequence", DbType="Int NOT NULL")]
		public int Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[Column(Name="[Group]", Storage="_Group", DbType="Int NOT NULL")]
		public int Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[Column(Storage="_AmountOunces", DbType="Decimal(4,3) NOT NULL")]
		public decimal AmountOunces
		{
			get
			{
				return this._AmountOunces;
			}
			set
			{
				if ((this._AmountOunces != value))
				{
					this.OnAmountOuncesChanging(value);
					this.SendPropertyChanging();
					this._AmountOunces = value;
					this.SendPropertyChanged("AmountOunces");
					this.OnAmountOuncesChanged();
				}
			}
		}
		
		[Association(Name="Drink_DrinkIngredient", Storage="_Drink", ThisKey="DrinkId", IsForeignKey=true)]
		public Drink Drink
		{
			get
			{
				return this._Drink.Entity;
			}
			set
			{
				Drink previousValue = this._Drink.Entity;
				if (((previousValue != value) 
							|| (this._Drink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drink.Entity = null;
						previousValue.DrinkIngredients.Remove(this);
					}
					this._Drink.Entity = value;
					if ((value != null))
					{
						value.DrinkIngredients.Add(this);
						this._DrinkId = value.Id;
					}
					else
					{
						this._DrinkId = default(int);
					}
					this.SendPropertyChanged("Drink");
				}
			}
		}
		
		[Association(Name="Ingredient_DrinkIngredient", Storage="_Ingredient", ThisKey="IngredientId", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.DrinkIngredients.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.DrinkIngredients.Add(this);
						this._IngredientId = value.Id;
					}
					else
					{
						this._IngredientId = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<byte> _RelayId;
		
		private decimal _RemainingOunces;
		
		private bool _IsAlchohol;
		
		private System.Nullable<decimal> _WarningThreshold;
		
		private bool _IsPerishable;
		
		private EntitySet<DrinkIngredient> _DrinkIngredients;
		
		private EntitySet<IngredientSubstitute> _IngredientSubstitutes;
		
		private EntitySet<IngredientSubstitute> _IngredientSubstitutes1;
		
		private EntitySet<UserDrinkIngredientHistory> _UserDrinkIngredientHistories;
		
		private EntityRef<Relay> _Relay;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRelayIdChanging(System.Nullable<byte> value);
    partial void OnRelayIdChanged();
    partial void OnRemainingOuncesChanging(decimal value);
    partial void OnRemainingOuncesChanged();
    partial void OnIsAlchoholChanging(bool value);
    partial void OnIsAlchoholChanged();
    partial void OnWarningThresholdChanging(System.Nullable<decimal> value);
    partial void OnWarningThresholdChanged();
    partial void OnIsPerishableChanging(bool value);
    partial void OnIsPerishableChanged();
    #endregion
		
		public Ingredient()
		{
			OnCreated();
			this._DrinkIngredients = new EntitySet<DrinkIngredient>(new Action<DrinkIngredient>(this.attach_DrinkIngredients), new Action<DrinkIngredient>(this.detach_DrinkIngredients));
			this._IngredientSubstitutes = new EntitySet<IngredientSubstitute>(new Action<IngredientSubstitute>(this.attach_IngredientSubstitutes), new Action<IngredientSubstitute>(this.detach_IngredientSubstitutes));
			this._IngredientSubstitutes1 = new EntitySet<IngredientSubstitute>(new Action<IngredientSubstitute>(this.attach_IngredientSubstitutes1), new Action<IngredientSubstitute>(this.detach_IngredientSubstitutes1));
			this._UserDrinkIngredientHistories = new EntitySet<UserDrinkIngredientHistory>(new Action<UserDrinkIngredientHistory>(this.attach_UserDrinkIngredientHistories), new Action<UserDrinkIngredientHistory>(this.detach_UserDrinkIngredientHistories));
			this._Relay = default(EntityRef<Relay>);
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_RelayId", DbType="TinyInt")]
		public System.Nullable<byte> RelayId
		{
			get
			{
				return this._RelayId;
			}
			set
			{
				if ((this._RelayId != value))
				{
					if (this._Relay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelayIdChanging(value);
					this.SendPropertyChanging();
					this._RelayId = value;
					this.SendPropertyChanged("RelayId");
					this.OnRelayIdChanged();
				}
			}
		}
		
		[Column(Storage="_RemainingOunces", DbType="Decimal(3,3) NOT NULL")]
		public decimal RemainingOunces
		{
			get
			{
				return this._RemainingOunces;
			}
			set
			{
				if ((this._RemainingOunces != value))
				{
					this.OnRemainingOuncesChanging(value);
					this.SendPropertyChanging();
					this._RemainingOunces = value;
					this.SendPropertyChanged("RemainingOunces");
					this.OnRemainingOuncesChanged();
				}
			}
		}
		
		[Column(Storage="_IsAlchohol", DbType="Bit NOT NULL")]
		public bool IsAlchohol
		{
			get
			{
				return this._IsAlchohol;
			}
			set
			{
				if ((this._IsAlchohol != value))
				{
					this.OnIsAlchoholChanging(value);
					this.SendPropertyChanging();
					this._IsAlchohol = value;
					this.SendPropertyChanged("IsAlchohol");
					this.OnIsAlchoholChanged();
				}
			}
		}
		
		[Column(Storage="_WarningThreshold", DbType="Decimal(3,3)")]
		public System.Nullable<decimal> WarningThreshold
		{
			get
			{
				return this._WarningThreshold;
			}
			set
			{
				if ((this._WarningThreshold != value))
				{
					this.OnWarningThresholdChanging(value);
					this.SendPropertyChanging();
					this._WarningThreshold = value;
					this.SendPropertyChanged("WarningThreshold");
					this.OnWarningThresholdChanged();
				}
			}
		}
		
		[Column(Storage="_IsPerishable", DbType="Bit NOT NULL")]
		public bool IsPerishable
		{
			get
			{
				return this._IsPerishable;
			}
			set
			{
				if ((this._IsPerishable != value))
				{
					this.OnIsPerishableChanging(value);
					this.SendPropertyChanging();
					this._IsPerishable = value;
					this.SendPropertyChanged("IsPerishable");
					this.OnIsPerishableChanged();
				}
			}
		}
		
		[Association(Name="Ingredient_DrinkIngredient", Storage="_DrinkIngredients", OtherKey="IngredientId")]
		public EntitySet<DrinkIngredient> DrinkIngredients
		{
			get
			{
				return this._DrinkIngredients;
			}
			set
			{
				this._DrinkIngredients.Assign(value);
			}
		}
		
		[Association(Name="Ingredient_IngredientSubstitute", Storage="_IngredientSubstitutes", OtherKey="IngredientId")]
		public EntitySet<IngredientSubstitute> IngredientSubstitutes
		{
			get
			{
				return this._IngredientSubstitutes;
			}
			set
			{
				this._IngredientSubstitutes.Assign(value);
			}
		}
		
		[Association(Name="Ingredient_IngredientSubstitute1", Storage="_IngredientSubstitutes1", OtherKey="SubstitueIngredientId")]
		public EntitySet<IngredientSubstitute> IngredientSubstitutes1
		{
			get
			{
				return this._IngredientSubstitutes1;
			}
			set
			{
				this._IngredientSubstitutes1.Assign(value);
			}
		}
		
		[Association(Name="Ingredient_UserDrinkIngredientHistory", Storage="_UserDrinkIngredientHistories", OtherKey="IngredientId")]
		public EntitySet<UserDrinkIngredientHistory> UserDrinkIngredientHistories
		{
			get
			{
				return this._UserDrinkIngredientHistories;
			}
			set
			{
				this._UserDrinkIngredientHistories.Assign(value);
			}
		}
		
		[Association(Name="Relay_Ingredient", Storage="_Relay", ThisKey="RelayId", IsForeignKey=true)]
		public Relay Relay
		{
			get
			{
				return this._Relay.Entity;
			}
			set
			{
				Relay previousValue = this._Relay.Entity;
				if (((previousValue != value) 
							|| (this._Relay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relay.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._Relay.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._RelayId = value.Id;
					}
					else
					{
						this._RelayId = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Relay");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrinkIngredients(DrinkIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
			this.SendPropertyChanged("DrinkIngredients");
		}
		
		private void detach_DrinkIngredients(DrinkIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
			this.SendPropertyChanged("DrinkIngredients");
		}
		
		private void attach_IngredientSubstitutes(IngredientSubstitute entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
			this.SendPropertyChanged("IngredientSubstitutes");
		}
		
		private void detach_IngredientSubstitutes(IngredientSubstitute entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
			this.SendPropertyChanged("IngredientSubstitutes");
		}
		
		private void attach_IngredientSubstitutes1(IngredientSubstitute entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient1 = this;
			this.SendPropertyChanged("IngredientSubstitutes1");
		}
		
		private void detach_IngredientSubstitutes1(IngredientSubstitute entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient1 = null;
			this.SendPropertyChanged("IngredientSubstitutes1");
		}
		
		private void attach_UserDrinkIngredientHistories(UserDrinkIngredientHistory entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
			this.SendPropertyChanged("UserDrinkIngredientHistories");
		}
		
		private void detach_UserDrinkIngredientHistories(UserDrinkIngredientHistory entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
			this.SendPropertyChanged("UserDrinkIngredientHistories");
		}
	}
	
	[Table(Name="dbo.IngredientSubstitute")]
	public partial class IngredientSubstitute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IngredientId;
		
		private int _SubstitueIngredientId;
		
		private int _Priority;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<Ingredient> _Ingredient1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIngredientIdChanging(int value);
    partial void OnIngredientIdChanged();
    partial void OnSubstitueIngredientIdChanging(int value);
    partial void OnSubstitueIngredientIdChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public IngredientSubstitute()
		{
			OnCreated();
			this._Ingredient = default(EntityRef<Ingredient>);
			this._Ingredient1 = default(EntityRef<Ingredient>);
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IngredientId", DbType="Int NOT NULL")]
		public int IngredientId
		{
			get
			{
				return this._IngredientId;
			}
			set
			{
				if ((this._IngredientId != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._IngredientId = value;
					this.SendPropertyChanged("IngredientId");
					this.OnIngredientIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstitueIngredientId", DbType="Int NOT NULL")]
		public int SubstitueIngredientId
		{
			get
			{
				return this._SubstitueIngredientId;
			}
			set
			{
				if ((this._SubstitueIngredientId != value))
				{
					if (this._Ingredient1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstitueIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._SubstitueIngredientId = value;
					this.SendPropertyChanged("SubstitueIngredientId");
					this.OnSubstitueIngredientIdChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Association(Name="Ingredient_IngredientSubstitute", Storage="_Ingredient", ThisKey="IngredientId", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.IngredientSubstitutes.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.IngredientSubstitutes.Add(this);
						this._IngredientId = value.Id;
					}
					else
					{
						this._IngredientId = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[Association(Name="Ingredient_IngredientSubstitute1", Storage="_Ingredient1", ThisKey="SubstitueIngredientId", IsForeignKey=true)]
		public Ingredient Ingredient1
		{
			get
			{
				return this._Ingredient1.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient1.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient1.Entity = null;
						previousValue.IngredientSubstitutes1.Remove(this);
					}
					this._Ingredient1.Entity = value;
					if ((value != null))
					{
						value.IngredientSubstitutes1.Add(this);
						this._SubstitueIngredientId = value.Id;
					}
					else
					{
						this._SubstitueIngredientId = default(int);
					}
					this.SendPropertyChanged("Ingredient1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Relay")]
	public partial class Relay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Id;
		
		private EntitySet<Ingredient> _Ingredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(byte value);
    partial void OnIdChanged();
    #endregion
		
		public Relay()
		{
			OnCreated();
			this._Ingredients = new EntitySet<Ingredient>(new Action<Ingredient>(this.attach_Ingredients), new Action<Ingredient>(this.detach_Ingredients));
		}
		
		[Column(Storage="_Id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="Relay_Ingredient", Storage="_Ingredients", OtherKey="RelayId")]
		public EntitySet<Ingredient> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Relay = this;
			this.SendPropertyChanged("Ingredients");
		}
		
		private void detach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Relay = null;
			this.SendPropertyChanged("Ingredients");
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Pin;
		
		private bool _IsAdmin;
		
		private string _Email;
		
		private string _TextMessageAddress;
		
		private string _ImageUrl;
		
		private System.Nullable<decimal> _RemainingOunces;
		
		private EntitySet<UserFavorite> _UserFavorites;
		
		private EntitySet<UserDrinkHistory> _UserDrinkHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPinChanging(string value);
    partial void OnPinChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTextMessageAddressChanging(string value);
    partial void OnTextMessageAddressChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnRemainingOuncesChanging(System.Nullable<decimal> value);
    partial void OnRemainingOuncesChanged();
    #endregion
		
		public User()
		{
			OnCreated();
			this._UserFavorites = new EntitySet<UserFavorite>(new Action<UserFavorite>(this.attach_UserFavorites), new Action<UserFavorite>(this.detach_UserFavorites));
			this._UserDrinkHistories = new EntitySet<UserDrinkHistory>(new Action<UserDrinkHistory>(this.attach_UserDrinkHistories), new Action<UserDrinkHistory>(this.detach_UserDrinkHistories));
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Pin", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Pin
		{
			get
			{
				return this._Pin;
			}
			set
			{
				if ((this._Pin != value))
				{
					this.OnPinChanging(value);
					this.SendPropertyChanging();
					this._Pin = value;
					this.SendPropertyChanged("Pin");
					this.OnPinChanged();
				}
			}
		}
		
		[Column(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_TextMessageAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TextMessageAddress
		{
			get
			{
				return this._TextMessageAddress;
			}
			set
			{
				if ((this._TextMessageAddress != value))
				{
					this.OnTextMessageAddressChanging(value);
					this.SendPropertyChanging();
					this._TextMessageAddress = value;
					this.SendPropertyChanged("TextMessageAddress");
					this.OnTextMessageAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_RemainingOunces", DbType="Decimal(3,3)")]
		public System.Nullable<decimal> RemainingOunces
		{
			get
			{
				return this._RemainingOunces;
			}
			set
			{
				if ((this._RemainingOunces != value))
				{
					this.OnRemainingOuncesChanging(value);
					this.SendPropertyChanging();
					this._RemainingOunces = value;
					this.SendPropertyChanged("RemainingOunces");
					this.OnRemainingOuncesChanged();
				}
			}
		}
		
		[Association(Name="User_UserFavorite", Storage="_UserFavorites", OtherKey="UserId")]
		public EntitySet<UserFavorite> UserFavorites
		{
			get
			{
				return this._UserFavorites;
			}
			set
			{
				this._UserFavorites.Assign(value);
			}
		}
		
		[Association(Name="User_UserDrinkHistory", Storage="_UserDrinkHistories", OtherKey="UserId")]
		public EntitySet<UserDrinkHistory> UserDrinkHistories
		{
			get
			{
				return this._UserDrinkHistories;
			}
			set
			{
				this._UserDrinkHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFavorites(UserFavorite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
			this.SendPropertyChanged("UserFavorites");
		}
		
		private void detach_UserFavorites(UserFavorite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
			this.SendPropertyChanged("UserFavorites");
		}
		
		private void attach_UserDrinkHistories(UserDrinkHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
			this.SendPropertyChanged("UserDrinkHistories");
		}
		
		private void detach_UserDrinkHistories(UserDrinkHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
			this.SendPropertyChanged("UserDrinkHistories");
		}
	}
	
	[Table(Name="dbo.UserDrinkHistory")]
	public partial class UserDrinkHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _DrinkId;
		
		private System.DateTime _Timestamp;
		
		private EntitySet<UserDrinkIngredientHistory> _UserDrinkIngredientHistories;
		
		private EntityRef<Drink> _Drink;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDrinkIdChanging(int value);
    partial void OnDrinkIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public UserDrinkHistory()
		{
			OnCreated();
			this._UserDrinkIngredientHistories = new EntitySet<UserDrinkIngredientHistory>(new Action<UserDrinkIngredientHistory>(this.attach_UserDrinkIngredientHistories), new Action<UserDrinkIngredientHistory>(this.detach_UserDrinkIngredientHistories));
			this._Drink = default(EntityRef<Drink>);
			this._User = default(EntityRef<User>);
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_DrinkId", DbType="Int NOT NULL")]
		public int DrinkId
		{
			get
			{
				return this._DrinkId;
			}
			set
			{
				if ((this._DrinkId != value))
				{
					if (this._Drink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrinkIdChanging(value);
					this.SendPropertyChanging();
					this._DrinkId = value;
					this.SendPropertyChanged("DrinkId");
					this.OnDrinkIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="UserDrinkHistory_UserDrinkIngredientHistory", Storage="_UserDrinkIngredientHistories", OtherKey="UserDrinkHistoryId")]
		public EntitySet<UserDrinkIngredientHistory> UserDrinkIngredientHistories
		{
			get
			{
				return this._UserDrinkIngredientHistories;
			}
			set
			{
				this._UserDrinkIngredientHistories.Assign(value);
			}
		}
		
		[Association(Name="Drink_UserDrinkHistory", Storage="_Drink", ThisKey="DrinkId", IsForeignKey=true)]
		public Drink Drink
		{
			get
			{
				return this._Drink.Entity;
			}
			set
			{
				Drink previousValue = this._Drink.Entity;
				if (((previousValue != value) 
							|| (this._Drink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drink.Entity = null;
						previousValue.UserDrinkHistories.Remove(this);
					}
					this._Drink.Entity = value;
					if ((value != null))
					{
						value.UserDrinkHistories.Add(this);
						this._DrinkId = value.Id;
					}
					else
					{
						this._DrinkId = default(int);
					}
					this.SendPropertyChanged("Drink");
				}
			}
		}
		
		[Association(Name="User_UserDrinkHistory", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserDrinkHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserDrinkHistories.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserDrinkIngredientHistories(UserDrinkIngredientHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserDrinkHistory = this;
			this.SendPropertyChanged("UserDrinkIngredientHistories");
		}
		
		private void detach_UserDrinkIngredientHistories(UserDrinkIngredientHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserDrinkHistory = null;
			this.SendPropertyChanged("UserDrinkIngredientHistories");
		}
	}
	
	[Table(Name="dbo.UserDrinkIngredientHistory")]
	public partial class UserDrinkIngredientHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserDrinkHistoryId;
		
		private int _IngredientId;
		
		private decimal _AmountOunces;
		
		private int _Sequence;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<UserDrinkHistory> _UserDrinkHistory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserDrinkHistoryIdChanging(int value);
    partial void OnUserDrinkHistoryIdChanged();
    partial void OnIngredientIdChanging(int value);
    partial void OnIngredientIdChanged();
    partial void OnAmountOuncesChanging(decimal value);
    partial void OnAmountOuncesChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    #endregion
		
		public UserDrinkIngredientHistory()
		{
			OnCreated();
			this._Ingredient = default(EntityRef<Ingredient>);
			this._UserDrinkHistory = default(EntityRef<UserDrinkHistory>);
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserDrinkHistoryId", DbType="Int NOT NULL")]
		public int UserDrinkHistoryId
		{
			get
			{
				return this._UserDrinkHistoryId;
			}
			set
			{
				if ((this._UserDrinkHistoryId != value))
				{
					if (this._UserDrinkHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserDrinkHistoryIdChanging(value);
					this.SendPropertyChanging();
					this._UserDrinkHistoryId = value;
					this.SendPropertyChanged("UserDrinkHistoryId");
					this.OnUserDrinkHistoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_IngredientId", DbType="Int NOT NULL")]
		public int IngredientId
		{
			get
			{
				return this._IngredientId;
			}
			set
			{
				if ((this._IngredientId != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._IngredientId = value;
					this.SendPropertyChanged("IngredientId");
					this.OnIngredientIdChanged();
				}
			}
		}
		
		[Column(Storage="_AmountOunces", DbType="Decimal(3,3) NOT NULL")]
		public decimal AmountOunces
		{
			get
			{
				return this._AmountOunces;
			}
			set
			{
				if ((this._AmountOunces != value))
				{
					this.OnAmountOuncesChanging(value);
					this.SendPropertyChanging();
					this._AmountOunces = value;
					this.SendPropertyChanged("AmountOunces");
					this.OnAmountOuncesChanged();
				}
			}
		}
		
		[Column(Storage="_Sequence", DbType="Int NOT NULL")]
		public int Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[Association(Name="Ingredient_UserDrinkIngredientHistory", Storage="_Ingredient", ThisKey="IngredientId", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.UserDrinkIngredientHistories.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.UserDrinkIngredientHistories.Add(this);
						this._IngredientId = value.Id;
					}
					else
					{
						this._IngredientId = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[Association(Name="UserDrinkHistory_UserDrinkIngredientHistory", Storage="_UserDrinkHistory", ThisKey="UserDrinkHistoryId", IsForeignKey=true)]
		public UserDrinkHistory UserDrinkHistory
		{
			get
			{
				return this._UserDrinkHistory.Entity;
			}
			set
			{
				UserDrinkHistory previousValue = this._UserDrinkHistory.Entity;
				if (((previousValue != value) 
							|| (this._UserDrinkHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDrinkHistory.Entity = null;
						previousValue.UserDrinkIngredientHistories.Remove(this);
					}
					this._UserDrinkHistory.Entity = value;
					if ((value != null))
					{
						value.UserDrinkIngredientHistories.Add(this);
						this._UserDrinkHistoryId = value.Id;
					}
					else
					{
						this._UserDrinkHistoryId = default(int);
					}
					this.SendPropertyChanged("UserDrinkHistory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Container")]
	public partial class Container : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _Size;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSizeChanging(decimal value);
    partial void OnSizeChanged();
    #endregion
		
		public Container()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="Decimal(9,2) NOT NULL")]
		public decimal Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetUsersFavoriteDrinksResult
	{
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private bool _IsPublished;
		
		private string _ImageUrl;
		
		public GetUsersFavoriteDrinksResult()
		{
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(512)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this._CreatedDate = value;
				}
			}
		}
		
		[Column(Storage="_IsPublished", DbType="Bit NOT NULL")]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this._IsPublished = value;
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this._ImageUrl = value;
				}
			}
		}
	}
}
