//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace UMClient {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetMedia : DataSet {
        
        private MediaDataTable tableMedia;
        
        public DataSetMedia() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetMedia(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Media"] != null)) {
                    this.Tables.Add(new MediaDataTable(ds.Tables["Media"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaDataTable Media {
            get {
                return this.tableMedia;
            }
        }
        
        public override DataSet Clone() {
            DataSetMedia cln = ((DataSetMedia)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Media"] != null)) {
                this.Tables.Add(new MediaDataTable(ds.Tables["Media"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMedia = ((MediaDataTable)(this.Tables["Media"]));
            if ((this.tableMedia != null)) {
                this.tableMedia.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetMedia";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetMedia.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMedia = new MediaDataTable();
            this.Tables.Add(this.tableMedia);
        }
        
        private bool ShouldSerializeMedia() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MediaRowChangeEventHandler(object sender, MediaRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnFilename;
            
            private DataColumn columnName;
            
            private DataColumn columnArtist;
            
            private DataColumn columnDuration;
            
            private DataColumn columnAlbum;
            
            private DataColumn columnGenre;
            
            private DataColumn columnBitrate;
            
            internal MediaDataTable() : 
                    base("Media") {
                this.InitClass();
            }
            
            internal MediaDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ArtistColumn {
                get {
                    return this.columnArtist;
                }
            }
            
            internal DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            internal DataColumn AlbumColumn {
                get {
                    return this.columnAlbum;
                }
            }
            
            internal DataColumn GenreColumn {
                get {
                    return this.columnGenre;
                }
            }
            
            internal DataColumn BitrateColumn {
                get {
                    return this.columnBitrate;
                }
            }
            
            public MediaRow this[int index] {
                get {
                    return ((MediaRow)(this.Rows[index]));
                }
            }
            
            public event MediaRowChangeEventHandler MediaRowChanged;
            
            public event MediaRowChangeEventHandler MediaRowChanging;
            
            public event MediaRowChangeEventHandler MediaRowDeleted;
            
            public event MediaRowChangeEventHandler MediaRowDeleting;
            
            public void AddMediaRow(MediaRow row) {
                this.Rows.Add(row);
            }
            
            public MediaRow AddMediaRow(string Filename, string Name, string Artist, System.Decimal Duration, string Album, string Genre, int Bitrate) {
                MediaRow rowMediaRow = ((MediaRow)(this.NewRow()));
                rowMediaRow.ItemArray = new object[] {
                        null,
                        Filename,
                        Name,
                        Artist,
                        Duration,
                        Album,
                        Genre,
                        Bitrate};
                this.Rows.Add(rowMediaRow);
                return rowMediaRow;
            }
            
            public MediaRow FindByID(int ID) {
                return ((MediaRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MediaDataTable cln = ((MediaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnFilename = this.Columns["Filename"];
                this.columnName = this.Columns["Name"];
                this.columnArtist = this.Columns["Artist"];
                this.columnDuration = this.Columns["Duration"];
                this.columnAlbum = this.Columns["Album"];
                this.columnGenre = this.Columns["Genre"];
                this.columnBitrate = this.Columns["Bitrate"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnFilename = new DataColumn("Filename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFilename);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnArtist = new DataColumn("Artist", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArtist);
                this.columnDuration = new DataColumn("Duration", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDuration);
                this.columnAlbum = new DataColumn("Album", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlbum);
                this.columnGenre = new DataColumn("Genre", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGenre);
                this.columnBitrate = new DataColumn("Bitrate", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBitrate);
                this.Constraints.Add(new UniqueConstraint("DataSetMediaKey1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public MediaRow NewMediaRow() {
                return ((MediaRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MediaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MediaRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaRowChanged != null)) {
                    this.MediaRowChanged(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaRowChanging != null)) {
                    this.MediaRowChanging(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaRowDeleted != null)) {
                    this.MediaRowDeleted(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaRowDeleting != null)) {
                    this.MediaRowDeleting(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMediaRow(MediaRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaRow : DataRow {
            
            private MediaDataTable tableMedia;
            
            internal MediaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMedia = ((MediaDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableMedia.IDColumn]));
                }
                set {
                    this[this.tableMedia.IDColumn] = value;
                }
            }
            
            public string Filename {
                get {
                    try {
                        return ((string)(this[this.tableMedia.FilenameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.FilenameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableMedia.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.NameColumn] = value;
                }
            }
            
            public string Artist {
                get {
                    try {
                        return ((string)(this[this.tableMedia.ArtistColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.ArtistColumn] = value;
                }
            }
            
            public System.Decimal Duration {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableMedia.DurationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.DurationColumn] = value;
                }
            }
            
            public string Album {
                get {
                    try {
                        return ((string)(this[this.tableMedia.AlbumColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.AlbumColumn] = value;
                }
            }
            
            public string Genre {
                get {
                    try {
                        return ((string)(this[this.tableMedia.GenreColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.GenreColumn] = value;
                }
            }
            
            public int Bitrate {
                get {
                    try {
                        return ((int)(this[this.tableMedia.BitrateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.BitrateColumn] = value;
                }
            }
            
            public bool IsFilenameNull() {
                return this.IsNull(this.tableMedia.FilenameColumn);
            }
            
            public void SetFilenameNull() {
                this[this.tableMedia.FilenameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableMedia.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableMedia.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsArtistNull() {
                return this.IsNull(this.tableMedia.ArtistColumn);
            }
            
            public void SetArtistNull() {
                this[this.tableMedia.ArtistColumn] = System.Convert.DBNull;
            }
            
            public bool IsDurationNull() {
                return this.IsNull(this.tableMedia.DurationColumn);
            }
            
            public void SetDurationNull() {
                this[this.tableMedia.DurationColumn] = System.Convert.DBNull;
            }
            
            public bool IsAlbumNull() {
                return this.IsNull(this.tableMedia.AlbumColumn);
            }
            
            public void SetAlbumNull() {
                this[this.tableMedia.AlbumColumn] = System.Convert.DBNull;
            }
            
            public bool IsGenreNull() {
                return this.IsNull(this.tableMedia.GenreColumn);
            }
            
            public void SetGenreNull() {
                this[this.tableMedia.GenreColumn] = System.Convert.DBNull;
            }
            
            public bool IsBitrateNull() {
                return this.IsNull(this.tableMedia.BitrateColumn);
            }
            
            public void SetBitrateNull() {
                this[this.tableMedia.BitrateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaRowChangeEvent : EventArgs {
            
            private MediaRow eventRow;
            
            private DataRowAction eventAction;
            
            public MediaRowChangeEvent(MediaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MediaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
