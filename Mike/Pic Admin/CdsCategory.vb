'------------------------------------------------------------------------------
' <autogenerated>
'     This class was generated by a tool.
'     Runtime Version: 1.0.2204.21
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data
Imports System.Core

Public Class CdsCategory
    Inherits System.Data.DataSet
    
    Private tableCount As Integer
    Private relationCount As Integer
    Private tableCategoryTable As CategoryTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
    End Sub
    
    Public Overridable ReadOnly Property <System.ComponentModel.PersistContentsAttribute(true)> Category As CategoryTable
        Get
            Return Me.tableCategoryTable
        End Get
    End Property
    
    Private Sub InitClass()
        Me.DataSetName = "CdsCategory"
        Me.Namespace = "http://www.tempuri.org/CdsCategory.xsd"
        Me.tableCount = 1
        Me.relationCount = 0
        Me.tableCategoryTable = New CategoryTable("Category")
        Me.Tables.Add(Me.tableCategoryTable)
    End Sub
    Protected Overrides Function HasSchemaChanged() As Boolean
        Return ((((Me.tableCount) <> (Me.Tables.Count))) Or (((Me.relationCount) <> (Me.Relations.Count))))
    End Function
    Public Overrides Function ShouldPersistTables() As Boolean
        Return ((Me.tableCount) <> (Me.Tables.Count))
    End Function
    Public Overrides Function ShouldPersistRelations() As Boolean
        Return ((Me.relationCount) <> (Me.Relations.Count))
    End Function
    Public Overrides Sub ResetTables()
        Dim i As Integer = 0
        Do While ((i) < (Me.Tables.Count))
            If ((Me.Tables(i)) = (Me.tableCategoryTable)) Then
            Else
                Me.Tables.Remove(Me.Tables(i))
            End If
            i = ((i) + (1))
        Loop
    End Sub
    Public Overrides Sub ResetRelations()
        Dim i As Integer = 0
        Do While ((i) < (Me.Relations.Count))
            Me.Relations.Remove(Me.Relations(i))
            i = ((i) + (1))
        Loop
    End Sub
    
    
    Public Delegate Sub CategoryRowChangeEventHandler(ByVal sender As [object], ByVal e As CategoryRowChangeEvent)
    
    Public Class CategoryTable
        Inherits DataTable
        Implements System.Collections.ICollection
        
        Private columnCount As Integer
        Private constraintCount As Integer
        Private columnCategoryID As Category_CategoryID
        Private columnParentID As Category_ParentID
        Private columnCategoryName As Category_CategoryName
        Private columnFullCategory As Category_FullCategory
        Private columnAccessLevel As Category_AccessLevel
        Public CategoryRowChanged As CategoryRowChangeEventHandler
        Public CategoryRowChanging As CategoryRowChangeEventHandler
        Public CategoryIDColumnChanging As DataColumnChangeEventHandler
        Public ParentIDColumnChanging As DataColumnChangeEventHandler
        Public CategoryNameColumnChanging As DataColumnChangeEventHandler
        Public FullCategoryColumnChanging As DataColumnChangeEventHandler
        Public AccessLevelColumnChanging As DataColumnChangeEventHandler
        
        	Public Default ReadOnly Property Item(ByVal index As Integer) As CategoryRow 
		Get 
			return CType(Me.Rows(index), CategoryRow)
		End Get
	End Property
        Public Overloads Sub New(ByVal name As [string])
            MyBase.New(name)
            Me.InitClass
        End Sub
        Public Overloads Sub New()
            MyBase.New("Category")
            Me.InitClass
        End Sub
        
        Public Overridable ReadOnly Property Count As Integer Implements System.Collections.ICollection.Count
            Get
                Return Me.Rows.Count
            End Get
        End Property
        Public Overridable ReadOnly Property System_Collections_ICollection_IsReadOnly As Boolean Implements System.Collections.ICollection.IsReadOnly
            Get
                Return false
            End Get
        End Property
        Public Overridable ReadOnly Property System_Collections_ICollection_IsSynchronized As Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return false
            End Get
        End Property
        Public Overridable ReadOnly Property System_Collections_ICollection_SyncRoot As [object] Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me
            End Get
        End Property
        Public Overridable ReadOnly Property CategoryIDColumn As Category_CategoryID
            Get
                Return Me.columnCategoryID
            End Get
        End Property
        Public Overridable ReadOnly Property ParentIDColumn As Category_ParentID
            Get
                Return Me.columnParentID
            End Get
        End Property
        Public Overridable ReadOnly Property CategoryNameColumn As Category_CategoryName
            Get
                Return Me.columnCategoryName
            End Get
        End Property
        Public Overridable ReadOnly Property FullCategoryColumn As Category_FullCategory
            Get
                Return Me.columnFullCategory
            End Get
        End Property
        Public Overridable ReadOnly Property AccessLevelColumn As Category_AccessLevel
            Get
                Return Me.columnAccessLevel
            End Get
        End Property
        
        Public Overloads Overridable Sub AddCategoryRow(ByVal rowCategoryRow As CategoryRow)
            Me.Rows.Add(rowCategoryRow)
        End Sub
        Public Overloads Overridable Function AddCategoryRow(ByVal columnCategoryID As Integer, ByVal columnParentID As Integer, ByVal columnCategoryName As String, ByVal columnFullCategory As String, ByVal columnAccessLevel As Byte) As CategoryRow
            Dim rowCategoryRow As CategoryRow
            rowCategoryRow = CType(Me.NewRow,CategoryRow)
            rowCategoryRow.ItemArray = New [Object]() {columnCategoryID, columnParentID, columnCategoryName, columnFullCategory, columnAccessLevel}
            Me.Rows.Add(rowCategoryRow)
            Return rowCategoryRow
        End Function
        Public Overridable Sub System_Collections_ICollection_CopyTo(ByVal array As Array, ByVal offset As Integer) Implements System.Collections.ICollection.CopyTo
            Dim i As Integer = 0
            Do While ((i) < (Me.Rows.Count))
                array.SetValue(Me.Rows(i), ((i) + (offset)))
                i = ((i) + (1))
            Loop
        End Sub
        Public Overridable Function FindByCategoryID(ByVal columnCategoryID As Integer) As CategoryRow
            Return CType(Me.Rows.Find(New [Object]() {columnCategoryID}),CategoryRow)
        End Function
        Public Overridable Function System_Collections_IEnumerable_GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.All.GetEnumerator
        End Function
        Protected Overrides Function HasSchemaChanged() As Boolean
            Return ((Me.columnCount) = (Me.Columns.Count))
        End Function
        Private Sub InitClass()
            Me.columnCount = 5
            Me.constraintCount = 1
            Me.columnCategoryID = New Category_CategoryID
            Me.Columns.Add(Me.columnCategoryID)
            Me.columnParentID = New Category_ParentID
            Me.Columns.Add(Me.columnParentID)
            Me.columnCategoryName = New Category_CategoryName
            Me.Columns.Add(Me.columnCategoryName)
            Me.columnFullCategory = New Category_FullCategory
            Me.Columns.Add(Me.columnFullCategory)
            Me.columnAccessLevel = New Category_AccessLevel
            Me.Columns.Add(Me.columnAccessLevel)
            Me.PrimaryKey = New System.Data.DataColumn() {Me.columnCategoryID}
        End Sub
        Public Overridable Function NewCategoryRow() As CategoryRow
            Return CType(Me.NewRow,CategoryRow)
        End Function
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            'We need to ensure that all Rows in the tabled are typed rows.
            'Table calls newRow whenever it needs to create a row.
            'So the following conditions are covered by Row newRow(Record record)
            '* Cursor calls table.addRecord(record) 
            '* table.addRow(object[] values) calls newRow(record)    
            Return New CategoryRow(builder)
        End Function
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CategoryRow)
        End Function
        Protected Overrides Sub OnRemoveColumn(ByVal column As DataColumn)
            If ((((((((((column) = (Me.columnCategoryID))) Or (((column) = (Me.columnParentID))))) Or (((column) = (Me.columnCategoryName))))) Or (((column) = (Me.columnFullCategory))))) Or (((column) = (Me.columnAccessLevel)))) Then
                Throw New ArgumentException("Cannot remove column since it is built in to this dataSet.")
            End If
        End Sub
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CategoryRowChanged) Is Nothing) Then
                Me.CategoryRowChanged.Invoke(Me, New CategoryRowChangeEvent(CType(e.Row,CategoryRow), e.Action))
            End If
        End Sub
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            If (Not (Me.CategoryRowChanging) Is Nothing) Then
                Me.CategoryRowChanging.Invoke(Me, New CategoryRowChangeEvent(CType(e.Row,CategoryRow), e.Action))
            End If
        End Sub
        Protected Overridable Sub OnCategoryIDColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.CategoryIDColumnChanging) Is Nothing) Then
                Me.CategoryIDColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overridable Sub OnParentIDColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.ParentIDColumnChanging) Is Nothing) Then
                Me.ParentIDColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overridable Sub OnCategoryNameColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.CategoryNameColumnChanging) Is Nothing) Then
                Me.CategoryNameColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overridable Sub OnFullCategoryColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.FullCategoryColumnChanging) Is Nothing) Then
                Me.FullCategoryColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overridable Sub OnAccessLevelColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.AccessLevelColumnChanging) Is Nothing) Then
                Me.AccessLevelColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overrides Sub OnColumnChanging(ByVal e As DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If ((e.Column) = (Me.columnCategoryID)) Then
                Me.OnCategoryIDColumnChanging(e)
            Else
                If ((e.Column) = (Me.columnParentID)) Then
                    Me.OnParentIDColumnChanging(e)
                Else
                    If ((e.Column) = (Me.columnCategoryName)) Then
                        Me.OnCategoryNameColumnChanging(e)
                    Else
                        If ((e.Column) = (Me.columnFullCategory)) Then
                            Me.OnFullCategoryColumnChanging(e)
                        Else
                            If ((e.Column) = (Me.columnAccessLevel)) Then
                                Me.OnAccessLevelColumnChanging(e)
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        Public Overridable Sub RemoveCategoryRow(ByVal rowCategoryRow As CategoryRow)
            Me.Rows.Remove(rowCategoryRow)
        End Sub
        Public Overrides Function ShouldPersistPrimaryKey() As Boolean
            Return false
        End Function
        Public Overrides Sub ResetPrimaryKey()
        End Sub
        Public Overrides Function ShouldPersistColumns() As Boolean
            Return ((Me.columnCount) <> (Me.Columns.Count))
        End Function
        Public Overrides Sub ResetColumns()
            Dim i As Integer = 0
            Do While ((i) < (Me.Columns.Count))
                If ((((Me.Columns(i)) = (Me.columnAccessLevel))) Or (((((Me.Columns(i)) = (Me.columnFullCategory))) Or (((((Me.Columns(i)) = (Me.columnCategoryName))) Or (((((Me.Columns(i)) = (Me.columnParentID))) Or (((Me.Columns(i)) = (Me.columnCategoryID)))))))))) Then
                Else
                    Me.Columns.Remove(Me.Columns(i))
                End If
                i = ((i) + (1))
            Loop
        End Sub
        Public Overrides Function ShouldPersistConstraints() As Boolean
            Return ((Me.constraintCount) <> (Me.Constraints.Count))
        End Function
        Public Overrides Sub ResetConstraints()
            Dim i As Integer = Me.constraintCount
            Do While ((i) < (Me.Constraints.Count))
                Me.Constraints.Remove(Me.Constraints(i))
                i = ((i) + (1))
            Loop
        End Sub
        
    End Class
    
    Public Class Category_CategoryID
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("CategoryID", GetType(System.Int32))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
            Me.AllowNull = false
            Me.ReadOnly = true
            Me.Unique = true
        End Sub
        
    End Class
    
    Public Class Category_ParentID
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("ParentID", GetType(System.Int32))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
            Me.AllowNull = false
        End Sub
        
    End Class
    
    Public Class Category_CategoryName
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("CategoryName", GetType(System.String))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
            Me.AllowNull = false
        End Sub
        
    End Class
    
    Public Class Category_FullCategory
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("FullCategory", GetType(System.String))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
        End Sub
        
    End Class
    
    Public Class Category_AccessLevel
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("AccessLevel", GetType(System.Byte))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
        End Sub
        
    End Class
    
    Public Class CategoryRow
        Inherits DataRow
        
        Private tableCategoryTable As CategoryTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCategoryTable = CType(Me.Table,CategoryTable)
        End Sub
        
        Public Overridable Property CategoryID As Integer
            Get
                Return CType(Me(Me.tableCategoryTable.CategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCategoryTable.CategoryIDColumn) = value
            End Set
        End Property
        Public Overridable Property ParentID As Integer
            Get
                Return CType(Me(Me.tableCategoryTable.ParentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCategoryTable.ParentIDColumn) = value
            End Set
        End Property
        Public Overridable Property CategoryName As String
            Get
                Return CType(Me(Me.tableCategoryTable.CategoryNameColumn),String)
            End Get
            Set
                Me(Me.tableCategoryTable.CategoryNameColumn) = value
            End Set
        End Property
        Public Overridable Property FullCategory As String
            Get
                Return CType(Me(Me.tableCategoryTable.FullCategoryColumn),String)
            End Get
            Set
                Me(Me.tableCategoryTable.FullCategoryColumn) = value
            End Set
        End Property
        Public Overridable Property FullCategoryIsNull As Boolean
            Get
                Return Me.IsNull(Me.tableCategoryTable.FullCategoryColumn)
            End Get
            Set
                If ((value) = (true)) Then
                    Me(Me.tableCategoryTable.FullCategoryColumn) = [Convert].DBNull
                Else
                    Throw New ArgumentException("Can only set this property to true.")
                End If
            End Set
        End Property
        Public Overridable Property AccessLevel As Byte
            Get
                Return CType(Me(Me.tableCategoryTable.AccessLevelColumn),Byte)
            End Get
            Set
                Me(Me.tableCategoryTable.AccessLevelColumn) = value
            End Set
        End Property
        Public Overridable Property AccessLevelIsNull As Boolean
            Get
                Return Me.IsNull(Me.tableCategoryTable.AccessLevelColumn)
            End Get
            Set
                If ((value) = (true)) Then
                    Me(Me.tableCategoryTable.AccessLevelColumn) = [Convert].DBNull
                Else
                    Throw New ArgumentException("Can only set this property to true.")
                End If
            End Set
        End Property
        
    End Class
    
    Public Class CategoryRowChangeEvent
        Inherits EventArgs
        
        Private rowCategoryRow As CategoryRow
        Private actionValue As System.Data.DataRowAction
        
        Public Sub New(ByVal rowCategoryRowArg As CategoryRow, ByVal actionArg As DataRowAction)
            MyBase.New
            Me.rowCategoryRow = rowCategoryRowArg
            Me.actionValue = actionArg
        End Sub
        
        Public Overridable ReadOnly Property CategoryRow As CategoryRow
            Get
                Return Me.rowCategoryRow
            End Get
        End Property
        Public Overridable ReadOnly Property Action As DataRowAction
            Get
                Return Me.actionValue
            End Get
        End Property
        
    End Class
    
End Class
